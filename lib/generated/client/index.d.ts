
/**
 * Client
**/

import * as runtime from './runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model chii_apps
 * 
 */
export type chii_apps = {
  app_id: number
  app_type: boolean
  app_creator: number
  app_name: string
  app_desc: string
  app_url: string
  app_collects: number
  app_status: boolean
  app_timestamp: number
  app_lasttouch: number
  app_ban: boolean
}

/**
 * Model chii_characters
 * 
 */
export type chii_characters = {
  crt_id: number
  crt_name: string
  crt_role: number
  crt_infobox: string
  crt_summary: string
  crt_img: string
  crt_comment: number
  crt_collects: number
  crt_dateline: number
  crt_lastpost: number
  crt_lock: number
  crt_img_anidb: string
  crt_anidb_id: number
  crt_ban: number
  crt_redirect: number
  crt_nsfw: boolean
}

/**
 * Model chii_crt_cast_index
 * 
 */
export type chii_crt_cast_index = {
  crt_id: number
  prsn_id: number
  subject_id: number
  subject_type_id: number
  summary: string
}

/**
 * Model chii_crt_comments
 * 
 */
export type chii_crt_comments = {
  crt_pst_id: number
  crt_pst_mid: number
  crt_pst_uid: number
  crt_pst_related: number
  crt_pst_dateline: number
  crt_pst_content: string
}

/**
 * Model chii_crt_subject_index
 * 
 */
export type chii_crt_subject_index = {
  crt_id: number
  subject_id: number
  subject_type_id: number
  crt_type: number
  ctr_appear_eps: string
  crt_order: number
}

/**
 * Model chii_ep_comments
 * 
 */
export type chii_ep_comments = {
  ep_pst_id: number
  ep_pst_mid: number
  ep_pst_uid: number
  ep_pst_related: number
  ep_pst_dateline: number
  ep_pst_content: string
}

/**
 * Model chii_ep_revisions
 * 
 */
export type chii_ep_revisions = {
  ep_rev_id: number
  rev_sid: number
  rev_eids: string
  rev_ep_infobox: string
  rev_creator: number
  rev_version: boolean
  rev_dateline: number
  rev_edit_summary: string
}

/**
 * Model chii_ep_status
 * 
 */
export type chii_ep_status = {
  ep_stt_id: number
  ep_stt_uid: number
  ep_stt_sid: number
  ep_stt_on_prg: boolean
  ep_stt_status: string
  ep_stt_lasttouch: number
}

/**
 * Model chii_episodes
 * 
 */
export type chii_episodes = {
  ep_id: number
  ep_subject_id: number
  ep_sort: number
  ep_type: number
  ep_disc: number
  ep_name: string
  ep_name_cn: string
  ep_rate: number
  ep_duration: string
  ep_airdate: string
  ep_online: string
  ep_comment: number
  ep_resources: number
  ep_desc: string
  ep_dateline: number
  ep_lastpost: number
  ep_lock: number
  ep_ban: number
}

/**
 * Model chii_group_members
 * 
 */
export type chii_group_members = {
  gmb_uid: number
  gmb_gid: number
  gmb_moderator: boolean
  gmb_dateline: number
}

/**
 * Model chii_group_posts
 * 
 */
export type chii_group_posts = {
  grp_pst_id: number
  grp_pst_mid: number
  grp_pst_uid: number
  grp_pst_related: number
  grp_pst_content: string
  grp_pst_state: boolean
  grp_pst_dateline: number
}

/**
 * Model chii_group_topics
 * 
 */
export type chii_group_topics = {
  grp_tpc_id: number
  grp_tpc_gid: number
  grp_tpc_uid: number
  grp_tpc_title: string
  grp_tpc_dateline: number
  grp_tpc_lastpost: number
  grp_tpc_replies: number
  grp_tpc_state: boolean
  grp_tpc_display: boolean
}

/**
 * Model chii_groups
 * 
 */
export type chii_groups = {
  grp_id: number
  grp_cat: number
  grp_name: string
  grp_title: string
  grp_icon: string
  grp_creator: number
  grp_topics: number
  grp_posts: number
  grp_members: number
  grp_desc: string
  grp_lastpost: number
  grp_builddate: number
  grp_accessible: boolean
  grp_nsfw: boolean
}

/**
 * Model chii_index
 * 
 */
export type chii_index = {
  idx_id: number
  idx_type: number
  idx_title: string
  idx_desc: string
  idx_replies: number
  idx_subject_total: number
  idx_collects: number
  idx_stats: string
  idx_dateline: number
  idx_lasttouch: number
  idx_uid: number
  idx_ban: boolean
}

/**
 * Model chii_index_collects
 * 
 */
export type chii_index_collects = {
  idx_clt_id: number
  idx_clt_mid: number
  idx_clt_uid: number
  idx_clt_dateline: number
}

/**
 * Model chii_index_comments
 * 
 */
export type chii_index_comments = {
  idx_pst_id: number
  idx_pst_mid: number
  idx_pst_uid: number
  idx_pst_related: number
  idx_pst_dateline: number
  idx_pst_content: string
}

/**
 * Model chii_index_related
 * 
 */
export type chii_index_related = {
  idx_rlt_id: number
  idx_rlt_cat: number
  idx_rlt_rid: number
  idx_rlt_type: number
  idx_rlt_sid: number
  idx_rlt_order: number
  idx_rlt_comment: string
  idx_rlt_dateline: number
}

/**
 * Model chii_memberfields
 * 
 */
export type chii_memberfields = {
  uid: number
  site: string
  location: string
  bio: string
  privacy: string
  blocklist: string
}

/**
 * Model chii_members
 * 
 */
export type chii_members = {
  uid: number
  username: string
  nickname: string
  avatar: string
  groupid: number
  regdate: number
  lastvisit: number
  lastactivity: number
  lastpost: number
  dateformat: string
  timeformat: boolean
  timeoffset: string
  newpm: boolean
  new_notify: number
  sign: string
  password_crypt: string
  email: string
}

/**
 * Model chii_oauth_access_tokens
 * 
 */
export type chii_oauth_access_tokens = {
  id: number
  type: boolean
  access_token: string
  client_id: string
  user_id: string | null
  expires: Date
  scope: string | null
  info: string
}

/**
 * Model chii_oauth_clients
 * 
 */
export type chii_oauth_clients = {
  app_id: number
  client_id: string
  client_secret: string | null
  redirect_uri: string | null
  grant_types: string | null
  scope: string | null
  user_id: string | null
}

/**
 * Model chii_os_web_sessions
 * 
 */
export type chii_os_web_sessions = {
  key: string
  user_id: number
  value: Buffer
  created_at: bigint
  expired_at: bigint
}

/**
 * Model chii_person_collects
 * 
 */
export type chii_person_collects = {
  prsn_clt_id: number
  prsn_clt_cat: chii_person_collects_prsn_clt_cat
  prsn_clt_mid: number
  prsn_clt_uid: number
  prsn_clt_dateline: number
}

/**
 * Model chii_person_cs_index
 * 
 */
export type chii_person_cs_index = {
  prsn_type: chii_person_cs_index_prsn_type
  prsn_id: number
  prsn_position: number
  subject_id: number
  subject_type_id: number
  summary: string
  prsn_appear_eps: string
}

/**
 * Model chii_person_fields
 * 
 */
export type chii_person_fields = {
  prsn_cat: chii_person_fields_prsn_cat
  prsn_id: number
  gender: number
  bloodtype: number
  birth_year: number
  birth_mon: number
  birth_day: number
}

/**
 * Model chii_persons
 * 
 */
export type chii_persons = {
  prsn_id: number
  prsn_name: string
  prsn_type: number
  prsn_infobox: string
  prsn_producer: boolean
  prsn_mangaka: boolean
  prsn_artist: boolean
  prsn_seiyu: boolean
  prsn_writer: number
  prsn_illustrator: number
  prsn_actor: boolean
  prsn_summary: string
  prsn_img: string
  prsn_img_anidb: string
  prsn_comment: number
  prsn_collects: number
  prsn_dateline: number
  prsn_lastpost: number
  prsn_lock: number
  prsn_anidb_id: number
  prsn_ban: number
  prsn_redirect: number
  prsn_nsfw: boolean
}

/**
 * Model chii_prsn_comments
 * 
 */
export type chii_prsn_comments = {
  prsn_pst_id: number
  prsn_pst_mid: number
  prsn_pst_uid: number
  prsn_pst_related: number
  prsn_pst_dateline: number
  prsn_pst_content: string
}

/**
 * Model chii_rev_history
 * 
 */
export type chii_rev_history = {
  rev_id: number
  rev_type: number
  rev_mid: number
  rev_text_id: number
  rev_dateline: number
  rev_creator: number
  rev_edit_summary: string
}

/**
 * Model chii_rev_text
 * 
 */
export type chii_rev_text = {
  rev_text_id: number
  rev_text: Buffer
}

/**
 * Model chii_subject_fields
 * 
 */
export type chii_subject_fields = {
  field_sid: number
  field_tid: number
  field_tags: string
  field_rate_1: number
  field_rate_2: number
  field_rate_3: number
  field_rate_4: number
  field_rate_5: number
  field_rate_6: number
  field_rate_7: number
  field_rate_8: number
  field_rate_9: number
  field_rate_10: number
  field_airtime: boolean
  field_rank: number
  field_year: number
  field_mon: number
  field_week_day: boolean
  field_date: Date
  field_redirect: number
}

/**
 * Model chii_subject_interests
 * 
 */
export type chii_subject_interests = {
  interest_id: number
  interest_uid: number
  interest_subject_id: number
  interest_subject_type: number
  interest_rate: number
  interest_type: boolean
  interest_has_comment: boolean
  interest_comment: string
  interest_tag: string
  interest_ep_status: number
  interest_vol_status: number
  interest_wish_dateline: number
  interest_doing_dateline: number
  interest_collect_dateline: number
  interest_on_hold_dateline: number
  interest_dropped_dateline: number
  interest_create_ip: string
  interest_lasttouch_ip: string
  interest_lasttouch: number
  interest_private: boolean
}

/**
 * Model chii_subject_posts
 * 
 */
export type chii_subject_posts = {
  sbj_pst_id: number
  sbj_pst_mid: number
  sbj_pst_uid: number
  sbj_pst_related: number
  sbj_pst_content: string
  sbj_pst_state: boolean
  sbj_pst_dateline: number
}

/**
 * Model chii_subject_relations
 * 
 */
export type chii_subject_relations = {
  rlt_subject_id: number
  rlt_subject_type_id: number
  rlt_relation_type: number
  rlt_related_subject_id: number
  rlt_related_subject_type_id: number
  rlt_vice_versa: boolean
  rlt_order: number
}

/**
 * Model chii_subject_revisions
 * 
 */
export type chii_subject_revisions = {
  rev_id: number
  rev_type: number
  rev_subject_id: number
  rev_type_id: number
  rev_creator: number
  rev_dateline: number
  rev_name: string
  rev_name_cn: string
  rev_field_infobox: string
  rev_field_summary: string
  rev_vote_field: string
  rev_field_eps: number
  rev_edit_summary: string
  rev_platform: number
}

/**
 * Model chii_subject_topics
 * 
 */
export type chii_subject_topics = {
  sbj_tpc_id: number
  sbj_tpc_subject_id: number
  sbj_tpc_uid: number
  sbj_tpc_title: string
  sbj_tpc_dateline: number
  sbj_tpc_lastpost: number
  sbj_tpc_replies: number
  sbj_tpc_state: boolean
  sbj_tpc_display: boolean
}

/**
 * Model chii_subjects
 * 
 */
export type chii_subjects = {
  subject_id: number
  subject_type_id: number
  subject_name: string
  subject_name_cn: string
  subject_uid: string
  subject_creator: number
  subject_dateline: number
  subject_image: string
  subject_platform: number
  field_infobox: string
  field_summary: string
  field_5: string
  field_volumes: number
  field_eps: number
  subject_wish: number
  subject_collect: number
  subject_doing: number
  subject_on_hold: number
  subject_dropped: number
  subject_series: boolean
  subject_series_entry: number
  subject_idx_cn: string
  subject_airtime: boolean
  subject_nsfw: boolean
  subject_ban: boolean
}

/**
 * Model chii_timeline
 * 
 */
export type chii_timeline = {
  tml_id: number
  tml_uid: number
  tml_cat: number
  tml_type: number
  tml_related: string
  tml_memo: string
  tml_img: string
  tml_batch: number
  tml_source: number
  tml_replies: number
  tml_dateline: number
  tml_status: number
}

/**
 * Model chii_usergroup
 * 
 */
export type chii_usergroup = {
  usr_grp_id: number
  usr_grp_name: string
  usr_grp_perm: string
  usr_grp_dateline: number
}

/**
 * Model example
 * 
 */
export type example = {
  id: number
  time: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const chii_person_collects_prsn_clt_cat: {
  prsn: 'prsn',
  crt: 'crt'
};

export type chii_person_collects_prsn_clt_cat = (typeof chii_person_collects_prsn_clt_cat)[keyof typeof chii_person_collects_prsn_clt_cat]


export const chii_person_cs_index_prsn_type: {
  prsn: 'prsn',
  crt: 'crt'
};

export type chii_person_cs_index_prsn_type = (typeof chii_person_cs_index_prsn_type)[keyof typeof chii_person_cs_index_prsn_type]


export const chii_person_fields_prsn_cat: {
  prsn: 'prsn',
  crt: 'crt'
};

export type chii_person_fields_prsn_cat = (typeof chii_person_fields_prsn_cat)[keyof typeof chii_person_fields_prsn_cat]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Chii_apps
 * const chii_apps = await prisma.chii_apps.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Chii_apps
   * const chii_apps = await prisma.chii_apps.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.chii_apps`: Exposes CRUD operations for the **chii_apps** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_apps
    * const chii_apps = await prisma.chii_apps.findMany()
    * ```
    */
  get chii_apps(): Prisma.chii_appsDelegate<GlobalReject>;

  /**
   * `prisma.chii_characters`: Exposes CRUD operations for the **chii_characters** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_characters
    * const chii_characters = await prisma.chii_characters.findMany()
    * ```
    */
  get chii_characters(): Prisma.chii_charactersDelegate<GlobalReject>;

  /**
   * `prisma.chii_crt_cast_index`: Exposes CRUD operations for the **chii_crt_cast_index** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_crt_cast_indices
    * const chii_crt_cast_indices = await prisma.chii_crt_cast_index.findMany()
    * ```
    */
  get chii_crt_cast_index(): Prisma.chii_crt_cast_indexDelegate<GlobalReject>;

  /**
   * `prisma.chii_crt_comments`: Exposes CRUD operations for the **chii_crt_comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_crt_comments
    * const chii_crt_comments = await prisma.chii_crt_comments.findMany()
    * ```
    */
  get chii_crt_comments(): Prisma.chii_crt_commentsDelegate<GlobalReject>;

  /**
   * `prisma.chii_crt_subject_index`: Exposes CRUD operations for the **chii_crt_subject_index** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_crt_subject_indices
    * const chii_crt_subject_indices = await prisma.chii_crt_subject_index.findMany()
    * ```
    */
  get chii_crt_subject_index(): Prisma.chii_crt_subject_indexDelegate<GlobalReject>;

  /**
   * `prisma.chii_ep_comments`: Exposes CRUD operations for the **chii_ep_comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_ep_comments
    * const chii_ep_comments = await prisma.chii_ep_comments.findMany()
    * ```
    */
  get chii_ep_comments(): Prisma.chii_ep_commentsDelegate<GlobalReject>;

  /**
   * `prisma.chii_ep_revisions`: Exposes CRUD operations for the **chii_ep_revisions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_ep_revisions
    * const chii_ep_revisions = await prisma.chii_ep_revisions.findMany()
    * ```
    */
  get chii_ep_revisions(): Prisma.chii_ep_revisionsDelegate<GlobalReject>;

  /**
   * `prisma.chii_ep_status`: Exposes CRUD operations for the **chii_ep_status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_ep_statuses
    * const chii_ep_statuses = await prisma.chii_ep_status.findMany()
    * ```
    */
  get chii_ep_status(): Prisma.chii_ep_statusDelegate<GlobalReject>;

  /**
   * `prisma.chii_episodes`: Exposes CRUD operations for the **chii_episodes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_episodes
    * const chii_episodes = await prisma.chii_episodes.findMany()
    * ```
    */
  get chii_episodes(): Prisma.chii_episodesDelegate<GlobalReject>;

  /**
   * `prisma.chii_group_members`: Exposes CRUD operations for the **chii_group_members** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_group_members
    * const chii_group_members = await prisma.chii_group_members.findMany()
    * ```
    */
  get chii_group_members(): Prisma.chii_group_membersDelegate<GlobalReject>;

  /**
   * `prisma.chii_group_posts`: Exposes CRUD operations for the **chii_group_posts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_group_posts
    * const chii_group_posts = await prisma.chii_group_posts.findMany()
    * ```
    */
  get chii_group_posts(): Prisma.chii_group_postsDelegate<GlobalReject>;

  /**
   * `prisma.chii_group_topics`: Exposes CRUD operations for the **chii_group_topics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_group_topics
    * const chii_group_topics = await prisma.chii_group_topics.findMany()
    * ```
    */
  get chii_group_topics(): Prisma.chii_group_topicsDelegate<GlobalReject>;

  /**
   * `prisma.chii_groups`: Exposes CRUD operations for the **chii_groups** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_groups
    * const chii_groups = await prisma.chii_groups.findMany()
    * ```
    */
  get chii_groups(): Prisma.chii_groupsDelegate<GlobalReject>;

  /**
   * `prisma.chii_index`: Exposes CRUD operations for the **chii_index** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_indices
    * const chii_indices = await prisma.chii_index.findMany()
    * ```
    */
  get chii_index(): Prisma.chii_indexDelegate<GlobalReject>;

  /**
   * `prisma.chii_index_collects`: Exposes CRUD operations for the **chii_index_collects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_index_collects
    * const chii_index_collects = await prisma.chii_index_collects.findMany()
    * ```
    */
  get chii_index_collects(): Prisma.chii_index_collectsDelegate<GlobalReject>;

  /**
   * `prisma.chii_index_comments`: Exposes CRUD operations for the **chii_index_comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_index_comments
    * const chii_index_comments = await prisma.chii_index_comments.findMany()
    * ```
    */
  get chii_index_comments(): Prisma.chii_index_commentsDelegate<GlobalReject>;

  /**
   * `prisma.chii_index_related`: Exposes CRUD operations for the **chii_index_related** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_index_relateds
    * const chii_index_relateds = await prisma.chii_index_related.findMany()
    * ```
    */
  get chii_index_related(): Prisma.chii_index_relatedDelegate<GlobalReject>;

  /**
   * `prisma.chii_memberfields`: Exposes CRUD operations for the **chii_memberfields** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_memberfields
    * const chii_memberfields = await prisma.chii_memberfields.findMany()
    * ```
    */
  get chii_memberfields(): Prisma.chii_memberfieldsDelegate<GlobalReject>;

  /**
   * `prisma.chii_members`: Exposes CRUD operations for the **chii_members** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_members
    * const chii_members = await prisma.chii_members.findMany()
    * ```
    */
  get chii_members(): Prisma.chii_membersDelegate<GlobalReject>;

  /**
   * `prisma.chii_oauth_access_tokens`: Exposes CRUD operations for the **chii_oauth_access_tokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_oauth_access_tokens
    * const chii_oauth_access_tokens = await prisma.chii_oauth_access_tokens.findMany()
    * ```
    */
  get chii_oauth_access_tokens(): Prisma.chii_oauth_access_tokensDelegate<GlobalReject>;

  /**
   * `prisma.chii_oauth_clients`: Exposes CRUD operations for the **chii_oauth_clients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_oauth_clients
    * const chii_oauth_clients = await prisma.chii_oauth_clients.findMany()
    * ```
    */
  get chii_oauth_clients(): Prisma.chii_oauth_clientsDelegate<GlobalReject>;

  /**
   * `prisma.chii_os_web_sessions`: Exposes CRUD operations for the **chii_os_web_sessions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_os_web_sessions
    * const chii_os_web_sessions = await prisma.chii_os_web_sessions.findMany()
    * ```
    */
  get chii_os_web_sessions(): Prisma.chii_os_web_sessionsDelegate<GlobalReject>;

  /**
   * `prisma.chii_person_collects`: Exposes CRUD operations for the **chii_person_collects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_person_collects
    * const chii_person_collects = await prisma.chii_person_collects.findMany()
    * ```
    */
  get chii_person_collects(): Prisma.chii_person_collectsDelegate<GlobalReject>;

  /**
   * `prisma.chii_person_cs_index`: Exposes CRUD operations for the **chii_person_cs_index** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_person_cs_indices
    * const chii_person_cs_indices = await prisma.chii_person_cs_index.findMany()
    * ```
    */
  get chii_person_cs_index(): Prisma.chii_person_cs_indexDelegate<GlobalReject>;

  /**
   * `prisma.chii_person_fields`: Exposes CRUD operations for the **chii_person_fields** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_person_fields
    * const chii_person_fields = await prisma.chii_person_fields.findMany()
    * ```
    */
  get chii_person_fields(): Prisma.chii_person_fieldsDelegate<GlobalReject>;

  /**
   * `prisma.chii_persons`: Exposes CRUD operations for the **chii_persons** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_persons
    * const chii_persons = await prisma.chii_persons.findMany()
    * ```
    */
  get chii_persons(): Prisma.chii_personsDelegate<GlobalReject>;

  /**
   * `prisma.chii_prsn_comments`: Exposes CRUD operations for the **chii_prsn_comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_prsn_comments
    * const chii_prsn_comments = await prisma.chii_prsn_comments.findMany()
    * ```
    */
  get chii_prsn_comments(): Prisma.chii_prsn_commentsDelegate<GlobalReject>;

  /**
   * `prisma.chii_rev_history`: Exposes CRUD operations for the **chii_rev_history** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_rev_histories
    * const chii_rev_histories = await prisma.chii_rev_history.findMany()
    * ```
    */
  get chii_rev_history(): Prisma.chii_rev_historyDelegate<GlobalReject>;

  /**
   * `prisma.chii_rev_text`: Exposes CRUD operations for the **chii_rev_text** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_rev_texts
    * const chii_rev_texts = await prisma.chii_rev_text.findMany()
    * ```
    */
  get chii_rev_text(): Prisma.chii_rev_textDelegate<GlobalReject>;

  /**
   * `prisma.chii_subject_fields`: Exposes CRUD operations for the **chii_subject_fields** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_subject_fields
    * const chii_subject_fields = await prisma.chii_subject_fields.findMany()
    * ```
    */
  get chii_subject_fields(): Prisma.chii_subject_fieldsDelegate<GlobalReject>;

  /**
   * `prisma.chii_subject_interests`: Exposes CRUD operations for the **chii_subject_interests** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_subject_interests
    * const chii_subject_interests = await prisma.chii_subject_interests.findMany()
    * ```
    */
  get chii_subject_interests(): Prisma.chii_subject_interestsDelegate<GlobalReject>;

  /**
   * `prisma.chii_subject_posts`: Exposes CRUD operations for the **chii_subject_posts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_subject_posts
    * const chii_subject_posts = await prisma.chii_subject_posts.findMany()
    * ```
    */
  get chii_subject_posts(): Prisma.chii_subject_postsDelegate<GlobalReject>;

  /**
   * `prisma.chii_subject_relations`: Exposes CRUD operations for the **chii_subject_relations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_subject_relations
    * const chii_subject_relations = await prisma.chii_subject_relations.findMany()
    * ```
    */
  get chii_subject_relations(): Prisma.chii_subject_relationsDelegate<GlobalReject>;

  /**
   * `prisma.chii_subject_revisions`: Exposes CRUD operations for the **chii_subject_revisions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_subject_revisions
    * const chii_subject_revisions = await prisma.chii_subject_revisions.findMany()
    * ```
    */
  get chii_subject_revisions(): Prisma.chii_subject_revisionsDelegate<GlobalReject>;

  /**
   * `prisma.chii_subject_topics`: Exposes CRUD operations for the **chii_subject_topics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_subject_topics
    * const chii_subject_topics = await prisma.chii_subject_topics.findMany()
    * ```
    */
  get chii_subject_topics(): Prisma.chii_subject_topicsDelegate<GlobalReject>;

  /**
   * `prisma.chii_subjects`: Exposes CRUD operations for the **chii_subjects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_subjects
    * const chii_subjects = await prisma.chii_subjects.findMany()
    * ```
    */
  get chii_subjects(): Prisma.chii_subjectsDelegate<GlobalReject>;

  /**
   * `prisma.chii_timeline`: Exposes CRUD operations for the **chii_timeline** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_timelines
    * const chii_timelines = await prisma.chii_timeline.findMany()
    * ```
    */
  get chii_timeline(): Prisma.chii_timelineDelegate<GlobalReject>;

  /**
   * `prisma.chii_usergroup`: Exposes CRUD operations for the **chii_usergroup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chii_usergroups
    * const chii_usergroups = await prisma.chii_usergroup.findMany()
    * ```
    */
  get chii_usergroup(): Prisma.chii_usergroupDelegate<GlobalReject>;

  /**
   * `prisma.example`: Exposes CRUD operations for the **example** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Examples
    * const examples = await prisma.example.findMany()
    * ```
    */
  get example(): Prisma.exampleDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.7.1
   * Query Engine version: 272861e07ab64f234d3ffc4094e32bd61775599c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    chii_apps: 'chii_apps',
    chii_characters: 'chii_characters',
    chii_crt_cast_index: 'chii_crt_cast_index',
    chii_crt_comments: 'chii_crt_comments',
    chii_crt_subject_index: 'chii_crt_subject_index',
    chii_ep_comments: 'chii_ep_comments',
    chii_ep_revisions: 'chii_ep_revisions',
    chii_ep_status: 'chii_ep_status',
    chii_episodes: 'chii_episodes',
    chii_group_members: 'chii_group_members',
    chii_group_posts: 'chii_group_posts',
    chii_group_topics: 'chii_group_topics',
    chii_groups: 'chii_groups',
    chii_index: 'chii_index',
    chii_index_collects: 'chii_index_collects',
    chii_index_comments: 'chii_index_comments',
    chii_index_related: 'chii_index_related',
    chii_memberfields: 'chii_memberfields',
    chii_members: 'chii_members',
    chii_oauth_access_tokens: 'chii_oauth_access_tokens',
    chii_oauth_clients: 'chii_oauth_clients',
    chii_os_web_sessions: 'chii_os_web_sessions',
    chii_person_collects: 'chii_person_collects',
    chii_person_cs_index: 'chii_person_cs_index',
    chii_person_fields: 'chii_person_fields',
    chii_persons: 'chii_persons',
    chii_prsn_comments: 'chii_prsn_comments',
    chii_rev_history: 'chii_rev_history',
    chii_rev_text: 'chii_rev_text',
    chii_subject_fields: 'chii_subject_fields',
    chii_subject_interests: 'chii_subject_interests',
    chii_subject_posts: 'chii_subject_posts',
    chii_subject_relations: 'chii_subject_relations',
    chii_subject_revisions: 'chii_subject_revisions',
    chii_subject_topics: 'chii_subject_topics',
    chii_subjects: 'chii_subjects',
    chii_timeline: 'chii_timeline',
    chii_usergroup: 'chii_usergroup',
    example: 'example'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<PrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model chii_apps
   */


  export type AggregateChii_apps = {
    _count: Chii_appsCountAggregateOutputType | null
    _avg: Chii_appsAvgAggregateOutputType | null
    _sum: Chii_appsSumAggregateOutputType | null
    _min: Chii_appsMinAggregateOutputType | null
    _max: Chii_appsMaxAggregateOutputType | null
  }

  export type Chii_appsAvgAggregateOutputType = {
    app_id: number | null
    app_creator: number | null
    app_collects: number | null
    app_timestamp: number | null
    app_lasttouch: number | null
  }

  export type Chii_appsSumAggregateOutputType = {
    app_id: number | null
    app_creator: number | null
    app_collects: number | null
    app_timestamp: number | null
    app_lasttouch: number | null
  }

  export type Chii_appsMinAggregateOutputType = {
    app_id: number | null
    app_type: boolean | null
    app_creator: number | null
    app_name: string | null
    app_desc: string | null
    app_url: string | null
    app_collects: number | null
    app_status: boolean | null
    app_timestamp: number | null
    app_lasttouch: number | null
    app_ban: boolean | null
  }

  export type Chii_appsMaxAggregateOutputType = {
    app_id: number | null
    app_type: boolean | null
    app_creator: number | null
    app_name: string | null
    app_desc: string | null
    app_url: string | null
    app_collects: number | null
    app_status: boolean | null
    app_timestamp: number | null
    app_lasttouch: number | null
    app_ban: boolean | null
  }

  export type Chii_appsCountAggregateOutputType = {
    app_id: number
    app_type: number
    app_creator: number
    app_name: number
    app_desc: number
    app_url: number
    app_collects: number
    app_status: number
    app_timestamp: number
    app_lasttouch: number
    app_ban: number
    _all: number
  }


  export type Chii_appsAvgAggregateInputType = {
    app_id?: true
    app_creator?: true
    app_collects?: true
    app_timestamp?: true
    app_lasttouch?: true
  }

  export type Chii_appsSumAggregateInputType = {
    app_id?: true
    app_creator?: true
    app_collects?: true
    app_timestamp?: true
    app_lasttouch?: true
  }

  export type Chii_appsMinAggregateInputType = {
    app_id?: true
    app_type?: true
    app_creator?: true
    app_name?: true
    app_desc?: true
    app_url?: true
    app_collects?: true
    app_status?: true
    app_timestamp?: true
    app_lasttouch?: true
    app_ban?: true
  }

  export type Chii_appsMaxAggregateInputType = {
    app_id?: true
    app_type?: true
    app_creator?: true
    app_name?: true
    app_desc?: true
    app_url?: true
    app_collects?: true
    app_status?: true
    app_timestamp?: true
    app_lasttouch?: true
    app_ban?: true
  }

  export type Chii_appsCountAggregateInputType = {
    app_id?: true
    app_type?: true
    app_creator?: true
    app_name?: true
    app_desc?: true
    app_url?: true
    app_collects?: true
    app_status?: true
    app_timestamp?: true
    app_lasttouch?: true
    app_ban?: true
    _all?: true
  }

  export type Chii_appsAggregateArgs = {
    /**
     * Filter which chii_apps to aggregate.
     * 
    **/
    where?: chii_appsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_apps to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_appsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_appsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_apps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_apps.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_apps
    **/
    _count?: true | Chii_appsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_appsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_appsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_appsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_appsMaxAggregateInputType
  }

  export type GetChii_appsAggregateType<T extends Chii_appsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_apps]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_apps[P]>
      : GetScalarType<T[P], AggregateChii_apps[P]>
  }




  export type Chii_appsGroupByArgs = {
    where?: chii_appsWhereInput
    orderBy?: Enumerable<chii_appsOrderByWithAggregationInput>
    by: Array<Chii_appsScalarFieldEnum>
    having?: chii_appsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_appsCountAggregateInputType | true
    _avg?: Chii_appsAvgAggregateInputType
    _sum?: Chii_appsSumAggregateInputType
    _min?: Chii_appsMinAggregateInputType
    _max?: Chii_appsMaxAggregateInputType
  }


  export type Chii_appsGroupByOutputType = {
    app_id: number
    app_type: boolean
    app_creator: number
    app_name: string
    app_desc: string
    app_url: string
    app_collects: number
    app_status: boolean
    app_timestamp: number
    app_lasttouch: number
    app_ban: boolean
    _count: Chii_appsCountAggregateOutputType | null
    _avg: Chii_appsAvgAggregateOutputType | null
    _sum: Chii_appsSumAggregateOutputType | null
    _min: Chii_appsMinAggregateOutputType | null
    _max: Chii_appsMaxAggregateOutputType | null
  }

  type GetChii_appsGroupByPayload<T extends Chii_appsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_appsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_appsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_appsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_appsGroupByOutputType[P]>
        }
      >
    >


  export type chii_appsSelect = {
    app_id?: boolean
    app_type?: boolean
    app_creator?: boolean
    app_name?: boolean
    app_desc?: boolean
    app_url?: boolean
    app_collects?: boolean
    app_status?: boolean
    app_timestamp?: boolean
    app_lasttouch?: boolean
    app_ban?: boolean
  }


  export type chii_appsGetPayload<S extends boolean | null | undefined | chii_appsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_apps :
    S extends undefined ? never :
    S extends { include: any } & (chii_appsArgs | chii_appsFindManyArgs)
    ? chii_apps 
    : S extends { select: any } & (chii_appsArgs | chii_appsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_apps ? chii_apps[P] : never
  } 
      : chii_apps


  type chii_appsCountArgs = Merge<
    Omit<chii_appsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_appsCountAggregateInputType | true
    }
  >

  export interface chii_appsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_apps that matches the filter.
     * @param {chii_appsFindUniqueArgs} args - Arguments to find a Chii_apps
     * @example
     * // Get one Chii_apps
     * const chii_apps = await prisma.chii_apps.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_appsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_appsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_apps'> extends True ? Prisma__chii_appsClient<chii_appsGetPayload<T>> : Prisma__chii_appsClient<chii_appsGetPayload<T> | null, null>

    /**
     * Find one Chii_apps that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_appsFindUniqueOrThrowArgs} args - Arguments to find a Chii_apps
     * @example
     * // Get one Chii_apps
     * const chii_apps = await prisma.chii_apps.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_appsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_appsFindUniqueOrThrowArgs>
    ): Prisma__chii_appsClient<chii_appsGetPayload<T>>

    /**
     * Find the first Chii_apps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_appsFindFirstArgs} args - Arguments to find a Chii_apps
     * @example
     * // Get one Chii_apps
     * const chii_apps = await prisma.chii_apps.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_appsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_appsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_apps'> extends True ? Prisma__chii_appsClient<chii_appsGetPayload<T>> : Prisma__chii_appsClient<chii_appsGetPayload<T> | null, null>

    /**
     * Find the first Chii_apps that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_appsFindFirstOrThrowArgs} args - Arguments to find a Chii_apps
     * @example
     * // Get one Chii_apps
     * const chii_apps = await prisma.chii_apps.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_appsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_appsFindFirstOrThrowArgs>
    ): Prisma__chii_appsClient<chii_appsGetPayload<T>>

    /**
     * Find zero or more Chii_apps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_appsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_apps
     * const chii_apps = await prisma.chii_apps.findMany()
     * 
     * // Get first 10 Chii_apps
     * const chii_apps = await prisma.chii_apps.findMany({ take: 10 })
     * 
     * // Only select the `app_id`
     * const chii_appsWithApp_idOnly = await prisma.chii_apps.findMany({ select: { app_id: true } })
     * 
    **/
    findMany<T extends chii_appsFindManyArgs>(
      args?: SelectSubset<T, chii_appsFindManyArgs>
    ): PrismaPromise<Array<chii_appsGetPayload<T>>>

    /**
     * Create a Chii_apps.
     * @param {chii_appsCreateArgs} args - Arguments to create a Chii_apps.
     * @example
     * // Create one Chii_apps
     * const Chii_apps = await prisma.chii_apps.create({
     *   data: {
     *     // ... data to create a Chii_apps
     *   }
     * })
     * 
    **/
    create<T extends chii_appsCreateArgs>(
      args: SelectSubset<T, chii_appsCreateArgs>
    ): Prisma__chii_appsClient<chii_appsGetPayload<T>>

    /**
     * Create many Chii_apps.
     *     @param {chii_appsCreateManyArgs} args - Arguments to create many Chii_apps.
     *     @example
     *     // Create many Chii_apps
     *     const chii_apps = await prisma.chii_apps.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_appsCreateManyArgs>(
      args?: SelectSubset<T, chii_appsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_apps.
     * @param {chii_appsDeleteArgs} args - Arguments to delete one Chii_apps.
     * @example
     * // Delete one Chii_apps
     * const Chii_apps = await prisma.chii_apps.delete({
     *   where: {
     *     // ... filter to delete one Chii_apps
     *   }
     * })
     * 
    **/
    delete<T extends chii_appsDeleteArgs>(
      args: SelectSubset<T, chii_appsDeleteArgs>
    ): Prisma__chii_appsClient<chii_appsGetPayload<T>>

    /**
     * Update one Chii_apps.
     * @param {chii_appsUpdateArgs} args - Arguments to update one Chii_apps.
     * @example
     * // Update one Chii_apps
     * const chii_apps = await prisma.chii_apps.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_appsUpdateArgs>(
      args: SelectSubset<T, chii_appsUpdateArgs>
    ): Prisma__chii_appsClient<chii_appsGetPayload<T>>

    /**
     * Delete zero or more Chii_apps.
     * @param {chii_appsDeleteManyArgs} args - Arguments to filter Chii_apps to delete.
     * @example
     * // Delete a few Chii_apps
     * const { count } = await prisma.chii_apps.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_appsDeleteManyArgs>(
      args?: SelectSubset<T, chii_appsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_apps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_appsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_apps
     * const chii_apps = await prisma.chii_apps.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_appsUpdateManyArgs>(
      args: SelectSubset<T, chii_appsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_apps.
     * @param {chii_appsUpsertArgs} args - Arguments to update or create a Chii_apps.
     * @example
     * // Update or create a Chii_apps
     * const chii_apps = await prisma.chii_apps.upsert({
     *   create: {
     *     // ... data to create a Chii_apps
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_apps we want to update
     *   }
     * })
    **/
    upsert<T extends chii_appsUpsertArgs>(
      args: SelectSubset<T, chii_appsUpsertArgs>
    ): Prisma__chii_appsClient<chii_appsGetPayload<T>>

    /**
     * Count the number of Chii_apps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_appsCountArgs} args - Arguments to filter Chii_apps to count.
     * @example
     * // Count the number of Chii_apps
     * const count = await prisma.chii_apps.count({
     *   where: {
     *     // ... the filter for the Chii_apps we want to count
     *   }
     * })
    **/
    count<T extends chii_appsCountArgs>(
      args?: Subset<T, chii_appsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_appsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_apps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_appsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_appsAggregateArgs>(args: Subset<T, Chii_appsAggregateArgs>): PrismaPromise<GetChii_appsAggregateType<T>>

    /**
     * Group by Chii_apps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_appsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_appsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_appsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_appsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_appsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_appsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_apps.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_appsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_apps base type for findUnique actions
   */
  export type chii_appsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_apps
     * 
    **/
    select?: chii_appsSelect | null
    /**
     * Filter, which chii_apps to fetch.
     * 
    **/
    where: chii_appsWhereUniqueInput
  }

  /**
   * chii_apps: findUnique
   */
  export interface chii_appsFindUniqueArgs extends chii_appsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_apps findUniqueOrThrow
   */
  export type chii_appsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_apps
     * 
    **/
    select?: chii_appsSelect | null
    /**
     * Filter, which chii_apps to fetch.
     * 
    **/
    where: chii_appsWhereUniqueInput
  }


  /**
   * chii_apps base type for findFirst actions
   */
  export type chii_appsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_apps
     * 
    **/
    select?: chii_appsSelect | null
    /**
     * Filter, which chii_apps to fetch.
     * 
    **/
    where?: chii_appsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_apps to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_appsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_apps.
     * 
    **/
    cursor?: chii_appsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_apps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_apps.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_apps.
     * 
    **/
    distinct?: Enumerable<Chii_appsScalarFieldEnum>
  }

  /**
   * chii_apps: findFirst
   */
  export interface chii_appsFindFirstArgs extends chii_appsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_apps findFirstOrThrow
   */
  export type chii_appsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_apps
     * 
    **/
    select?: chii_appsSelect | null
    /**
     * Filter, which chii_apps to fetch.
     * 
    **/
    where?: chii_appsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_apps to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_appsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_apps.
     * 
    **/
    cursor?: chii_appsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_apps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_apps.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_apps.
     * 
    **/
    distinct?: Enumerable<Chii_appsScalarFieldEnum>
  }


  /**
   * chii_apps findMany
   */
  export type chii_appsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_apps
     * 
    **/
    select?: chii_appsSelect | null
    /**
     * Filter, which chii_apps to fetch.
     * 
    **/
    where?: chii_appsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_apps to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_appsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_apps.
     * 
    **/
    cursor?: chii_appsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_apps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_apps.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_appsScalarFieldEnum>
  }


  /**
   * chii_apps create
   */
  export type chii_appsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_apps
     * 
    **/
    select?: chii_appsSelect | null
    /**
     * The data needed to create a chii_apps.
     * 
    **/
    data: XOR<chii_appsCreateInput, chii_appsUncheckedCreateInput>
  }


  /**
   * chii_apps createMany
   */
  export type chii_appsCreateManyArgs = {
    /**
     * The data used to create many chii_apps.
     * 
    **/
    data: Enumerable<chii_appsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_apps update
   */
  export type chii_appsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_apps
     * 
    **/
    select?: chii_appsSelect | null
    /**
     * The data needed to update a chii_apps.
     * 
    **/
    data: XOR<chii_appsUpdateInput, chii_appsUncheckedUpdateInput>
    /**
     * Choose, which chii_apps to update.
     * 
    **/
    where: chii_appsWhereUniqueInput
  }


  /**
   * chii_apps updateMany
   */
  export type chii_appsUpdateManyArgs = {
    /**
     * The data used to update chii_apps.
     * 
    **/
    data: XOR<chii_appsUpdateManyMutationInput, chii_appsUncheckedUpdateManyInput>
    /**
     * Filter which chii_apps to update
     * 
    **/
    where?: chii_appsWhereInput
  }


  /**
   * chii_apps upsert
   */
  export type chii_appsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_apps
     * 
    **/
    select?: chii_appsSelect | null
    /**
     * The filter to search for the chii_apps to update in case it exists.
     * 
    **/
    where: chii_appsWhereUniqueInput
    /**
     * In case the chii_apps found by the `where` argument doesn't exist, create a new chii_apps with this data.
     * 
    **/
    create: XOR<chii_appsCreateInput, chii_appsUncheckedCreateInput>
    /**
     * In case the chii_apps was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_appsUpdateInput, chii_appsUncheckedUpdateInput>
  }


  /**
   * chii_apps delete
   */
  export type chii_appsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_apps
     * 
    **/
    select?: chii_appsSelect | null
    /**
     * Filter which chii_apps to delete.
     * 
    **/
    where: chii_appsWhereUniqueInput
  }


  /**
   * chii_apps deleteMany
   */
  export type chii_appsDeleteManyArgs = {
    /**
     * Filter which chii_apps to delete
     * 
    **/
    where?: chii_appsWhereInput
  }


  /**
   * chii_apps without action
   */
  export type chii_appsArgs = {
    /**
     * Select specific fields to fetch from the chii_apps
     * 
    **/
    select?: chii_appsSelect | null
  }



  /**
   * Model chii_characters
   */


  export type AggregateChii_characters = {
    _count: Chii_charactersCountAggregateOutputType | null
    _avg: Chii_charactersAvgAggregateOutputType | null
    _sum: Chii_charactersSumAggregateOutputType | null
    _min: Chii_charactersMinAggregateOutputType | null
    _max: Chii_charactersMaxAggregateOutputType | null
  }

  export type Chii_charactersAvgAggregateOutputType = {
    crt_id: number | null
    crt_role: number | null
    crt_comment: number | null
    crt_collects: number | null
    crt_dateline: number | null
    crt_lastpost: number | null
    crt_lock: number | null
    crt_anidb_id: number | null
    crt_ban: number | null
    crt_redirect: number | null
  }

  export type Chii_charactersSumAggregateOutputType = {
    crt_id: number | null
    crt_role: number | null
    crt_comment: number | null
    crt_collects: number | null
    crt_dateline: number | null
    crt_lastpost: number | null
    crt_lock: number | null
    crt_anidb_id: number | null
    crt_ban: number | null
    crt_redirect: number | null
  }

  export type Chii_charactersMinAggregateOutputType = {
    crt_id: number | null
    crt_name: string | null
    crt_role: number | null
    crt_infobox: string | null
    crt_summary: string | null
    crt_img: string | null
    crt_comment: number | null
    crt_collects: number | null
    crt_dateline: number | null
    crt_lastpost: number | null
    crt_lock: number | null
    crt_img_anidb: string | null
    crt_anidb_id: number | null
    crt_ban: number | null
    crt_redirect: number | null
    crt_nsfw: boolean | null
  }

  export type Chii_charactersMaxAggregateOutputType = {
    crt_id: number | null
    crt_name: string | null
    crt_role: number | null
    crt_infobox: string | null
    crt_summary: string | null
    crt_img: string | null
    crt_comment: number | null
    crt_collects: number | null
    crt_dateline: number | null
    crt_lastpost: number | null
    crt_lock: number | null
    crt_img_anidb: string | null
    crt_anidb_id: number | null
    crt_ban: number | null
    crt_redirect: number | null
    crt_nsfw: boolean | null
  }

  export type Chii_charactersCountAggregateOutputType = {
    crt_id: number
    crt_name: number
    crt_role: number
    crt_infobox: number
    crt_summary: number
    crt_img: number
    crt_comment: number
    crt_collects: number
    crt_dateline: number
    crt_lastpost: number
    crt_lock: number
    crt_img_anidb: number
    crt_anidb_id: number
    crt_ban: number
    crt_redirect: number
    crt_nsfw: number
    _all: number
  }


  export type Chii_charactersAvgAggregateInputType = {
    crt_id?: true
    crt_role?: true
    crt_comment?: true
    crt_collects?: true
    crt_dateline?: true
    crt_lastpost?: true
    crt_lock?: true
    crt_anidb_id?: true
    crt_ban?: true
    crt_redirect?: true
  }

  export type Chii_charactersSumAggregateInputType = {
    crt_id?: true
    crt_role?: true
    crt_comment?: true
    crt_collects?: true
    crt_dateline?: true
    crt_lastpost?: true
    crt_lock?: true
    crt_anidb_id?: true
    crt_ban?: true
    crt_redirect?: true
  }

  export type Chii_charactersMinAggregateInputType = {
    crt_id?: true
    crt_name?: true
    crt_role?: true
    crt_infobox?: true
    crt_summary?: true
    crt_img?: true
    crt_comment?: true
    crt_collects?: true
    crt_dateline?: true
    crt_lastpost?: true
    crt_lock?: true
    crt_img_anidb?: true
    crt_anidb_id?: true
    crt_ban?: true
    crt_redirect?: true
    crt_nsfw?: true
  }

  export type Chii_charactersMaxAggregateInputType = {
    crt_id?: true
    crt_name?: true
    crt_role?: true
    crt_infobox?: true
    crt_summary?: true
    crt_img?: true
    crt_comment?: true
    crt_collects?: true
    crt_dateline?: true
    crt_lastpost?: true
    crt_lock?: true
    crt_img_anidb?: true
    crt_anidb_id?: true
    crt_ban?: true
    crt_redirect?: true
    crt_nsfw?: true
  }

  export type Chii_charactersCountAggregateInputType = {
    crt_id?: true
    crt_name?: true
    crt_role?: true
    crt_infobox?: true
    crt_summary?: true
    crt_img?: true
    crt_comment?: true
    crt_collects?: true
    crt_dateline?: true
    crt_lastpost?: true
    crt_lock?: true
    crt_img_anidb?: true
    crt_anidb_id?: true
    crt_ban?: true
    crt_redirect?: true
    crt_nsfw?: true
    _all?: true
  }

  export type Chii_charactersAggregateArgs = {
    /**
     * Filter which chii_characters to aggregate.
     * 
    **/
    where?: chii_charactersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_characters to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_charactersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_charactersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_characters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_characters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_characters
    **/
    _count?: true | Chii_charactersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_charactersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_charactersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_charactersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_charactersMaxAggregateInputType
  }

  export type GetChii_charactersAggregateType<T extends Chii_charactersAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_characters]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_characters[P]>
      : GetScalarType<T[P], AggregateChii_characters[P]>
  }




  export type Chii_charactersGroupByArgs = {
    where?: chii_charactersWhereInput
    orderBy?: Enumerable<chii_charactersOrderByWithAggregationInput>
    by: Array<Chii_charactersScalarFieldEnum>
    having?: chii_charactersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_charactersCountAggregateInputType | true
    _avg?: Chii_charactersAvgAggregateInputType
    _sum?: Chii_charactersSumAggregateInputType
    _min?: Chii_charactersMinAggregateInputType
    _max?: Chii_charactersMaxAggregateInputType
  }


  export type Chii_charactersGroupByOutputType = {
    crt_id: number
    crt_name: string
    crt_role: number
    crt_infobox: string
    crt_summary: string
    crt_img: string
    crt_comment: number
    crt_collects: number
    crt_dateline: number
    crt_lastpost: number
    crt_lock: number
    crt_img_anidb: string
    crt_anidb_id: number
    crt_ban: number
    crt_redirect: number
    crt_nsfw: boolean
    _count: Chii_charactersCountAggregateOutputType | null
    _avg: Chii_charactersAvgAggregateOutputType | null
    _sum: Chii_charactersSumAggregateOutputType | null
    _min: Chii_charactersMinAggregateOutputType | null
    _max: Chii_charactersMaxAggregateOutputType | null
  }

  type GetChii_charactersGroupByPayload<T extends Chii_charactersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_charactersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_charactersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_charactersGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_charactersGroupByOutputType[P]>
        }
      >
    >


  export type chii_charactersSelect = {
    crt_id?: boolean
    crt_name?: boolean
    crt_role?: boolean
    crt_infobox?: boolean
    crt_summary?: boolean
    crt_img?: boolean
    crt_comment?: boolean
    crt_collects?: boolean
    crt_dateline?: boolean
    crt_lastpost?: boolean
    crt_lock?: boolean
    crt_img_anidb?: boolean
    crt_anidb_id?: boolean
    crt_ban?: boolean
    crt_redirect?: boolean
    crt_nsfw?: boolean
  }


  export type chii_charactersGetPayload<S extends boolean | null | undefined | chii_charactersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_characters :
    S extends undefined ? never :
    S extends { include: any } & (chii_charactersArgs | chii_charactersFindManyArgs)
    ? chii_characters 
    : S extends { select: any } & (chii_charactersArgs | chii_charactersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_characters ? chii_characters[P] : never
  } 
      : chii_characters


  type chii_charactersCountArgs = Merge<
    Omit<chii_charactersFindManyArgs, 'select' | 'include'> & {
      select?: Chii_charactersCountAggregateInputType | true
    }
  >

  export interface chii_charactersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_characters that matches the filter.
     * @param {chii_charactersFindUniqueArgs} args - Arguments to find a Chii_characters
     * @example
     * // Get one Chii_characters
     * const chii_characters = await prisma.chii_characters.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_charactersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_charactersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_characters'> extends True ? Prisma__chii_charactersClient<chii_charactersGetPayload<T>> : Prisma__chii_charactersClient<chii_charactersGetPayload<T> | null, null>

    /**
     * Find one Chii_characters that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_charactersFindUniqueOrThrowArgs} args - Arguments to find a Chii_characters
     * @example
     * // Get one Chii_characters
     * const chii_characters = await prisma.chii_characters.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_charactersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_charactersFindUniqueOrThrowArgs>
    ): Prisma__chii_charactersClient<chii_charactersGetPayload<T>>

    /**
     * Find the first Chii_characters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_charactersFindFirstArgs} args - Arguments to find a Chii_characters
     * @example
     * // Get one Chii_characters
     * const chii_characters = await prisma.chii_characters.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_charactersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_charactersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_characters'> extends True ? Prisma__chii_charactersClient<chii_charactersGetPayload<T>> : Prisma__chii_charactersClient<chii_charactersGetPayload<T> | null, null>

    /**
     * Find the first Chii_characters that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_charactersFindFirstOrThrowArgs} args - Arguments to find a Chii_characters
     * @example
     * // Get one Chii_characters
     * const chii_characters = await prisma.chii_characters.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_charactersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_charactersFindFirstOrThrowArgs>
    ): Prisma__chii_charactersClient<chii_charactersGetPayload<T>>

    /**
     * Find zero or more Chii_characters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_charactersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_characters
     * const chii_characters = await prisma.chii_characters.findMany()
     * 
     * // Get first 10 Chii_characters
     * const chii_characters = await prisma.chii_characters.findMany({ take: 10 })
     * 
     * // Only select the `crt_id`
     * const chii_charactersWithCrt_idOnly = await prisma.chii_characters.findMany({ select: { crt_id: true } })
     * 
    **/
    findMany<T extends chii_charactersFindManyArgs>(
      args?: SelectSubset<T, chii_charactersFindManyArgs>
    ): PrismaPromise<Array<chii_charactersGetPayload<T>>>

    /**
     * Create a Chii_characters.
     * @param {chii_charactersCreateArgs} args - Arguments to create a Chii_characters.
     * @example
     * // Create one Chii_characters
     * const Chii_characters = await prisma.chii_characters.create({
     *   data: {
     *     // ... data to create a Chii_characters
     *   }
     * })
     * 
    **/
    create<T extends chii_charactersCreateArgs>(
      args: SelectSubset<T, chii_charactersCreateArgs>
    ): Prisma__chii_charactersClient<chii_charactersGetPayload<T>>

    /**
     * Create many Chii_characters.
     *     @param {chii_charactersCreateManyArgs} args - Arguments to create many Chii_characters.
     *     @example
     *     // Create many Chii_characters
     *     const chii_characters = await prisma.chii_characters.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_charactersCreateManyArgs>(
      args?: SelectSubset<T, chii_charactersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_characters.
     * @param {chii_charactersDeleteArgs} args - Arguments to delete one Chii_characters.
     * @example
     * // Delete one Chii_characters
     * const Chii_characters = await prisma.chii_characters.delete({
     *   where: {
     *     // ... filter to delete one Chii_characters
     *   }
     * })
     * 
    **/
    delete<T extends chii_charactersDeleteArgs>(
      args: SelectSubset<T, chii_charactersDeleteArgs>
    ): Prisma__chii_charactersClient<chii_charactersGetPayload<T>>

    /**
     * Update one Chii_characters.
     * @param {chii_charactersUpdateArgs} args - Arguments to update one Chii_characters.
     * @example
     * // Update one Chii_characters
     * const chii_characters = await prisma.chii_characters.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_charactersUpdateArgs>(
      args: SelectSubset<T, chii_charactersUpdateArgs>
    ): Prisma__chii_charactersClient<chii_charactersGetPayload<T>>

    /**
     * Delete zero or more Chii_characters.
     * @param {chii_charactersDeleteManyArgs} args - Arguments to filter Chii_characters to delete.
     * @example
     * // Delete a few Chii_characters
     * const { count } = await prisma.chii_characters.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_charactersDeleteManyArgs>(
      args?: SelectSubset<T, chii_charactersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_characters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_charactersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_characters
     * const chii_characters = await prisma.chii_characters.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_charactersUpdateManyArgs>(
      args: SelectSubset<T, chii_charactersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_characters.
     * @param {chii_charactersUpsertArgs} args - Arguments to update or create a Chii_characters.
     * @example
     * // Update or create a Chii_characters
     * const chii_characters = await prisma.chii_characters.upsert({
     *   create: {
     *     // ... data to create a Chii_characters
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_characters we want to update
     *   }
     * })
    **/
    upsert<T extends chii_charactersUpsertArgs>(
      args: SelectSubset<T, chii_charactersUpsertArgs>
    ): Prisma__chii_charactersClient<chii_charactersGetPayload<T>>

    /**
     * Count the number of Chii_characters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_charactersCountArgs} args - Arguments to filter Chii_characters to count.
     * @example
     * // Count the number of Chii_characters
     * const count = await prisma.chii_characters.count({
     *   where: {
     *     // ... the filter for the Chii_characters we want to count
     *   }
     * })
    **/
    count<T extends chii_charactersCountArgs>(
      args?: Subset<T, chii_charactersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_charactersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_characters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_charactersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_charactersAggregateArgs>(args: Subset<T, Chii_charactersAggregateArgs>): PrismaPromise<GetChii_charactersAggregateType<T>>

    /**
     * Group by Chii_characters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_charactersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_charactersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_charactersGroupByArgs['orderBy'] }
        : { orderBy?: Chii_charactersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_charactersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_charactersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_characters.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_charactersClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_characters base type for findUnique actions
   */
  export type chii_charactersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_characters
     * 
    **/
    select?: chii_charactersSelect | null
    /**
     * Filter, which chii_characters to fetch.
     * 
    **/
    where: chii_charactersWhereUniqueInput
  }

  /**
   * chii_characters: findUnique
   */
  export interface chii_charactersFindUniqueArgs extends chii_charactersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_characters findUniqueOrThrow
   */
  export type chii_charactersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_characters
     * 
    **/
    select?: chii_charactersSelect | null
    /**
     * Filter, which chii_characters to fetch.
     * 
    **/
    where: chii_charactersWhereUniqueInput
  }


  /**
   * chii_characters base type for findFirst actions
   */
  export type chii_charactersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_characters
     * 
    **/
    select?: chii_charactersSelect | null
    /**
     * Filter, which chii_characters to fetch.
     * 
    **/
    where?: chii_charactersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_characters to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_charactersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_characters.
     * 
    **/
    cursor?: chii_charactersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_characters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_characters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_characters.
     * 
    **/
    distinct?: Enumerable<Chii_charactersScalarFieldEnum>
  }

  /**
   * chii_characters: findFirst
   */
  export interface chii_charactersFindFirstArgs extends chii_charactersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_characters findFirstOrThrow
   */
  export type chii_charactersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_characters
     * 
    **/
    select?: chii_charactersSelect | null
    /**
     * Filter, which chii_characters to fetch.
     * 
    **/
    where?: chii_charactersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_characters to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_charactersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_characters.
     * 
    **/
    cursor?: chii_charactersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_characters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_characters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_characters.
     * 
    **/
    distinct?: Enumerable<Chii_charactersScalarFieldEnum>
  }


  /**
   * chii_characters findMany
   */
  export type chii_charactersFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_characters
     * 
    **/
    select?: chii_charactersSelect | null
    /**
     * Filter, which chii_characters to fetch.
     * 
    **/
    where?: chii_charactersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_characters to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_charactersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_characters.
     * 
    **/
    cursor?: chii_charactersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_characters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_characters.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_charactersScalarFieldEnum>
  }


  /**
   * chii_characters create
   */
  export type chii_charactersCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_characters
     * 
    **/
    select?: chii_charactersSelect | null
    /**
     * The data needed to create a chii_characters.
     * 
    **/
    data: XOR<chii_charactersCreateInput, chii_charactersUncheckedCreateInput>
  }


  /**
   * chii_characters createMany
   */
  export type chii_charactersCreateManyArgs = {
    /**
     * The data used to create many chii_characters.
     * 
    **/
    data: Enumerable<chii_charactersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_characters update
   */
  export type chii_charactersUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_characters
     * 
    **/
    select?: chii_charactersSelect | null
    /**
     * The data needed to update a chii_characters.
     * 
    **/
    data: XOR<chii_charactersUpdateInput, chii_charactersUncheckedUpdateInput>
    /**
     * Choose, which chii_characters to update.
     * 
    **/
    where: chii_charactersWhereUniqueInput
  }


  /**
   * chii_characters updateMany
   */
  export type chii_charactersUpdateManyArgs = {
    /**
     * The data used to update chii_characters.
     * 
    **/
    data: XOR<chii_charactersUpdateManyMutationInput, chii_charactersUncheckedUpdateManyInput>
    /**
     * Filter which chii_characters to update
     * 
    **/
    where?: chii_charactersWhereInput
  }


  /**
   * chii_characters upsert
   */
  export type chii_charactersUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_characters
     * 
    **/
    select?: chii_charactersSelect | null
    /**
     * The filter to search for the chii_characters to update in case it exists.
     * 
    **/
    where: chii_charactersWhereUniqueInput
    /**
     * In case the chii_characters found by the `where` argument doesn't exist, create a new chii_characters with this data.
     * 
    **/
    create: XOR<chii_charactersCreateInput, chii_charactersUncheckedCreateInput>
    /**
     * In case the chii_characters was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_charactersUpdateInput, chii_charactersUncheckedUpdateInput>
  }


  /**
   * chii_characters delete
   */
  export type chii_charactersDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_characters
     * 
    **/
    select?: chii_charactersSelect | null
    /**
     * Filter which chii_characters to delete.
     * 
    **/
    where: chii_charactersWhereUniqueInput
  }


  /**
   * chii_characters deleteMany
   */
  export type chii_charactersDeleteManyArgs = {
    /**
     * Filter which chii_characters to delete
     * 
    **/
    where?: chii_charactersWhereInput
  }


  /**
   * chii_characters without action
   */
  export type chii_charactersArgs = {
    /**
     * Select specific fields to fetch from the chii_characters
     * 
    **/
    select?: chii_charactersSelect | null
  }



  /**
   * Model chii_crt_cast_index
   */


  export type AggregateChii_crt_cast_index = {
    _count: Chii_crt_cast_indexCountAggregateOutputType | null
    _avg: Chii_crt_cast_indexAvgAggregateOutputType | null
    _sum: Chii_crt_cast_indexSumAggregateOutputType | null
    _min: Chii_crt_cast_indexMinAggregateOutputType | null
    _max: Chii_crt_cast_indexMaxAggregateOutputType | null
  }

  export type Chii_crt_cast_indexAvgAggregateOutputType = {
    crt_id: number | null
    prsn_id: number | null
    subject_id: number | null
    subject_type_id: number | null
  }

  export type Chii_crt_cast_indexSumAggregateOutputType = {
    crt_id: number | null
    prsn_id: number | null
    subject_id: number | null
    subject_type_id: number | null
  }

  export type Chii_crt_cast_indexMinAggregateOutputType = {
    crt_id: number | null
    prsn_id: number | null
    subject_id: number | null
    subject_type_id: number | null
    summary: string | null
  }

  export type Chii_crt_cast_indexMaxAggregateOutputType = {
    crt_id: number | null
    prsn_id: number | null
    subject_id: number | null
    subject_type_id: number | null
    summary: string | null
  }

  export type Chii_crt_cast_indexCountAggregateOutputType = {
    crt_id: number
    prsn_id: number
    subject_id: number
    subject_type_id: number
    summary: number
    _all: number
  }


  export type Chii_crt_cast_indexAvgAggregateInputType = {
    crt_id?: true
    prsn_id?: true
    subject_id?: true
    subject_type_id?: true
  }

  export type Chii_crt_cast_indexSumAggregateInputType = {
    crt_id?: true
    prsn_id?: true
    subject_id?: true
    subject_type_id?: true
  }

  export type Chii_crt_cast_indexMinAggregateInputType = {
    crt_id?: true
    prsn_id?: true
    subject_id?: true
    subject_type_id?: true
    summary?: true
  }

  export type Chii_crt_cast_indexMaxAggregateInputType = {
    crt_id?: true
    prsn_id?: true
    subject_id?: true
    subject_type_id?: true
    summary?: true
  }

  export type Chii_crt_cast_indexCountAggregateInputType = {
    crt_id?: true
    prsn_id?: true
    subject_id?: true
    subject_type_id?: true
    summary?: true
    _all?: true
  }

  export type Chii_crt_cast_indexAggregateArgs = {
    /**
     * Filter which chii_crt_cast_index to aggregate.
     * 
    **/
    where?: chii_crt_cast_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_crt_cast_indices to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_crt_cast_indexOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_crt_cast_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_crt_cast_indices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_crt_cast_indices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_crt_cast_indices
    **/
    _count?: true | Chii_crt_cast_indexCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_crt_cast_indexAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_crt_cast_indexSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_crt_cast_indexMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_crt_cast_indexMaxAggregateInputType
  }

  export type GetChii_crt_cast_indexAggregateType<T extends Chii_crt_cast_indexAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_crt_cast_index]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_crt_cast_index[P]>
      : GetScalarType<T[P], AggregateChii_crt_cast_index[P]>
  }




  export type Chii_crt_cast_indexGroupByArgs = {
    where?: chii_crt_cast_indexWhereInput
    orderBy?: Enumerable<chii_crt_cast_indexOrderByWithAggregationInput>
    by: Array<Chii_crt_cast_indexScalarFieldEnum>
    having?: chii_crt_cast_indexScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_crt_cast_indexCountAggregateInputType | true
    _avg?: Chii_crt_cast_indexAvgAggregateInputType
    _sum?: Chii_crt_cast_indexSumAggregateInputType
    _min?: Chii_crt_cast_indexMinAggregateInputType
    _max?: Chii_crt_cast_indexMaxAggregateInputType
  }


  export type Chii_crt_cast_indexGroupByOutputType = {
    crt_id: number
    prsn_id: number
    subject_id: number
    subject_type_id: number
    summary: string
    _count: Chii_crt_cast_indexCountAggregateOutputType | null
    _avg: Chii_crt_cast_indexAvgAggregateOutputType | null
    _sum: Chii_crt_cast_indexSumAggregateOutputType | null
    _min: Chii_crt_cast_indexMinAggregateOutputType | null
    _max: Chii_crt_cast_indexMaxAggregateOutputType | null
  }

  type GetChii_crt_cast_indexGroupByPayload<T extends Chii_crt_cast_indexGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_crt_cast_indexGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_crt_cast_indexGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_crt_cast_indexGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_crt_cast_indexGroupByOutputType[P]>
        }
      >
    >


  export type chii_crt_cast_indexSelect = {
    crt_id?: boolean
    prsn_id?: boolean
    subject_id?: boolean
    subject_type_id?: boolean
    summary?: boolean
  }


  export type chii_crt_cast_indexGetPayload<S extends boolean | null | undefined | chii_crt_cast_indexArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_crt_cast_index :
    S extends undefined ? never :
    S extends { include: any } & (chii_crt_cast_indexArgs | chii_crt_cast_indexFindManyArgs)
    ? chii_crt_cast_index 
    : S extends { select: any } & (chii_crt_cast_indexArgs | chii_crt_cast_indexFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_crt_cast_index ? chii_crt_cast_index[P] : never
  } 
      : chii_crt_cast_index


  type chii_crt_cast_indexCountArgs = Merge<
    Omit<chii_crt_cast_indexFindManyArgs, 'select' | 'include'> & {
      select?: Chii_crt_cast_indexCountAggregateInputType | true
    }
  >

  export interface chii_crt_cast_indexDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_crt_cast_index that matches the filter.
     * @param {chii_crt_cast_indexFindUniqueArgs} args - Arguments to find a Chii_crt_cast_index
     * @example
     * // Get one Chii_crt_cast_index
     * const chii_crt_cast_index = await prisma.chii_crt_cast_index.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_crt_cast_indexFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_crt_cast_indexFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_crt_cast_index'> extends True ? Prisma__chii_crt_cast_indexClient<chii_crt_cast_indexGetPayload<T>> : Prisma__chii_crt_cast_indexClient<chii_crt_cast_indexGetPayload<T> | null, null>

    /**
     * Find one Chii_crt_cast_index that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_crt_cast_indexFindUniqueOrThrowArgs} args - Arguments to find a Chii_crt_cast_index
     * @example
     * // Get one Chii_crt_cast_index
     * const chii_crt_cast_index = await prisma.chii_crt_cast_index.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_crt_cast_indexFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_crt_cast_indexFindUniqueOrThrowArgs>
    ): Prisma__chii_crt_cast_indexClient<chii_crt_cast_indexGetPayload<T>>

    /**
     * Find the first Chii_crt_cast_index that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_crt_cast_indexFindFirstArgs} args - Arguments to find a Chii_crt_cast_index
     * @example
     * // Get one Chii_crt_cast_index
     * const chii_crt_cast_index = await prisma.chii_crt_cast_index.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_crt_cast_indexFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_crt_cast_indexFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_crt_cast_index'> extends True ? Prisma__chii_crt_cast_indexClient<chii_crt_cast_indexGetPayload<T>> : Prisma__chii_crt_cast_indexClient<chii_crt_cast_indexGetPayload<T> | null, null>

    /**
     * Find the first Chii_crt_cast_index that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_crt_cast_indexFindFirstOrThrowArgs} args - Arguments to find a Chii_crt_cast_index
     * @example
     * // Get one Chii_crt_cast_index
     * const chii_crt_cast_index = await prisma.chii_crt_cast_index.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_crt_cast_indexFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_crt_cast_indexFindFirstOrThrowArgs>
    ): Prisma__chii_crt_cast_indexClient<chii_crt_cast_indexGetPayload<T>>

    /**
     * Find zero or more Chii_crt_cast_indices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_crt_cast_indexFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_crt_cast_indices
     * const chii_crt_cast_indices = await prisma.chii_crt_cast_index.findMany()
     * 
     * // Get first 10 Chii_crt_cast_indices
     * const chii_crt_cast_indices = await prisma.chii_crt_cast_index.findMany({ take: 10 })
     * 
     * // Only select the `crt_id`
     * const chii_crt_cast_indexWithCrt_idOnly = await prisma.chii_crt_cast_index.findMany({ select: { crt_id: true } })
     * 
    **/
    findMany<T extends chii_crt_cast_indexFindManyArgs>(
      args?: SelectSubset<T, chii_crt_cast_indexFindManyArgs>
    ): PrismaPromise<Array<chii_crt_cast_indexGetPayload<T>>>

    /**
     * Create a Chii_crt_cast_index.
     * @param {chii_crt_cast_indexCreateArgs} args - Arguments to create a Chii_crt_cast_index.
     * @example
     * // Create one Chii_crt_cast_index
     * const Chii_crt_cast_index = await prisma.chii_crt_cast_index.create({
     *   data: {
     *     // ... data to create a Chii_crt_cast_index
     *   }
     * })
     * 
    **/
    create<T extends chii_crt_cast_indexCreateArgs>(
      args: SelectSubset<T, chii_crt_cast_indexCreateArgs>
    ): Prisma__chii_crt_cast_indexClient<chii_crt_cast_indexGetPayload<T>>

    /**
     * Create many Chii_crt_cast_indices.
     *     @param {chii_crt_cast_indexCreateManyArgs} args - Arguments to create many Chii_crt_cast_indices.
     *     @example
     *     // Create many Chii_crt_cast_indices
     *     const chii_crt_cast_index = await prisma.chii_crt_cast_index.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_crt_cast_indexCreateManyArgs>(
      args?: SelectSubset<T, chii_crt_cast_indexCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_crt_cast_index.
     * @param {chii_crt_cast_indexDeleteArgs} args - Arguments to delete one Chii_crt_cast_index.
     * @example
     * // Delete one Chii_crt_cast_index
     * const Chii_crt_cast_index = await prisma.chii_crt_cast_index.delete({
     *   where: {
     *     // ... filter to delete one Chii_crt_cast_index
     *   }
     * })
     * 
    **/
    delete<T extends chii_crt_cast_indexDeleteArgs>(
      args: SelectSubset<T, chii_crt_cast_indexDeleteArgs>
    ): Prisma__chii_crt_cast_indexClient<chii_crt_cast_indexGetPayload<T>>

    /**
     * Update one Chii_crt_cast_index.
     * @param {chii_crt_cast_indexUpdateArgs} args - Arguments to update one Chii_crt_cast_index.
     * @example
     * // Update one Chii_crt_cast_index
     * const chii_crt_cast_index = await prisma.chii_crt_cast_index.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_crt_cast_indexUpdateArgs>(
      args: SelectSubset<T, chii_crt_cast_indexUpdateArgs>
    ): Prisma__chii_crt_cast_indexClient<chii_crt_cast_indexGetPayload<T>>

    /**
     * Delete zero or more Chii_crt_cast_indices.
     * @param {chii_crt_cast_indexDeleteManyArgs} args - Arguments to filter Chii_crt_cast_indices to delete.
     * @example
     * // Delete a few Chii_crt_cast_indices
     * const { count } = await prisma.chii_crt_cast_index.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_crt_cast_indexDeleteManyArgs>(
      args?: SelectSubset<T, chii_crt_cast_indexDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_crt_cast_indices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_crt_cast_indexUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_crt_cast_indices
     * const chii_crt_cast_index = await prisma.chii_crt_cast_index.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_crt_cast_indexUpdateManyArgs>(
      args: SelectSubset<T, chii_crt_cast_indexUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_crt_cast_index.
     * @param {chii_crt_cast_indexUpsertArgs} args - Arguments to update or create a Chii_crt_cast_index.
     * @example
     * // Update or create a Chii_crt_cast_index
     * const chii_crt_cast_index = await prisma.chii_crt_cast_index.upsert({
     *   create: {
     *     // ... data to create a Chii_crt_cast_index
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_crt_cast_index we want to update
     *   }
     * })
    **/
    upsert<T extends chii_crt_cast_indexUpsertArgs>(
      args: SelectSubset<T, chii_crt_cast_indexUpsertArgs>
    ): Prisma__chii_crt_cast_indexClient<chii_crt_cast_indexGetPayload<T>>

    /**
     * Count the number of Chii_crt_cast_indices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_crt_cast_indexCountArgs} args - Arguments to filter Chii_crt_cast_indices to count.
     * @example
     * // Count the number of Chii_crt_cast_indices
     * const count = await prisma.chii_crt_cast_index.count({
     *   where: {
     *     // ... the filter for the Chii_crt_cast_indices we want to count
     *   }
     * })
    **/
    count<T extends chii_crt_cast_indexCountArgs>(
      args?: Subset<T, chii_crt_cast_indexCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_crt_cast_indexCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_crt_cast_index.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_crt_cast_indexAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_crt_cast_indexAggregateArgs>(args: Subset<T, Chii_crt_cast_indexAggregateArgs>): PrismaPromise<GetChii_crt_cast_indexAggregateType<T>>

    /**
     * Group by Chii_crt_cast_index.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_crt_cast_indexGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_crt_cast_indexGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_crt_cast_indexGroupByArgs['orderBy'] }
        : { orderBy?: Chii_crt_cast_indexGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_crt_cast_indexGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_crt_cast_indexGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_crt_cast_index.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_crt_cast_indexClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_crt_cast_index base type for findUnique actions
   */
  export type chii_crt_cast_indexFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_crt_cast_index
     * 
    **/
    select?: chii_crt_cast_indexSelect | null
    /**
     * Filter, which chii_crt_cast_index to fetch.
     * 
    **/
    where: chii_crt_cast_indexWhereUniqueInput
  }

  /**
   * chii_crt_cast_index: findUnique
   */
  export interface chii_crt_cast_indexFindUniqueArgs extends chii_crt_cast_indexFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_crt_cast_index findUniqueOrThrow
   */
  export type chii_crt_cast_indexFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_cast_index
     * 
    **/
    select?: chii_crt_cast_indexSelect | null
    /**
     * Filter, which chii_crt_cast_index to fetch.
     * 
    **/
    where: chii_crt_cast_indexWhereUniqueInput
  }


  /**
   * chii_crt_cast_index base type for findFirst actions
   */
  export type chii_crt_cast_indexFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_crt_cast_index
     * 
    **/
    select?: chii_crt_cast_indexSelect | null
    /**
     * Filter, which chii_crt_cast_index to fetch.
     * 
    **/
    where?: chii_crt_cast_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_crt_cast_indices to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_crt_cast_indexOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_crt_cast_indices.
     * 
    **/
    cursor?: chii_crt_cast_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_crt_cast_indices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_crt_cast_indices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_crt_cast_indices.
     * 
    **/
    distinct?: Enumerable<Chii_crt_cast_indexScalarFieldEnum>
  }

  /**
   * chii_crt_cast_index: findFirst
   */
  export interface chii_crt_cast_indexFindFirstArgs extends chii_crt_cast_indexFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_crt_cast_index findFirstOrThrow
   */
  export type chii_crt_cast_indexFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_cast_index
     * 
    **/
    select?: chii_crt_cast_indexSelect | null
    /**
     * Filter, which chii_crt_cast_index to fetch.
     * 
    **/
    where?: chii_crt_cast_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_crt_cast_indices to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_crt_cast_indexOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_crt_cast_indices.
     * 
    **/
    cursor?: chii_crt_cast_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_crt_cast_indices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_crt_cast_indices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_crt_cast_indices.
     * 
    **/
    distinct?: Enumerable<Chii_crt_cast_indexScalarFieldEnum>
  }


  /**
   * chii_crt_cast_index findMany
   */
  export type chii_crt_cast_indexFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_cast_index
     * 
    **/
    select?: chii_crt_cast_indexSelect | null
    /**
     * Filter, which chii_crt_cast_indices to fetch.
     * 
    **/
    where?: chii_crt_cast_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_crt_cast_indices to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_crt_cast_indexOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_crt_cast_indices.
     * 
    **/
    cursor?: chii_crt_cast_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_crt_cast_indices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_crt_cast_indices.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_crt_cast_indexScalarFieldEnum>
  }


  /**
   * chii_crt_cast_index create
   */
  export type chii_crt_cast_indexCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_cast_index
     * 
    **/
    select?: chii_crt_cast_indexSelect | null
    /**
     * The data needed to create a chii_crt_cast_index.
     * 
    **/
    data: XOR<chii_crt_cast_indexCreateInput, chii_crt_cast_indexUncheckedCreateInput>
  }


  /**
   * chii_crt_cast_index createMany
   */
  export type chii_crt_cast_indexCreateManyArgs = {
    /**
     * The data used to create many chii_crt_cast_indices.
     * 
    **/
    data: Enumerable<chii_crt_cast_indexCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_crt_cast_index update
   */
  export type chii_crt_cast_indexUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_cast_index
     * 
    **/
    select?: chii_crt_cast_indexSelect | null
    /**
     * The data needed to update a chii_crt_cast_index.
     * 
    **/
    data: XOR<chii_crt_cast_indexUpdateInput, chii_crt_cast_indexUncheckedUpdateInput>
    /**
     * Choose, which chii_crt_cast_index to update.
     * 
    **/
    where: chii_crt_cast_indexWhereUniqueInput
  }


  /**
   * chii_crt_cast_index updateMany
   */
  export type chii_crt_cast_indexUpdateManyArgs = {
    /**
     * The data used to update chii_crt_cast_indices.
     * 
    **/
    data: XOR<chii_crt_cast_indexUpdateManyMutationInput, chii_crt_cast_indexUncheckedUpdateManyInput>
    /**
     * Filter which chii_crt_cast_indices to update
     * 
    **/
    where?: chii_crt_cast_indexWhereInput
  }


  /**
   * chii_crt_cast_index upsert
   */
  export type chii_crt_cast_indexUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_cast_index
     * 
    **/
    select?: chii_crt_cast_indexSelect | null
    /**
     * The filter to search for the chii_crt_cast_index to update in case it exists.
     * 
    **/
    where: chii_crt_cast_indexWhereUniqueInput
    /**
     * In case the chii_crt_cast_index found by the `where` argument doesn't exist, create a new chii_crt_cast_index with this data.
     * 
    **/
    create: XOR<chii_crt_cast_indexCreateInput, chii_crt_cast_indexUncheckedCreateInput>
    /**
     * In case the chii_crt_cast_index was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_crt_cast_indexUpdateInput, chii_crt_cast_indexUncheckedUpdateInput>
  }


  /**
   * chii_crt_cast_index delete
   */
  export type chii_crt_cast_indexDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_cast_index
     * 
    **/
    select?: chii_crt_cast_indexSelect | null
    /**
     * Filter which chii_crt_cast_index to delete.
     * 
    **/
    where: chii_crt_cast_indexWhereUniqueInput
  }


  /**
   * chii_crt_cast_index deleteMany
   */
  export type chii_crt_cast_indexDeleteManyArgs = {
    /**
     * Filter which chii_crt_cast_indices to delete
     * 
    **/
    where?: chii_crt_cast_indexWhereInput
  }


  /**
   * chii_crt_cast_index without action
   */
  export type chii_crt_cast_indexArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_cast_index
     * 
    **/
    select?: chii_crt_cast_indexSelect | null
  }



  /**
   * Model chii_crt_comments
   */


  export type AggregateChii_crt_comments = {
    _count: Chii_crt_commentsCountAggregateOutputType | null
    _avg: Chii_crt_commentsAvgAggregateOutputType | null
    _sum: Chii_crt_commentsSumAggregateOutputType | null
    _min: Chii_crt_commentsMinAggregateOutputType | null
    _max: Chii_crt_commentsMaxAggregateOutputType | null
  }

  export type Chii_crt_commentsAvgAggregateOutputType = {
    crt_pst_id: number | null
    crt_pst_mid: number | null
    crt_pst_uid: number | null
    crt_pst_related: number | null
    crt_pst_dateline: number | null
  }

  export type Chii_crt_commentsSumAggregateOutputType = {
    crt_pst_id: number | null
    crt_pst_mid: number | null
    crt_pst_uid: number | null
    crt_pst_related: number | null
    crt_pst_dateline: number | null
  }

  export type Chii_crt_commentsMinAggregateOutputType = {
    crt_pst_id: number | null
    crt_pst_mid: number | null
    crt_pst_uid: number | null
    crt_pst_related: number | null
    crt_pst_dateline: number | null
    crt_pst_content: string | null
  }

  export type Chii_crt_commentsMaxAggregateOutputType = {
    crt_pst_id: number | null
    crt_pst_mid: number | null
    crt_pst_uid: number | null
    crt_pst_related: number | null
    crt_pst_dateline: number | null
    crt_pst_content: string | null
  }

  export type Chii_crt_commentsCountAggregateOutputType = {
    crt_pst_id: number
    crt_pst_mid: number
    crt_pst_uid: number
    crt_pst_related: number
    crt_pst_dateline: number
    crt_pst_content: number
    _all: number
  }


  export type Chii_crt_commentsAvgAggregateInputType = {
    crt_pst_id?: true
    crt_pst_mid?: true
    crt_pst_uid?: true
    crt_pst_related?: true
    crt_pst_dateline?: true
  }

  export type Chii_crt_commentsSumAggregateInputType = {
    crt_pst_id?: true
    crt_pst_mid?: true
    crt_pst_uid?: true
    crt_pst_related?: true
    crt_pst_dateline?: true
  }

  export type Chii_crt_commentsMinAggregateInputType = {
    crt_pst_id?: true
    crt_pst_mid?: true
    crt_pst_uid?: true
    crt_pst_related?: true
    crt_pst_dateline?: true
    crt_pst_content?: true
  }

  export type Chii_crt_commentsMaxAggregateInputType = {
    crt_pst_id?: true
    crt_pst_mid?: true
    crt_pst_uid?: true
    crt_pst_related?: true
    crt_pst_dateline?: true
    crt_pst_content?: true
  }

  export type Chii_crt_commentsCountAggregateInputType = {
    crt_pst_id?: true
    crt_pst_mid?: true
    crt_pst_uid?: true
    crt_pst_related?: true
    crt_pst_dateline?: true
    crt_pst_content?: true
    _all?: true
  }

  export type Chii_crt_commentsAggregateArgs = {
    /**
     * Filter which chii_crt_comments to aggregate.
     * 
    **/
    where?: chii_crt_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_crt_comments to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_crt_commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_crt_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_crt_comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_crt_comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_crt_comments
    **/
    _count?: true | Chii_crt_commentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_crt_commentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_crt_commentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_crt_commentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_crt_commentsMaxAggregateInputType
  }

  export type GetChii_crt_commentsAggregateType<T extends Chii_crt_commentsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_crt_comments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_crt_comments[P]>
      : GetScalarType<T[P], AggregateChii_crt_comments[P]>
  }




  export type Chii_crt_commentsGroupByArgs = {
    where?: chii_crt_commentsWhereInput
    orderBy?: Enumerable<chii_crt_commentsOrderByWithAggregationInput>
    by: Array<Chii_crt_commentsScalarFieldEnum>
    having?: chii_crt_commentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_crt_commentsCountAggregateInputType | true
    _avg?: Chii_crt_commentsAvgAggregateInputType
    _sum?: Chii_crt_commentsSumAggregateInputType
    _min?: Chii_crt_commentsMinAggregateInputType
    _max?: Chii_crt_commentsMaxAggregateInputType
  }


  export type Chii_crt_commentsGroupByOutputType = {
    crt_pst_id: number
    crt_pst_mid: number
    crt_pst_uid: number
    crt_pst_related: number
    crt_pst_dateline: number
    crt_pst_content: string
    _count: Chii_crt_commentsCountAggregateOutputType | null
    _avg: Chii_crt_commentsAvgAggregateOutputType | null
    _sum: Chii_crt_commentsSumAggregateOutputType | null
    _min: Chii_crt_commentsMinAggregateOutputType | null
    _max: Chii_crt_commentsMaxAggregateOutputType | null
  }

  type GetChii_crt_commentsGroupByPayload<T extends Chii_crt_commentsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_crt_commentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_crt_commentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_crt_commentsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_crt_commentsGroupByOutputType[P]>
        }
      >
    >


  export type chii_crt_commentsSelect = {
    crt_pst_id?: boolean
    crt_pst_mid?: boolean
    crt_pst_uid?: boolean
    crt_pst_related?: boolean
    crt_pst_dateline?: boolean
    crt_pst_content?: boolean
  }


  export type chii_crt_commentsGetPayload<S extends boolean | null | undefined | chii_crt_commentsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_crt_comments :
    S extends undefined ? never :
    S extends { include: any } & (chii_crt_commentsArgs | chii_crt_commentsFindManyArgs)
    ? chii_crt_comments 
    : S extends { select: any } & (chii_crt_commentsArgs | chii_crt_commentsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_crt_comments ? chii_crt_comments[P] : never
  } 
      : chii_crt_comments


  type chii_crt_commentsCountArgs = Merge<
    Omit<chii_crt_commentsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_crt_commentsCountAggregateInputType | true
    }
  >

  export interface chii_crt_commentsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_crt_comments that matches the filter.
     * @param {chii_crt_commentsFindUniqueArgs} args - Arguments to find a Chii_crt_comments
     * @example
     * // Get one Chii_crt_comments
     * const chii_crt_comments = await prisma.chii_crt_comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_crt_commentsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_crt_commentsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_crt_comments'> extends True ? Prisma__chii_crt_commentsClient<chii_crt_commentsGetPayload<T>> : Prisma__chii_crt_commentsClient<chii_crt_commentsGetPayload<T> | null, null>

    /**
     * Find one Chii_crt_comments that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_crt_commentsFindUniqueOrThrowArgs} args - Arguments to find a Chii_crt_comments
     * @example
     * // Get one Chii_crt_comments
     * const chii_crt_comments = await prisma.chii_crt_comments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_crt_commentsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_crt_commentsFindUniqueOrThrowArgs>
    ): Prisma__chii_crt_commentsClient<chii_crt_commentsGetPayload<T>>

    /**
     * Find the first Chii_crt_comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_crt_commentsFindFirstArgs} args - Arguments to find a Chii_crt_comments
     * @example
     * // Get one Chii_crt_comments
     * const chii_crt_comments = await prisma.chii_crt_comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_crt_commentsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_crt_commentsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_crt_comments'> extends True ? Prisma__chii_crt_commentsClient<chii_crt_commentsGetPayload<T>> : Prisma__chii_crt_commentsClient<chii_crt_commentsGetPayload<T> | null, null>

    /**
     * Find the first Chii_crt_comments that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_crt_commentsFindFirstOrThrowArgs} args - Arguments to find a Chii_crt_comments
     * @example
     * // Get one Chii_crt_comments
     * const chii_crt_comments = await prisma.chii_crt_comments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_crt_commentsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_crt_commentsFindFirstOrThrowArgs>
    ): Prisma__chii_crt_commentsClient<chii_crt_commentsGetPayload<T>>

    /**
     * Find zero or more Chii_crt_comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_crt_commentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_crt_comments
     * const chii_crt_comments = await prisma.chii_crt_comments.findMany()
     * 
     * // Get first 10 Chii_crt_comments
     * const chii_crt_comments = await prisma.chii_crt_comments.findMany({ take: 10 })
     * 
     * // Only select the `crt_pst_id`
     * const chii_crt_commentsWithCrt_pst_idOnly = await prisma.chii_crt_comments.findMany({ select: { crt_pst_id: true } })
     * 
    **/
    findMany<T extends chii_crt_commentsFindManyArgs>(
      args?: SelectSubset<T, chii_crt_commentsFindManyArgs>
    ): PrismaPromise<Array<chii_crt_commentsGetPayload<T>>>

    /**
     * Create a Chii_crt_comments.
     * @param {chii_crt_commentsCreateArgs} args - Arguments to create a Chii_crt_comments.
     * @example
     * // Create one Chii_crt_comments
     * const Chii_crt_comments = await prisma.chii_crt_comments.create({
     *   data: {
     *     // ... data to create a Chii_crt_comments
     *   }
     * })
     * 
    **/
    create<T extends chii_crt_commentsCreateArgs>(
      args: SelectSubset<T, chii_crt_commentsCreateArgs>
    ): Prisma__chii_crt_commentsClient<chii_crt_commentsGetPayload<T>>

    /**
     * Create many Chii_crt_comments.
     *     @param {chii_crt_commentsCreateManyArgs} args - Arguments to create many Chii_crt_comments.
     *     @example
     *     // Create many Chii_crt_comments
     *     const chii_crt_comments = await prisma.chii_crt_comments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_crt_commentsCreateManyArgs>(
      args?: SelectSubset<T, chii_crt_commentsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_crt_comments.
     * @param {chii_crt_commentsDeleteArgs} args - Arguments to delete one Chii_crt_comments.
     * @example
     * // Delete one Chii_crt_comments
     * const Chii_crt_comments = await prisma.chii_crt_comments.delete({
     *   where: {
     *     // ... filter to delete one Chii_crt_comments
     *   }
     * })
     * 
    **/
    delete<T extends chii_crt_commentsDeleteArgs>(
      args: SelectSubset<T, chii_crt_commentsDeleteArgs>
    ): Prisma__chii_crt_commentsClient<chii_crt_commentsGetPayload<T>>

    /**
     * Update one Chii_crt_comments.
     * @param {chii_crt_commentsUpdateArgs} args - Arguments to update one Chii_crt_comments.
     * @example
     * // Update one Chii_crt_comments
     * const chii_crt_comments = await prisma.chii_crt_comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_crt_commentsUpdateArgs>(
      args: SelectSubset<T, chii_crt_commentsUpdateArgs>
    ): Prisma__chii_crt_commentsClient<chii_crt_commentsGetPayload<T>>

    /**
     * Delete zero or more Chii_crt_comments.
     * @param {chii_crt_commentsDeleteManyArgs} args - Arguments to filter Chii_crt_comments to delete.
     * @example
     * // Delete a few Chii_crt_comments
     * const { count } = await prisma.chii_crt_comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_crt_commentsDeleteManyArgs>(
      args?: SelectSubset<T, chii_crt_commentsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_crt_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_crt_commentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_crt_comments
     * const chii_crt_comments = await prisma.chii_crt_comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_crt_commentsUpdateManyArgs>(
      args: SelectSubset<T, chii_crt_commentsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_crt_comments.
     * @param {chii_crt_commentsUpsertArgs} args - Arguments to update or create a Chii_crt_comments.
     * @example
     * // Update or create a Chii_crt_comments
     * const chii_crt_comments = await prisma.chii_crt_comments.upsert({
     *   create: {
     *     // ... data to create a Chii_crt_comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_crt_comments we want to update
     *   }
     * })
    **/
    upsert<T extends chii_crt_commentsUpsertArgs>(
      args: SelectSubset<T, chii_crt_commentsUpsertArgs>
    ): Prisma__chii_crt_commentsClient<chii_crt_commentsGetPayload<T>>

    /**
     * Count the number of Chii_crt_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_crt_commentsCountArgs} args - Arguments to filter Chii_crt_comments to count.
     * @example
     * // Count the number of Chii_crt_comments
     * const count = await prisma.chii_crt_comments.count({
     *   where: {
     *     // ... the filter for the Chii_crt_comments we want to count
     *   }
     * })
    **/
    count<T extends chii_crt_commentsCountArgs>(
      args?: Subset<T, chii_crt_commentsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_crt_commentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_crt_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_crt_commentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_crt_commentsAggregateArgs>(args: Subset<T, Chii_crt_commentsAggregateArgs>): PrismaPromise<GetChii_crt_commentsAggregateType<T>>

    /**
     * Group by Chii_crt_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_crt_commentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_crt_commentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_crt_commentsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_crt_commentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_crt_commentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_crt_commentsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_crt_comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_crt_commentsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_crt_comments base type for findUnique actions
   */
  export type chii_crt_commentsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_crt_comments
     * 
    **/
    select?: chii_crt_commentsSelect | null
    /**
     * Filter, which chii_crt_comments to fetch.
     * 
    **/
    where: chii_crt_commentsWhereUniqueInput
  }

  /**
   * chii_crt_comments: findUnique
   */
  export interface chii_crt_commentsFindUniqueArgs extends chii_crt_commentsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_crt_comments findUniqueOrThrow
   */
  export type chii_crt_commentsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_comments
     * 
    **/
    select?: chii_crt_commentsSelect | null
    /**
     * Filter, which chii_crt_comments to fetch.
     * 
    **/
    where: chii_crt_commentsWhereUniqueInput
  }


  /**
   * chii_crt_comments base type for findFirst actions
   */
  export type chii_crt_commentsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_crt_comments
     * 
    **/
    select?: chii_crt_commentsSelect | null
    /**
     * Filter, which chii_crt_comments to fetch.
     * 
    **/
    where?: chii_crt_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_crt_comments to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_crt_commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_crt_comments.
     * 
    **/
    cursor?: chii_crt_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_crt_comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_crt_comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_crt_comments.
     * 
    **/
    distinct?: Enumerable<Chii_crt_commentsScalarFieldEnum>
  }

  /**
   * chii_crt_comments: findFirst
   */
  export interface chii_crt_commentsFindFirstArgs extends chii_crt_commentsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_crt_comments findFirstOrThrow
   */
  export type chii_crt_commentsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_comments
     * 
    **/
    select?: chii_crt_commentsSelect | null
    /**
     * Filter, which chii_crt_comments to fetch.
     * 
    **/
    where?: chii_crt_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_crt_comments to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_crt_commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_crt_comments.
     * 
    **/
    cursor?: chii_crt_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_crt_comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_crt_comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_crt_comments.
     * 
    **/
    distinct?: Enumerable<Chii_crt_commentsScalarFieldEnum>
  }


  /**
   * chii_crt_comments findMany
   */
  export type chii_crt_commentsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_comments
     * 
    **/
    select?: chii_crt_commentsSelect | null
    /**
     * Filter, which chii_crt_comments to fetch.
     * 
    **/
    where?: chii_crt_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_crt_comments to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_crt_commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_crt_comments.
     * 
    **/
    cursor?: chii_crt_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_crt_comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_crt_comments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_crt_commentsScalarFieldEnum>
  }


  /**
   * chii_crt_comments create
   */
  export type chii_crt_commentsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_comments
     * 
    **/
    select?: chii_crt_commentsSelect | null
    /**
     * The data needed to create a chii_crt_comments.
     * 
    **/
    data: XOR<chii_crt_commentsCreateInput, chii_crt_commentsUncheckedCreateInput>
  }


  /**
   * chii_crt_comments createMany
   */
  export type chii_crt_commentsCreateManyArgs = {
    /**
     * The data used to create many chii_crt_comments.
     * 
    **/
    data: Enumerable<chii_crt_commentsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_crt_comments update
   */
  export type chii_crt_commentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_comments
     * 
    **/
    select?: chii_crt_commentsSelect | null
    /**
     * The data needed to update a chii_crt_comments.
     * 
    **/
    data: XOR<chii_crt_commentsUpdateInput, chii_crt_commentsUncheckedUpdateInput>
    /**
     * Choose, which chii_crt_comments to update.
     * 
    **/
    where: chii_crt_commentsWhereUniqueInput
  }


  /**
   * chii_crt_comments updateMany
   */
  export type chii_crt_commentsUpdateManyArgs = {
    /**
     * The data used to update chii_crt_comments.
     * 
    **/
    data: XOR<chii_crt_commentsUpdateManyMutationInput, chii_crt_commentsUncheckedUpdateManyInput>
    /**
     * Filter which chii_crt_comments to update
     * 
    **/
    where?: chii_crt_commentsWhereInput
  }


  /**
   * chii_crt_comments upsert
   */
  export type chii_crt_commentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_comments
     * 
    **/
    select?: chii_crt_commentsSelect | null
    /**
     * The filter to search for the chii_crt_comments to update in case it exists.
     * 
    **/
    where: chii_crt_commentsWhereUniqueInput
    /**
     * In case the chii_crt_comments found by the `where` argument doesn't exist, create a new chii_crt_comments with this data.
     * 
    **/
    create: XOR<chii_crt_commentsCreateInput, chii_crt_commentsUncheckedCreateInput>
    /**
     * In case the chii_crt_comments was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_crt_commentsUpdateInput, chii_crt_commentsUncheckedUpdateInput>
  }


  /**
   * chii_crt_comments delete
   */
  export type chii_crt_commentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_comments
     * 
    **/
    select?: chii_crt_commentsSelect | null
    /**
     * Filter which chii_crt_comments to delete.
     * 
    **/
    where: chii_crt_commentsWhereUniqueInput
  }


  /**
   * chii_crt_comments deleteMany
   */
  export type chii_crt_commentsDeleteManyArgs = {
    /**
     * Filter which chii_crt_comments to delete
     * 
    **/
    where?: chii_crt_commentsWhereInput
  }


  /**
   * chii_crt_comments without action
   */
  export type chii_crt_commentsArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_comments
     * 
    **/
    select?: chii_crt_commentsSelect | null
  }



  /**
   * Model chii_crt_subject_index
   */


  export type AggregateChii_crt_subject_index = {
    _count: Chii_crt_subject_indexCountAggregateOutputType | null
    _avg: Chii_crt_subject_indexAvgAggregateOutputType | null
    _sum: Chii_crt_subject_indexSumAggregateOutputType | null
    _min: Chii_crt_subject_indexMinAggregateOutputType | null
    _max: Chii_crt_subject_indexMaxAggregateOutputType | null
  }

  export type Chii_crt_subject_indexAvgAggregateOutputType = {
    crt_id: number | null
    subject_id: number | null
    subject_type_id: number | null
    crt_type: number | null
    crt_order: number | null
  }

  export type Chii_crt_subject_indexSumAggregateOutputType = {
    crt_id: number | null
    subject_id: number | null
    subject_type_id: number | null
    crt_type: number | null
    crt_order: number | null
  }

  export type Chii_crt_subject_indexMinAggregateOutputType = {
    crt_id: number | null
    subject_id: number | null
    subject_type_id: number | null
    crt_type: number | null
    ctr_appear_eps: string | null
    crt_order: number | null
  }

  export type Chii_crt_subject_indexMaxAggregateOutputType = {
    crt_id: number | null
    subject_id: number | null
    subject_type_id: number | null
    crt_type: number | null
    ctr_appear_eps: string | null
    crt_order: number | null
  }

  export type Chii_crt_subject_indexCountAggregateOutputType = {
    crt_id: number
    subject_id: number
    subject_type_id: number
    crt_type: number
    ctr_appear_eps: number
    crt_order: number
    _all: number
  }


  export type Chii_crt_subject_indexAvgAggregateInputType = {
    crt_id?: true
    subject_id?: true
    subject_type_id?: true
    crt_type?: true
    crt_order?: true
  }

  export type Chii_crt_subject_indexSumAggregateInputType = {
    crt_id?: true
    subject_id?: true
    subject_type_id?: true
    crt_type?: true
    crt_order?: true
  }

  export type Chii_crt_subject_indexMinAggregateInputType = {
    crt_id?: true
    subject_id?: true
    subject_type_id?: true
    crt_type?: true
    ctr_appear_eps?: true
    crt_order?: true
  }

  export type Chii_crt_subject_indexMaxAggregateInputType = {
    crt_id?: true
    subject_id?: true
    subject_type_id?: true
    crt_type?: true
    ctr_appear_eps?: true
    crt_order?: true
  }

  export type Chii_crt_subject_indexCountAggregateInputType = {
    crt_id?: true
    subject_id?: true
    subject_type_id?: true
    crt_type?: true
    ctr_appear_eps?: true
    crt_order?: true
    _all?: true
  }

  export type Chii_crt_subject_indexAggregateArgs = {
    /**
     * Filter which chii_crt_subject_index to aggregate.
     * 
    **/
    where?: chii_crt_subject_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_crt_subject_indices to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_crt_subject_indexOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_crt_subject_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_crt_subject_indices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_crt_subject_indices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_crt_subject_indices
    **/
    _count?: true | Chii_crt_subject_indexCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_crt_subject_indexAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_crt_subject_indexSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_crt_subject_indexMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_crt_subject_indexMaxAggregateInputType
  }

  export type GetChii_crt_subject_indexAggregateType<T extends Chii_crt_subject_indexAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_crt_subject_index]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_crt_subject_index[P]>
      : GetScalarType<T[P], AggregateChii_crt_subject_index[P]>
  }




  export type Chii_crt_subject_indexGroupByArgs = {
    where?: chii_crt_subject_indexWhereInput
    orderBy?: Enumerable<chii_crt_subject_indexOrderByWithAggregationInput>
    by: Array<Chii_crt_subject_indexScalarFieldEnum>
    having?: chii_crt_subject_indexScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_crt_subject_indexCountAggregateInputType | true
    _avg?: Chii_crt_subject_indexAvgAggregateInputType
    _sum?: Chii_crt_subject_indexSumAggregateInputType
    _min?: Chii_crt_subject_indexMinAggregateInputType
    _max?: Chii_crt_subject_indexMaxAggregateInputType
  }


  export type Chii_crt_subject_indexGroupByOutputType = {
    crt_id: number
    subject_id: number
    subject_type_id: number
    crt_type: number
    ctr_appear_eps: string
    crt_order: number
    _count: Chii_crt_subject_indexCountAggregateOutputType | null
    _avg: Chii_crt_subject_indexAvgAggregateOutputType | null
    _sum: Chii_crt_subject_indexSumAggregateOutputType | null
    _min: Chii_crt_subject_indexMinAggregateOutputType | null
    _max: Chii_crt_subject_indexMaxAggregateOutputType | null
  }

  type GetChii_crt_subject_indexGroupByPayload<T extends Chii_crt_subject_indexGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_crt_subject_indexGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_crt_subject_indexGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_crt_subject_indexGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_crt_subject_indexGroupByOutputType[P]>
        }
      >
    >


  export type chii_crt_subject_indexSelect = {
    crt_id?: boolean
    subject_id?: boolean
    subject_type_id?: boolean
    crt_type?: boolean
    ctr_appear_eps?: boolean
    crt_order?: boolean
  }


  export type chii_crt_subject_indexGetPayload<S extends boolean | null | undefined | chii_crt_subject_indexArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_crt_subject_index :
    S extends undefined ? never :
    S extends { include: any } & (chii_crt_subject_indexArgs | chii_crt_subject_indexFindManyArgs)
    ? chii_crt_subject_index 
    : S extends { select: any } & (chii_crt_subject_indexArgs | chii_crt_subject_indexFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_crt_subject_index ? chii_crt_subject_index[P] : never
  } 
      : chii_crt_subject_index


  type chii_crt_subject_indexCountArgs = Merge<
    Omit<chii_crt_subject_indexFindManyArgs, 'select' | 'include'> & {
      select?: Chii_crt_subject_indexCountAggregateInputType | true
    }
  >

  export interface chii_crt_subject_indexDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_crt_subject_index that matches the filter.
     * @param {chii_crt_subject_indexFindUniqueArgs} args - Arguments to find a Chii_crt_subject_index
     * @example
     * // Get one Chii_crt_subject_index
     * const chii_crt_subject_index = await prisma.chii_crt_subject_index.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_crt_subject_indexFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_crt_subject_indexFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_crt_subject_index'> extends True ? Prisma__chii_crt_subject_indexClient<chii_crt_subject_indexGetPayload<T>> : Prisma__chii_crt_subject_indexClient<chii_crt_subject_indexGetPayload<T> | null, null>

    /**
     * Find one Chii_crt_subject_index that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_crt_subject_indexFindUniqueOrThrowArgs} args - Arguments to find a Chii_crt_subject_index
     * @example
     * // Get one Chii_crt_subject_index
     * const chii_crt_subject_index = await prisma.chii_crt_subject_index.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_crt_subject_indexFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_crt_subject_indexFindUniqueOrThrowArgs>
    ): Prisma__chii_crt_subject_indexClient<chii_crt_subject_indexGetPayload<T>>

    /**
     * Find the first Chii_crt_subject_index that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_crt_subject_indexFindFirstArgs} args - Arguments to find a Chii_crt_subject_index
     * @example
     * // Get one Chii_crt_subject_index
     * const chii_crt_subject_index = await prisma.chii_crt_subject_index.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_crt_subject_indexFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_crt_subject_indexFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_crt_subject_index'> extends True ? Prisma__chii_crt_subject_indexClient<chii_crt_subject_indexGetPayload<T>> : Prisma__chii_crt_subject_indexClient<chii_crt_subject_indexGetPayload<T> | null, null>

    /**
     * Find the first Chii_crt_subject_index that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_crt_subject_indexFindFirstOrThrowArgs} args - Arguments to find a Chii_crt_subject_index
     * @example
     * // Get one Chii_crt_subject_index
     * const chii_crt_subject_index = await prisma.chii_crt_subject_index.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_crt_subject_indexFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_crt_subject_indexFindFirstOrThrowArgs>
    ): Prisma__chii_crt_subject_indexClient<chii_crt_subject_indexGetPayload<T>>

    /**
     * Find zero or more Chii_crt_subject_indices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_crt_subject_indexFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_crt_subject_indices
     * const chii_crt_subject_indices = await prisma.chii_crt_subject_index.findMany()
     * 
     * // Get first 10 Chii_crt_subject_indices
     * const chii_crt_subject_indices = await prisma.chii_crt_subject_index.findMany({ take: 10 })
     * 
     * // Only select the `crt_id`
     * const chii_crt_subject_indexWithCrt_idOnly = await prisma.chii_crt_subject_index.findMany({ select: { crt_id: true } })
     * 
    **/
    findMany<T extends chii_crt_subject_indexFindManyArgs>(
      args?: SelectSubset<T, chii_crt_subject_indexFindManyArgs>
    ): PrismaPromise<Array<chii_crt_subject_indexGetPayload<T>>>

    /**
     * Create a Chii_crt_subject_index.
     * @param {chii_crt_subject_indexCreateArgs} args - Arguments to create a Chii_crt_subject_index.
     * @example
     * // Create one Chii_crt_subject_index
     * const Chii_crt_subject_index = await prisma.chii_crt_subject_index.create({
     *   data: {
     *     // ... data to create a Chii_crt_subject_index
     *   }
     * })
     * 
    **/
    create<T extends chii_crt_subject_indexCreateArgs>(
      args: SelectSubset<T, chii_crt_subject_indexCreateArgs>
    ): Prisma__chii_crt_subject_indexClient<chii_crt_subject_indexGetPayload<T>>

    /**
     * Create many Chii_crt_subject_indices.
     *     @param {chii_crt_subject_indexCreateManyArgs} args - Arguments to create many Chii_crt_subject_indices.
     *     @example
     *     // Create many Chii_crt_subject_indices
     *     const chii_crt_subject_index = await prisma.chii_crt_subject_index.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_crt_subject_indexCreateManyArgs>(
      args?: SelectSubset<T, chii_crt_subject_indexCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_crt_subject_index.
     * @param {chii_crt_subject_indexDeleteArgs} args - Arguments to delete one Chii_crt_subject_index.
     * @example
     * // Delete one Chii_crt_subject_index
     * const Chii_crt_subject_index = await prisma.chii_crt_subject_index.delete({
     *   where: {
     *     // ... filter to delete one Chii_crt_subject_index
     *   }
     * })
     * 
    **/
    delete<T extends chii_crt_subject_indexDeleteArgs>(
      args: SelectSubset<T, chii_crt_subject_indexDeleteArgs>
    ): Prisma__chii_crt_subject_indexClient<chii_crt_subject_indexGetPayload<T>>

    /**
     * Update one Chii_crt_subject_index.
     * @param {chii_crt_subject_indexUpdateArgs} args - Arguments to update one Chii_crt_subject_index.
     * @example
     * // Update one Chii_crt_subject_index
     * const chii_crt_subject_index = await prisma.chii_crt_subject_index.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_crt_subject_indexUpdateArgs>(
      args: SelectSubset<T, chii_crt_subject_indexUpdateArgs>
    ): Prisma__chii_crt_subject_indexClient<chii_crt_subject_indexGetPayload<T>>

    /**
     * Delete zero or more Chii_crt_subject_indices.
     * @param {chii_crt_subject_indexDeleteManyArgs} args - Arguments to filter Chii_crt_subject_indices to delete.
     * @example
     * // Delete a few Chii_crt_subject_indices
     * const { count } = await prisma.chii_crt_subject_index.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_crt_subject_indexDeleteManyArgs>(
      args?: SelectSubset<T, chii_crt_subject_indexDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_crt_subject_indices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_crt_subject_indexUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_crt_subject_indices
     * const chii_crt_subject_index = await prisma.chii_crt_subject_index.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_crt_subject_indexUpdateManyArgs>(
      args: SelectSubset<T, chii_crt_subject_indexUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_crt_subject_index.
     * @param {chii_crt_subject_indexUpsertArgs} args - Arguments to update or create a Chii_crt_subject_index.
     * @example
     * // Update or create a Chii_crt_subject_index
     * const chii_crt_subject_index = await prisma.chii_crt_subject_index.upsert({
     *   create: {
     *     // ... data to create a Chii_crt_subject_index
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_crt_subject_index we want to update
     *   }
     * })
    **/
    upsert<T extends chii_crt_subject_indexUpsertArgs>(
      args: SelectSubset<T, chii_crt_subject_indexUpsertArgs>
    ): Prisma__chii_crt_subject_indexClient<chii_crt_subject_indexGetPayload<T>>

    /**
     * Count the number of Chii_crt_subject_indices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_crt_subject_indexCountArgs} args - Arguments to filter Chii_crt_subject_indices to count.
     * @example
     * // Count the number of Chii_crt_subject_indices
     * const count = await prisma.chii_crt_subject_index.count({
     *   where: {
     *     // ... the filter for the Chii_crt_subject_indices we want to count
     *   }
     * })
    **/
    count<T extends chii_crt_subject_indexCountArgs>(
      args?: Subset<T, chii_crt_subject_indexCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_crt_subject_indexCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_crt_subject_index.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_crt_subject_indexAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_crt_subject_indexAggregateArgs>(args: Subset<T, Chii_crt_subject_indexAggregateArgs>): PrismaPromise<GetChii_crt_subject_indexAggregateType<T>>

    /**
     * Group by Chii_crt_subject_index.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_crt_subject_indexGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_crt_subject_indexGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_crt_subject_indexGroupByArgs['orderBy'] }
        : { orderBy?: Chii_crt_subject_indexGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_crt_subject_indexGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_crt_subject_indexGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_crt_subject_index.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_crt_subject_indexClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_crt_subject_index base type for findUnique actions
   */
  export type chii_crt_subject_indexFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_crt_subject_index
     * 
    **/
    select?: chii_crt_subject_indexSelect | null
    /**
     * Filter, which chii_crt_subject_index to fetch.
     * 
    **/
    where: chii_crt_subject_indexWhereUniqueInput
  }

  /**
   * chii_crt_subject_index: findUnique
   */
  export interface chii_crt_subject_indexFindUniqueArgs extends chii_crt_subject_indexFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_crt_subject_index findUniqueOrThrow
   */
  export type chii_crt_subject_indexFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_subject_index
     * 
    **/
    select?: chii_crt_subject_indexSelect | null
    /**
     * Filter, which chii_crt_subject_index to fetch.
     * 
    **/
    where: chii_crt_subject_indexWhereUniqueInput
  }


  /**
   * chii_crt_subject_index base type for findFirst actions
   */
  export type chii_crt_subject_indexFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_crt_subject_index
     * 
    **/
    select?: chii_crt_subject_indexSelect | null
    /**
     * Filter, which chii_crt_subject_index to fetch.
     * 
    **/
    where?: chii_crt_subject_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_crt_subject_indices to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_crt_subject_indexOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_crt_subject_indices.
     * 
    **/
    cursor?: chii_crt_subject_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_crt_subject_indices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_crt_subject_indices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_crt_subject_indices.
     * 
    **/
    distinct?: Enumerable<Chii_crt_subject_indexScalarFieldEnum>
  }

  /**
   * chii_crt_subject_index: findFirst
   */
  export interface chii_crt_subject_indexFindFirstArgs extends chii_crt_subject_indexFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_crt_subject_index findFirstOrThrow
   */
  export type chii_crt_subject_indexFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_subject_index
     * 
    **/
    select?: chii_crt_subject_indexSelect | null
    /**
     * Filter, which chii_crt_subject_index to fetch.
     * 
    **/
    where?: chii_crt_subject_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_crt_subject_indices to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_crt_subject_indexOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_crt_subject_indices.
     * 
    **/
    cursor?: chii_crt_subject_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_crt_subject_indices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_crt_subject_indices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_crt_subject_indices.
     * 
    **/
    distinct?: Enumerable<Chii_crt_subject_indexScalarFieldEnum>
  }


  /**
   * chii_crt_subject_index findMany
   */
  export type chii_crt_subject_indexFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_subject_index
     * 
    **/
    select?: chii_crt_subject_indexSelect | null
    /**
     * Filter, which chii_crt_subject_indices to fetch.
     * 
    **/
    where?: chii_crt_subject_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_crt_subject_indices to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_crt_subject_indexOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_crt_subject_indices.
     * 
    **/
    cursor?: chii_crt_subject_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_crt_subject_indices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_crt_subject_indices.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_crt_subject_indexScalarFieldEnum>
  }


  /**
   * chii_crt_subject_index create
   */
  export type chii_crt_subject_indexCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_subject_index
     * 
    **/
    select?: chii_crt_subject_indexSelect | null
    /**
     * The data needed to create a chii_crt_subject_index.
     * 
    **/
    data: XOR<chii_crt_subject_indexCreateInput, chii_crt_subject_indexUncheckedCreateInput>
  }


  /**
   * chii_crt_subject_index createMany
   */
  export type chii_crt_subject_indexCreateManyArgs = {
    /**
     * The data used to create many chii_crt_subject_indices.
     * 
    **/
    data: Enumerable<chii_crt_subject_indexCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_crt_subject_index update
   */
  export type chii_crt_subject_indexUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_subject_index
     * 
    **/
    select?: chii_crt_subject_indexSelect | null
    /**
     * The data needed to update a chii_crt_subject_index.
     * 
    **/
    data: XOR<chii_crt_subject_indexUpdateInput, chii_crt_subject_indexUncheckedUpdateInput>
    /**
     * Choose, which chii_crt_subject_index to update.
     * 
    **/
    where: chii_crt_subject_indexWhereUniqueInput
  }


  /**
   * chii_crt_subject_index updateMany
   */
  export type chii_crt_subject_indexUpdateManyArgs = {
    /**
     * The data used to update chii_crt_subject_indices.
     * 
    **/
    data: XOR<chii_crt_subject_indexUpdateManyMutationInput, chii_crt_subject_indexUncheckedUpdateManyInput>
    /**
     * Filter which chii_crt_subject_indices to update
     * 
    **/
    where?: chii_crt_subject_indexWhereInput
  }


  /**
   * chii_crt_subject_index upsert
   */
  export type chii_crt_subject_indexUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_subject_index
     * 
    **/
    select?: chii_crt_subject_indexSelect | null
    /**
     * The filter to search for the chii_crt_subject_index to update in case it exists.
     * 
    **/
    where: chii_crt_subject_indexWhereUniqueInput
    /**
     * In case the chii_crt_subject_index found by the `where` argument doesn't exist, create a new chii_crt_subject_index with this data.
     * 
    **/
    create: XOR<chii_crt_subject_indexCreateInput, chii_crt_subject_indexUncheckedCreateInput>
    /**
     * In case the chii_crt_subject_index was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_crt_subject_indexUpdateInput, chii_crt_subject_indexUncheckedUpdateInput>
  }


  /**
   * chii_crt_subject_index delete
   */
  export type chii_crt_subject_indexDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_subject_index
     * 
    **/
    select?: chii_crt_subject_indexSelect | null
    /**
     * Filter which chii_crt_subject_index to delete.
     * 
    **/
    where: chii_crt_subject_indexWhereUniqueInput
  }


  /**
   * chii_crt_subject_index deleteMany
   */
  export type chii_crt_subject_indexDeleteManyArgs = {
    /**
     * Filter which chii_crt_subject_indices to delete
     * 
    **/
    where?: chii_crt_subject_indexWhereInput
  }


  /**
   * chii_crt_subject_index without action
   */
  export type chii_crt_subject_indexArgs = {
    /**
     * Select specific fields to fetch from the chii_crt_subject_index
     * 
    **/
    select?: chii_crt_subject_indexSelect | null
  }



  /**
   * Model chii_ep_comments
   */


  export type AggregateChii_ep_comments = {
    _count: Chii_ep_commentsCountAggregateOutputType | null
    _avg: Chii_ep_commentsAvgAggregateOutputType | null
    _sum: Chii_ep_commentsSumAggregateOutputType | null
    _min: Chii_ep_commentsMinAggregateOutputType | null
    _max: Chii_ep_commentsMaxAggregateOutputType | null
  }

  export type Chii_ep_commentsAvgAggregateOutputType = {
    ep_pst_id: number | null
    ep_pst_mid: number | null
    ep_pst_uid: number | null
    ep_pst_related: number | null
    ep_pst_dateline: number | null
  }

  export type Chii_ep_commentsSumAggregateOutputType = {
    ep_pst_id: number | null
    ep_pst_mid: number | null
    ep_pst_uid: number | null
    ep_pst_related: number | null
    ep_pst_dateline: number | null
  }

  export type Chii_ep_commentsMinAggregateOutputType = {
    ep_pst_id: number | null
    ep_pst_mid: number | null
    ep_pst_uid: number | null
    ep_pst_related: number | null
    ep_pst_dateline: number | null
    ep_pst_content: string | null
  }

  export type Chii_ep_commentsMaxAggregateOutputType = {
    ep_pst_id: number | null
    ep_pst_mid: number | null
    ep_pst_uid: number | null
    ep_pst_related: number | null
    ep_pst_dateline: number | null
    ep_pst_content: string | null
  }

  export type Chii_ep_commentsCountAggregateOutputType = {
    ep_pst_id: number
    ep_pst_mid: number
    ep_pst_uid: number
    ep_pst_related: number
    ep_pst_dateline: number
    ep_pst_content: number
    _all: number
  }


  export type Chii_ep_commentsAvgAggregateInputType = {
    ep_pst_id?: true
    ep_pst_mid?: true
    ep_pst_uid?: true
    ep_pst_related?: true
    ep_pst_dateline?: true
  }

  export type Chii_ep_commentsSumAggregateInputType = {
    ep_pst_id?: true
    ep_pst_mid?: true
    ep_pst_uid?: true
    ep_pst_related?: true
    ep_pst_dateline?: true
  }

  export type Chii_ep_commentsMinAggregateInputType = {
    ep_pst_id?: true
    ep_pst_mid?: true
    ep_pst_uid?: true
    ep_pst_related?: true
    ep_pst_dateline?: true
    ep_pst_content?: true
  }

  export type Chii_ep_commentsMaxAggregateInputType = {
    ep_pst_id?: true
    ep_pst_mid?: true
    ep_pst_uid?: true
    ep_pst_related?: true
    ep_pst_dateline?: true
    ep_pst_content?: true
  }

  export type Chii_ep_commentsCountAggregateInputType = {
    ep_pst_id?: true
    ep_pst_mid?: true
    ep_pst_uid?: true
    ep_pst_related?: true
    ep_pst_dateline?: true
    ep_pst_content?: true
    _all?: true
  }

  export type Chii_ep_commentsAggregateArgs = {
    /**
     * Filter which chii_ep_comments to aggregate.
     * 
    **/
    where?: chii_ep_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_ep_comments to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_ep_commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_ep_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_ep_comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_ep_comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_ep_comments
    **/
    _count?: true | Chii_ep_commentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_ep_commentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_ep_commentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_ep_commentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_ep_commentsMaxAggregateInputType
  }

  export type GetChii_ep_commentsAggregateType<T extends Chii_ep_commentsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_ep_comments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_ep_comments[P]>
      : GetScalarType<T[P], AggregateChii_ep_comments[P]>
  }




  export type Chii_ep_commentsGroupByArgs = {
    where?: chii_ep_commentsWhereInput
    orderBy?: Enumerable<chii_ep_commentsOrderByWithAggregationInput>
    by: Array<Chii_ep_commentsScalarFieldEnum>
    having?: chii_ep_commentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_ep_commentsCountAggregateInputType | true
    _avg?: Chii_ep_commentsAvgAggregateInputType
    _sum?: Chii_ep_commentsSumAggregateInputType
    _min?: Chii_ep_commentsMinAggregateInputType
    _max?: Chii_ep_commentsMaxAggregateInputType
  }


  export type Chii_ep_commentsGroupByOutputType = {
    ep_pst_id: number
    ep_pst_mid: number
    ep_pst_uid: number
    ep_pst_related: number
    ep_pst_dateline: number
    ep_pst_content: string
    _count: Chii_ep_commentsCountAggregateOutputType | null
    _avg: Chii_ep_commentsAvgAggregateOutputType | null
    _sum: Chii_ep_commentsSumAggregateOutputType | null
    _min: Chii_ep_commentsMinAggregateOutputType | null
    _max: Chii_ep_commentsMaxAggregateOutputType | null
  }

  type GetChii_ep_commentsGroupByPayload<T extends Chii_ep_commentsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_ep_commentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_ep_commentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_ep_commentsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_ep_commentsGroupByOutputType[P]>
        }
      >
    >


  export type chii_ep_commentsSelect = {
    ep_pst_id?: boolean
    ep_pst_mid?: boolean
    ep_pst_uid?: boolean
    ep_pst_related?: boolean
    ep_pst_dateline?: boolean
    ep_pst_content?: boolean
  }


  export type chii_ep_commentsGetPayload<S extends boolean | null | undefined | chii_ep_commentsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_ep_comments :
    S extends undefined ? never :
    S extends { include: any } & (chii_ep_commentsArgs | chii_ep_commentsFindManyArgs)
    ? chii_ep_comments 
    : S extends { select: any } & (chii_ep_commentsArgs | chii_ep_commentsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_ep_comments ? chii_ep_comments[P] : never
  } 
      : chii_ep_comments


  type chii_ep_commentsCountArgs = Merge<
    Omit<chii_ep_commentsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_ep_commentsCountAggregateInputType | true
    }
  >

  export interface chii_ep_commentsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_ep_comments that matches the filter.
     * @param {chii_ep_commentsFindUniqueArgs} args - Arguments to find a Chii_ep_comments
     * @example
     * // Get one Chii_ep_comments
     * const chii_ep_comments = await prisma.chii_ep_comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_ep_commentsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_ep_commentsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_ep_comments'> extends True ? Prisma__chii_ep_commentsClient<chii_ep_commentsGetPayload<T>> : Prisma__chii_ep_commentsClient<chii_ep_commentsGetPayload<T> | null, null>

    /**
     * Find one Chii_ep_comments that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_ep_commentsFindUniqueOrThrowArgs} args - Arguments to find a Chii_ep_comments
     * @example
     * // Get one Chii_ep_comments
     * const chii_ep_comments = await prisma.chii_ep_comments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_ep_commentsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_ep_commentsFindUniqueOrThrowArgs>
    ): Prisma__chii_ep_commentsClient<chii_ep_commentsGetPayload<T>>

    /**
     * Find the first Chii_ep_comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_ep_commentsFindFirstArgs} args - Arguments to find a Chii_ep_comments
     * @example
     * // Get one Chii_ep_comments
     * const chii_ep_comments = await prisma.chii_ep_comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_ep_commentsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_ep_commentsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_ep_comments'> extends True ? Prisma__chii_ep_commentsClient<chii_ep_commentsGetPayload<T>> : Prisma__chii_ep_commentsClient<chii_ep_commentsGetPayload<T> | null, null>

    /**
     * Find the first Chii_ep_comments that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_ep_commentsFindFirstOrThrowArgs} args - Arguments to find a Chii_ep_comments
     * @example
     * // Get one Chii_ep_comments
     * const chii_ep_comments = await prisma.chii_ep_comments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_ep_commentsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_ep_commentsFindFirstOrThrowArgs>
    ): Prisma__chii_ep_commentsClient<chii_ep_commentsGetPayload<T>>

    /**
     * Find zero or more Chii_ep_comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_ep_commentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_ep_comments
     * const chii_ep_comments = await prisma.chii_ep_comments.findMany()
     * 
     * // Get first 10 Chii_ep_comments
     * const chii_ep_comments = await prisma.chii_ep_comments.findMany({ take: 10 })
     * 
     * // Only select the `ep_pst_id`
     * const chii_ep_commentsWithEp_pst_idOnly = await prisma.chii_ep_comments.findMany({ select: { ep_pst_id: true } })
     * 
    **/
    findMany<T extends chii_ep_commentsFindManyArgs>(
      args?: SelectSubset<T, chii_ep_commentsFindManyArgs>
    ): PrismaPromise<Array<chii_ep_commentsGetPayload<T>>>

    /**
     * Create a Chii_ep_comments.
     * @param {chii_ep_commentsCreateArgs} args - Arguments to create a Chii_ep_comments.
     * @example
     * // Create one Chii_ep_comments
     * const Chii_ep_comments = await prisma.chii_ep_comments.create({
     *   data: {
     *     // ... data to create a Chii_ep_comments
     *   }
     * })
     * 
    **/
    create<T extends chii_ep_commentsCreateArgs>(
      args: SelectSubset<T, chii_ep_commentsCreateArgs>
    ): Prisma__chii_ep_commentsClient<chii_ep_commentsGetPayload<T>>

    /**
     * Create many Chii_ep_comments.
     *     @param {chii_ep_commentsCreateManyArgs} args - Arguments to create many Chii_ep_comments.
     *     @example
     *     // Create many Chii_ep_comments
     *     const chii_ep_comments = await prisma.chii_ep_comments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_ep_commentsCreateManyArgs>(
      args?: SelectSubset<T, chii_ep_commentsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_ep_comments.
     * @param {chii_ep_commentsDeleteArgs} args - Arguments to delete one Chii_ep_comments.
     * @example
     * // Delete one Chii_ep_comments
     * const Chii_ep_comments = await prisma.chii_ep_comments.delete({
     *   where: {
     *     // ... filter to delete one Chii_ep_comments
     *   }
     * })
     * 
    **/
    delete<T extends chii_ep_commentsDeleteArgs>(
      args: SelectSubset<T, chii_ep_commentsDeleteArgs>
    ): Prisma__chii_ep_commentsClient<chii_ep_commentsGetPayload<T>>

    /**
     * Update one Chii_ep_comments.
     * @param {chii_ep_commentsUpdateArgs} args - Arguments to update one Chii_ep_comments.
     * @example
     * // Update one Chii_ep_comments
     * const chii_ep_comments = await prisma.chii_ep_comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_ep_commentsUpdateArgs>(
      args: SelectSubset<T, chii_ep_commentsUpdateArgs>
    ): Prisma__chii_ep_commentsClient<chii_ep_commentsGetPayload<T>>

    /**
     * Delete zero or more Chii_ep_comments.
     * @param {chii_ep_commentsDeleteManyArgs} args - Arguments to filter Chii_ep_comments to delete.
     * @example
     * // Delete a few Chii_ep_comments
     * const { count } = await prisma.chii_ep_comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_ep_commentsDeleteManyArgs>(
      args?: SelectSubset<T, chii_ep_commentsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_ep_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_ep_commentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_ep_comments
     * const chii_ep_comments = await prisma.chii_ep_comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_ep_commentsUpdateManyArgs>(
      args: SelectSubset<T, chii_ep_commentsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_ep_comments.
     * @param {chii_ep_commentsUpsertArgs} args - Arguments to update or create a Chii_ep_comments.
     * @example
     * // Update or create a Chii_ep_comments
     * const chii_ep_comments = await prisma.chii_ep_comments.upsert({
     *   create: {
     *     // ... data to create a Chii_ep_comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_ep_comments we want to update
     *   }
     * })
    **/
    upsert<T extends chii_ep_commentsUpsertArgs>(
      args: SelectSubset<T, chii_ep_commentsUpsertArgs>
    ): Prisma__chii_ep_commentsClient<chii_ep_commentsGetPayload<T>>

    /**
     * Count the number of Chii_ep_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_ep_commentsCountArgs} args - Arguments to filter Chii_ep_comments to count.
     * @example
     * // Count the number of Chii_ep_comments
     * const count = await prisma.chii_ep_comments.count({
     *   where: {
     *     // ... the filter for the Chii_ep_comments we want to count
     *   }
     * })
    **/
    count<T extends chii_ep_commentsCountArgs>(
      args?: Subset<T, chii_ep_commentsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_ep_commentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_ep_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_ep_commentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_ep_commentsAggregateArgs>(args: Subset<T, Chii_ep_commentsAggregateArgs>): PrismaPromise<GetChii_ep_commentsAggregateType<T>>

    /**
     * Group by Chii_ep_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_ep_commentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_ep_commentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_ep_commentsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_ep_commentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_ep_commentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_ep_commentsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_ep_comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_ep_commentsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_ep_comments base type for findUnique actions
   */
  export type chii_ep_commentsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_ep_comments
     * 
    **/
    select?: chii_ep_commentsSelect | null
    /**
     * Filter, which chii_ep_comments to fetch.
     * 
    **/
    where: chii_ep_commentsWhereUniqueInput
  }

  /**
   * chii_ep_comments: findUnique
   */
  export interface chii_ep_commentsFindUniqueArgs extends chii_ep_commentsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_ep_comments findUniqueOrThrow
   */
  export type chii_ep_commentsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_comments
     * 
    **/
    select?: chii_ep_commentsSelect | null
    /**
     * Filter, which chii_ep_comments to fetch.
     * 
    **/
    where: chii_ep_commentsWhereUniqueInput
  }


  /**
   * chii_ep_comments base type for findFirst actions
   */
  export type chii_ep_commentsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_ep_comments
     * 
    **/
    select?: chii_ep_commentsSelect | null
    /**
     * Filter, which chii_ep_comments to fetch.
     * 
    **/
    where?: chii_ep_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_ep_comments to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_ep_commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_ep_comments.
     * 
    **/
    cursor?: chii_ep_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_ep_comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_ep_comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_ep_comments.
     * 
    **/
    distinct?: Enumerable<Chii_ep_commentsScalarFieldEnum>
  }

  /**
   * chii_ep_comments: findFirst
   */
  export interface chii_ep_commentsFindFirstArgs extends chii_ep_commentsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_ep_comments findFirstOrThrow
   */
  export type chii_ep_commentsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_comments
     * 
    **/
    select?: chii_ep_commentsSelect | null
    /**
     * Filter, which chii_ep_comments to fetch.
     * 
    **/
    where?: chii_ep_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_ep_comments to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_ep_commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_ep_comments.
     * 
    **/
    cursor?: chii_ep_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_ep_comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_ep_comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_ep_comments.
     * 
    **/
    distinct?: Enumerable<Chii_ep_commentsScalarFieldEnum>
  }


  /**
   * chii_ep_comments findMany
   */
  export type chii_ep_commentsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_comments
     * 
    **/
    select?: chii_ep_commentsSelect | null
    /**
     * Filter, which chii_ep_comments to fetch.
     * 
    **/
    where?: chii_ep_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_ep_comments to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_ep_commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_ep_comments.
     * 
    **/
    cursor?: chii_ep_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_ep_comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_ep_comments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_ep_commentsScalarFieldEnum>
  }


  /**
   * chii_ep_comments create
   */
  export type chii_ep_commentsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_comments
     * 
    **/
    select?: chii_ep_commentsSelect | null
    /**
     * The data needed to create a chii_ep_comments.
     * 
    **/
    data: XOR<chii_ep_commentsCreateInput, chii_ep_commentsUncheckedCreateInput>
  }


  /**
   * chii_ep_comments createMany
   */
  export type chii_ep_commentsCreateManyArgs = {
    /**
     * The data used to create many chii_ep_comments.
     * 
    **/
    data: Enumerable<chii_ep_commentsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_ep_comments update
   */
  export type chii_ep_commentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_comments
     * 
    **/
    select?: chii_ep_commentsSelect | null
    /**
     * The data needed to update a chii_ep_comments.
     * 
    **/
    data: XOR<chii_ep_commentsUpdateInput, chii_ep_commentsUncheckedUpdateInput>
    /**
     * Choose, which chii_ep_comments to update.
     * 
    **/
    where: chii_ep_commentsWhereUniqueInput
  }


  /**
   * chii_ep_comments updateMany
   */
  export type chii_ep_commentsUpdateManyArgs = {
    /**
     * The data used to update chii_ep_comments.
     * 
    **/
    data: XOR<chii_ep_commentsUpdateManyMutationInput, chii_ep_commentsUncheckedUpdateManyInput>
    /**
     * Filter which chii_ep_comments to update
     * 
    **/
    where?: chii_ep_commentsWhereInput
  }


  /**
   * chii_ep_comments upsert
   */
  export type chii_ep_commentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_comments
     * 
    **/
    select?: chii_ep_commentsSelect | null
    /**
     * The filter to search for the chii_ep_comments to update in case it exists.
     * 
    **/
    where: chii_ep_commentsWhereUniqueInput
    /**
     * In case the chii_ep_comments found by the `where` argument doesn't exist, create a new chii_ep_comments with this data.
     * 
    **/
    create: XOR<chii_ep_commentsCreateInput, chii_ep_commentsUncheckedCreateInput>
    /**
     * In case the chii_ep_comments was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_ep_commentsUpdateInput, chii_ep_commentsUncheckedUpdateInput>
  }


  /**
   * chii_ep_comments delete
   */
  export type chii_ep_commentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_comments
     * 
    **/
    select?: chii_ep_commentsSelect | null
    /**
     * Filter which chii_ep_comments to delete.
     * 
    **/
    where: chii_ep_commentsWhereUniqueInput
  }


  /**
   * chii_ep_comments deleteMany
   */
  export type chii_ep_commentsDeleteManyArgs = {
    /**
     * Filter which chii_ep_comments to delete
     * 
    **/
    where?: chii_ep_commentsWhereInput
  }


  /**
   * chii_ep_comments without action
   */
  export type chii_ep_commentsArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_comments
     * 
    **/
    select?: chii_ep_commentsSelect | null
  }



  /**
   * Model chii_ep_revisions
   */


  export type AggregateChii_ep_revisions = {
    _count: Chii_ep_revisionsCountAggregateOutputType | null
    _avg: Chii_ep_revisionsAvgAggregateOutputType | null
    _sum: Chii_ep_revisionsSumAggregateOutputType | null
    _min: Chii_ep_revisionsMinAggregateOutputType | null
    _max: Chii_ep_revisionsMaxAggregateOutputType | null
  }

  export type Chii_ep_revisionsAvgAggregateOutputType = {
    ep_rev_id: number | null
    rev_sid: number | null
    rev_creator: number | null
    rev_dateline: number | null
  }

  export type Chii_ep_revisionsSumAggregateOutputType = {
    ep_rev_id: number | null
    rev_sid: number | null
    rev_creator: number | null
    rev_dateline: number | null
  }

  export type Chii_ep_revisionsMinAggregateOutputType = {
    ep_rev_id: number | null
    rev_sid: number | null
    rev_eids: string | null
    rev_ep_infobox: string | null
    rev_creator: number | null
    rev_version: boolean | null
    rev_dateline: number | null
    rev_edit_summary: string | null
  }

  export type Chii_ep_revisionsMaxAggregateOutputType = {
    ep_rev_id: number | null
    rev_sid: number | null
    rev_eids: string | null
    rev_ep_infobox: string | null
    rev_creator: number | null
    rev_version: boolean | null
    rev_dateline: number | null
    rev_edit_summary: string | null
  }

  export type Chii_ep_revisionsCountAggregateOutputType = {
    ep_rev_id: number
    rev_sid: number
    rev_eids: number
    rev_ep_infobox: number
    rev_creator: number
    rev_version: number
    rev_dateline: number
    rev_edit_summary: number
    _all: number
  }


  export type Chii_ep_revisionsAvgAggregateInputType = {
    ep_rev_id?: true
    rev_sid?: true
    rev_creator?: true
    rev_dateline?: true
  }

  export type Chii_ep_revisionsSumAggregateInputType = {
    ep_rev_id?: true
    rev_sid?: true
    rev_creator?: true
    rev_dateline?: true
  }

  export type Chii_ep_revisionsMinAggregateInputType = {
    ep_rev_id?: true
    rev_sid?: true
    rev_eids?: true
    rev_ep_infobox?: true
    rev_creator?: true
    rev_version?: true
    rev_dateline?: true
    rev_edit_summary?: true
  }

  export type Chii_ep_revisionsMaxAggregateInputType = {
    ep_rev_id?: true
    rev_sid?: true
    rev_eids?: true
    rev_ep_infobox?: true
    rev_creator?: true
    rev_version?: true
    rev_dateline?: true
    rev_edit_summary?: true
  }

  export type Chii_ep_revisionsCountAggregateInputType = {
    ep_rev_id?: true
    rev_sid?: true
    rev_eids?: true
    rev_ep_infobox?: true
    rev_creator?: true
    rev_version?: true
    rev_dateline?: true
    rev_edit_summary?: true
    _all?: true
  }

  export type Chii_ep_revisionsAggregateArgs = {
    /**
     * Filter which chii_ep_revisions to aggregate.
     * 
    **/
    where?: chii_ep_revisionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_ep_revisions to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_ep_revisionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_ep_revisionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_ep_revisions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_ep_revisions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_ep_revisions
    **/
    _count?: true | Chii_ep_revisionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_ep_revisionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_ep_revisionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_ep_revisionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_ep_revisionsMaxAggregateInputType
  }

  export type GetChii_ep_revisionsAggregateType<T extends Chii_ep_revisionsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_ep_revisions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_ep_revisions[P]>
      : GetScalarType<T[P], AggregateChii_ep_revisions[P]>
  }




  export type Chii_ep_revisionsGroupByArgs = {
    where?: chii_ep_revisionsWhereInput
    orderBy?: Enumerable<chii_ep_revisionsOrderByWithAggregationInput>
    by: Array<Chii_ep_revisionsScalarFieldEnum>
    having?: chii_ep_revisionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_ep_revisionsCountAggregateInputType | true
    _avg?: Chii_ep_revisionsAvgAggregateInputType
    _sum?: Chii_ep_revisionsSumAggregateInputType
    _min?: Chii_ep_revisionsMinAggregateInputType
    _max?: Chii_ep_revisionsMaxAggregateInputType
  }


  export type Chii_ep_revisionsGroupByOutputType = {
    ep_rev_id: number
    rev_sid: number
    rev_eids: string
    rev_ep_infobox: string
    rev_creator: number
    rev_version: boolean
    rev_dateline: number
    rev_edit_summary: string
    _count: Chii_ep_revisionsCountAggregateOutputType | null
    _avg: Chii_ep_revisionsAvgAggregateOutputType | null
    _sum: Chii_ep_revisionsSumAggregateOutputType | null
    _min: Chii_ep_revisionsMinAggregateOutputType | null
    _max: Chii_ep_revisionsMaxAggregateOutputType | null
  }

  type GetChii_ep_revisionsGroupByPayload<T extends Chii_ep_revisionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_ep_revisionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_ep_revisionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_ep_revisionsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_ep_revisionsGroupByOutputType[P]>
        }
      >
    >


  export type chii_ep_revisionsSelect = {
    ep_rev_id?: boolean
    rev_sid?: boolean
    rev_eids?: boolean
    rev_ep_infobox?: boolean
    rev_creator?: boolean
    rev_version?: boolean
    rev_dateline?: boolean
    rev_edit_summary?: boolean
  }


  export type chii_ep_revisionsGetPayload<S extends boolean | null | undefined | chii_ep_revisionsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_ep_revisions :
    S extends undefined ? never :
    S extends { include: any } & (chii_ep_revisionsArgs | chii_ep_revisionsFindManyArgs)
    ? chii_ep_revisions 
    : S extends { select: any } & (chii_ep_revisionsArgs | chii_ep_revisionsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_ep_revisions ? chii_ep_revisions[P] : never
  } 
      : chii_ep_revisions


  type chii_ep_revisionsCountArgs = Merge<
    Omit<chii_ep_revisionsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_ep_revisionsCountAggregateInputType | true
    }
  >

  export interface chii_ep_revisionsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_ep_revisions that matches the filter.
     * @param {chii_ep_revisionsFindUniqueArgs} args - Arguments to find a Chii_ep_revisions
     * @example
     * // Get one Chii_ep_revisions
     * const chii_ep_revisions = await prisma.chii_ep_revisions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_ep_revisionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_ep_revisionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_ep_revisions'> extends True ? Prisma__chii_ep_revisionsClient<chii_ep_revisionsGetPayload<T>> : Prisma__chii_ep_revisionsClient<chii_ep_revisionsGetPayload<T> | null, null>

    /**
     * Find one Chii_ep_revisions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_ep_revisionsFindUniqueOrThrowArgs} args - Arguments to find a Chii_ep_revisions
     * @example
     * // Get one Chii_ep_revisions
     * const chii_ep_revisions = await prisma.chii_ep_revisions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_ep_revisionsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_ep_revisionsFindUniqueOrThrowArgs>
    ): Prisma__chii_ep_revisionsClient<chii_ep_revisionsGetPayload<T>>

    /**
     * Find the first Chii_ep_revisions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_ep_revisionsFindFirstArgs} args - Arguments to find a Chii_ep_revisions
     * @example
     * // Get one Chii_ep_revisions
     * const chii_ep_revisions = await prisma.chii_ep_revisions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_ep_revisionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_ep_revisionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_ep_revisions'> extends True ? Prisma__chii_ep_revisionsClient<chii_ep_revisionsGetPayload<T>> : Prisma__chii_ep_revisionsClient<chii_ep_revisionsGetPayload<T> | null, null>

    /**
     * Find the first Chii_ep_revisions that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_ep_revisionsFindFirstOrThrowArgs} args - Arguments to find a Chii_ep_revisions
     * @example
     * // Get one Chii_ep_revisions
     * const chii_ep_revisions = await prisma.chii_ep_revisions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_ep_revisionsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_ep_revisionsFindFirstOrThrowArgs>
    ): Prisma__chii_ep_revisionsClient<chii_ep_revisionsGetPayload<T>>

    /**
     * Find zero or more Chii_ep_revisions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_ep_revisionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_ep_revisions
     * const chii_ep_revisions = await prisma.chii_ep_revisions.findMany()
     * 
     * // Get first 10 Chii_ep_revisions
     * const chii_ep_revisions = await prisma.chii_ep_revisions.findMany({ take: 10 })
     * 
     * // Only select the `ep_rev_id`
     * const chii_ep_revisionsWithEp_rev_idOnly = await prisma.chii_ep_revisions.findMany({ select: { ep_rev_id: true } })
     * 
    **/
    findMany<T extends chii_ep_revisionsFindManyArgs>(
      args?: SelectSubset<T, chii_ep_revisionsFindManyArgs>
    ): PrismaPromise<Array<chii_ep_revisionsGetPayload<T>>>

    /**
     * Create a Chii_ep_revisions.
     * @param {chii_ep_revisionsCreateArgs} args - Arguments to create a Chii_ep_revisions.
     * @example
     * // Create one Chii_ep_revisions
     * const Chii_ep_revisions = await prisma.chii_ep_revisions.create({
     *   data: {
     *     // ... data to create a Chii_ep_revisions
     *   }
     * })
     * 
    **/
    create<T extends chii_ep_revisionsCreateArgs>(
      args: SelectSubset<T, chii_ep_revisionsCreateArgs>
    ): Prisma__chii_ep_revisionsClient<chii_ep_revisionsGetPayload<T>>

    /**
     * Create many Chii_ep_revisions.
     *     @param {chii_ep_revisionsCreateManyArgs} args - Arguments to create many Chii_ep_revisions.
     *     @example
     *     // Create many Chii_ep_revisions
     *     const chii_ep_revisions = await prisma.chii_ep_revisions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_ep_revisionsCreateManyArgs>(
      args?: SelectSubset<T, chii_ep_revisionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_ep_revisions.
     * @param {chii_ep_revisionsDeleteArgs} args - Arguments to delete one Chii_ep_revisions.
     * @example
     * // Delete one Chii_ep_revisions
     * const Chii_ep_revisions = await prisma.chii_ep_revisions.delete({
     *   where: {
     *     // ... filter to delete one Chii_ep_revisions
     *   }
     * })
     * 
    **/
    delete<T extends chii_ep_revisionsDeleteArgs>(
      args: SelectSubset<T, chii_ep_revisionsDeleteArgs>
    ): Prisma__chii_ep_revisionsClient<chii_ep_revisionsGetPayload<T>>

    /**
     * Update one Chii_ep_revisions.
     * @param {chii_ep_revisionsUpdateArgs} args - Arguments to update one Chii_ep_revisions.
     * @example
     * // Update one Chii_ep_revisions
     * const chii_ep_revisions = await prisma.chii_ep_revisions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_ep_revisionsUpdateArgs>(
      args: SelectSubset<T, chii_ep_revisionsUpdateArgs>
    ): Prisma__chii_ep_revisionsClient<chii_ep_revisionsGetPayload<T>>

    /**
     * Delete zero or more Chii_ep_revisions.
     * @param {chii_ep_revisionsDeleteManyArgs} args - Arguments to filter Chii_ep_revisions to delete.
     * @example
     * // Delete a few Chii_ep_revisions
     * const { count } = await prisma.chii_ep_revisions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_ep_revisionsDeleteManyArgs>(
      args?: SelectSubset<T, chii_ep_revisionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_ep_revisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_ep_revisionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_ep_revisions
     * const chii_ep_revisions = await prisma.chii_ep_revisions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_ep_revisionsUpdateManyArgs>(
      args: SelectSubset<T, chii_ep_revisionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_ep_revisions.
     * @param {chii_ep_revisionsUpsertArgs} args - Arguments to update or create a Chii_ep_revisions.
     * @example
     * // Update or create a Chii_ep_revisions
     * const chii_ep_revisions = await prisma.chii_ep_revisions.upsert({
     *   create: {
     *     // ... data to create a Chii_ep_revisions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_ep_revisions we want to update
     *   }
     * })
    **/
    upsert<T extends chii_ep_revisionsUpsertArgs>(
      args: SelectSubset<T, chii_ep_revisionsUpsertArgs>
    ): Prisma__chii_ep_revisionsClient<chii_ep_revisionsGetPayload<T>>

    /**
     * Count the number of Chii_ep_revisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_ep_revisionsCountArgs} args - Arguments to filter Chii_ep_revisions to count.
     * @example
     * // Count the number of Chii_ep_revisions
     * const count = await prisma.chii_ep_revisions.count({
     *   where: {
     *     // ... the filter for the Chii_ep_revisions we want to count
     *   }
     * })
    **/
    count<T extends chii_ep_revisionsCountArgs>(
      args?: Subset<T, chii_ep_revisionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_ep_revisionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_ep_revisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_ep_revisionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_ep_revisionsAggregateArgs>(args: Subset<T, Chii_ep_revisionsAggregateArgs>): PrismaPromise<GetChii_ep_revisionsAggregateType<T>>

    /**
     * Group by Chii_ep_revisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_ep_revisionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_ep_revisionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_ep_revisionsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_ep_revisionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_ep_revisionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_ep_revisionsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_ep_revisions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_ep_revisionsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_ep_revisions base type for findUnique actions
   */
  export type chii_ep_revisionsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_ep_revisions
     * 
    **/
    select?: chii_ep_revisionsSelect | null
    /**
     * Filter, which chii_ep_revisions to fetch.
     * 
    **/
    where: chii_ep_revisionsWhereUniqueInput
  }

  /**
   * chii_ep_revisions: findUnique
   */
  export interface chii_ep_revisionsFindUniqueArgs extends chii_ep_revisionsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_ep_revisions findUniqueOrThrow
   */
  export type chii_ep_revisionsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_revisions
     * 
    **/
    select?: chii_ep_revisionsSelect | null
    /**
     * Filter, which chii_ep_revisions to fetch.
     * 
    **/
    where: chii_ep_revisionsWhereUniqueInput
  }


  /**
   * chii_ep_revisions base type for findFirst actions
   */
  export type chii_ep_revisionsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_ep_revisions
     * 
    **/
    select?: chii_ep_revisionsSelect | null
    /**
     * Filter, which chii_ep_revisions to fetch.
     * 
    **/
    where?: chii_ep_revisionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_ep_revisions to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_ep_revisionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_ep_revisions.
     * 
    **/
    cursor?: chii_ep_revisionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_ep_revisions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_ep_revisions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_ep_revisions.
     * 
    **/
    distinct?: Enumerable<Chii_ep_revisionsScalarFieldEnum>
  }

  /**
   * chii_ep_revisions: findFirst
   */
  export interface chii_ep_revisionsFindFirstArgs extends chii_ep_revisionsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_ep_revisions findFirstOrThrow
   */
  export type chii_ep_revisionsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_revisions
     * 
    **/
    select?: chii_ep_revisionsSelect | null
    /**
     * Filter, which chii_ep_revisions to fetch.
     * 
    **/
    where?: chii_ep_revisionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_ep_revisions to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_ep_revisionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_ep_revisions.
     * 
    **/
    cursor?: chii_ep_revisionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_ep_revisions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_ep_revisions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_ep_revisions.
     * 
    **/
    distinct?: Enumerable<Chii_ep_revisionsScalarFieldEnum>
  }


  /**
   * chii_ep_revisions findMany
   */
  export type chii_ep_revisionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_revisions
     * 
    **/
    select?: chii_ep_revisionsSelect | null
    /**
     * Filter, which chii_ep_revisions to fetch.
     * 
    **/
    where?: chii_ep_revisionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_ep_revisions to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_ep_revisionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_ep_revisions.
     * 
    **/
    cursor?: chii_ep_revisionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_ep_revisions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_ep_revisions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_ep_revisionsScalarFieldEnum>
  }


  /**
   * chii_ep_revisions create
   */
  export type chii_ep_revisionsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_revisions
     * 
    **/
    select?: chii_ep_revisionsSelect | null
    /**
     * The data needed to create a chii_ep_revisions.
     * 
    **/
    data: XOR<chii_ep_revisionsCreateInput, chii_ep_revisionsUncheckedCreateInput>
  }


  /**
   * chii_ep_revisions createMany
   */
  export type chii_ep_revisionsCreateManyArgs = {
    /**
     * The data used to create many chii_ep_revisions.
     * 
    **/
    data: Enumerable<chii_ep_revisionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_ep_revisions update
   */
  export type chii_ep_revisionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_revisions
     * 
    **/
    select?: chii_ep_revisionsSelect | null
    /**
     * The data needed to update a chii_ep_revisions.
     * 
    **/
    data: XOR<chii_ep_revisionsUpdateInput, chii_ep_revisionsUncheckedUpdateInput>
    /**
     * Choose, which chii_ep_revisions to update.
     * 
    **/
    where: chii_ep_revisionsWhereUniqueInput
  }


  /**
   * chii_ep_revisions updateMany
   */
  export type chii_ep_revisionsUpdateManyArgs = {
    /**
     * The data used to update chii_ep_revisions.
     * 
    **/
    data: XOR<chii_ep_revisionsUpdateManyMutationInput, chii_ep_revisionsUncheckedUpdateManyInput>
    /**
     * Filter which chii_ep_revisions to update
     * 
    **/
    where?: chii_ep_revisionsWhereInput
  }


  /**
   * chii_ep_revisions upsert
   */
  export type chii_ep_revisionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_revisions
     * 
    **/
    select?: chii_ep_revisionsSelect | null
    /**
     * The filter to search for the chii_ep_revisions to update in case it exists.
     * 
    **/
    where: chii_ep_revisionsWhereUniqueInput
    /**
     * In case the chii_ep_revisions found by the `where` argument doesn't exist, create a new chii_ep_revisions with this data.
     * 
    **/
    create: XOR<chii_ep_revisionsCreateInput, chii_ep_revisionsUncheckedCreateInput>
    /**
     * In case the chii_ep_revisions was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_ep_revisionsUpdateInput, chii_ep_revisionsUncheckedUpdateInput>
  }


  /**
   * chii_ep_revisions delete
   */
  export type chii_ep_revisionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_revisions
     * 
    **/
    select?: chii_ep_revisionsSelect | null
    /**
     * Filter which chii_ep_revisions to delete.
     * 
    **/
    where: chii_ep_revisionsWhereUniqueInput
  }


  /**
   * chii_ep_revisions deleteMany
   */
  export type chii_ep_revisionsDeleteManyArgs = {
    /**
     * Filter which chii_ep_revisions to delete
     * 
    **/
    where?: chii_ep_revisionsWhereInput
  }


  /**
   * chii_ep_revisions without action
   */
  export type chii_ep_revisionsArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_revisions
     * 
    **/
    select?: chii_ep_revisionsSelect | null
  }



  /**
   * Model chii_ep_status
   */


  export type AggregateChii_ep_status = {
    _count: Chii_ep_statusCountAggregateOutputType | null
    _avg: Chii_ep_statusAvgAggregateOutputType | null
    _sum: Chii_ep_statusSumAggregateOutputType | null
    _min: Chii_ep_statusMinAggregateOutputType | null
    _max: Chii_ep_statusMaxAggregateOutputType | null
  }

  export type Chii_ep_statusAvgAggregateOutputType = {
    ep_stt_id: number | null
    ep_stt_uid: number | null
    ep_stt_sid: number | null
    ep_stt_lasttouch: number | null
  }

  export type Chii_ep_statusSumAggregateOutputType = {
    ep_stt_id: number | null
    ep_stt_uid: number | null
    ep_stt_sid: number | null
    ep_stt_lasttouch: number | null
  }

  export type Chii_ep_statusMinAggregateOutputType = {
    ep_stt_id: number | null
    ep_stt_uid: number | null
    ep_stt_sid: number | null
    ep_stt_on_prg: boolean | null
    ep_stt_status: string | null
    ep_stt_lasttouch: number | null
  }

  export type Chii_ep_statusMaxAggregateOutputType = {
    ep_stt_id: number | null
    ep_stt_uid: number | null
    ep_stt_sid: number | null
    ep_stt_on_prg: boolean | null
    ep_stt_status: string | null
    ep_stt_lasttouch: number | null
  }

  export type Chii_ep_statusCountAggregateOutputType = {
    ep_stt_id: number
    ep_stt_uid: number
    ep_stt_sid: number
    ep_stt_on_prg: number
    ep_stt_status: number
    ep_stt_lasttouch: number
    _all: number
  }


  export type Chii_ep_statusAvgAggregateInputType = {
    ep_stt_id?: true
    ep_stt_uid?: true
    ep_stt_sid?: true
    ep_stt_lasttouch?: true
  }

  export type Chii_ep_statusSumAggregateInputType = {
    ep_stt_id?: true
    ep_stt_uid?: true
    ep_stt_sid?: true
    ep_stt_lasttouch?: true
  }

  export type Chii_ep_statusMinAggregateInputType = {
    ep_stt_id?: true
    ep_stt_uid?: true
    ep_stt_sid?: true
    ep_stt_on_prg?: true
    ep_stt_status?: true
    ep_stt_lasttouch?: true
  }

  export type Chii_ep_statusMaxAggregateInputType = {
    ep_stt_id?: true
    ep_stt_uid?: true
    ep_stt_sid?: true
    ep_stt_on_prg?: true
    ep_stt_status?: true
    ep_stt_lasttouch?: true
  }

  export type Chii_ep_statusCountAggregateInputType = {
    ep_stt_id?: true
    ep_stt_uid?: true
    ep_stt_sid?: true
    ep_stt_on_prg?: true
    ep_stt_status?: true
    ep_stt_lasttouch?: true
    _all?: true
  }

  export type Chii_ep_statusAggregateArgs = {
    /**
     * Filter which chii_ep_status to aggregate.
     * 
    **/
    where?: chii_ep_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_ep_statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_ep_statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_ep_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_ep_statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_ep_statuses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_ep_statuses
    **/
    _count?: true | Chii_ep_statusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_ep_statusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_ep_statusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_ep_statusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_ep_statusMaxAggregateInputType
  }

  export type GetChii_ep_statusAggregateType<T extends Chii_ep_statusAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_ep_status]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_ep_status[P]>
      : GetScalarType<T[P], AggregateChii_ep_status[P]>
  }




  export type Chii_ep_statusGroupByArgs = {
    where?: chii_ep_statusWhereInput
    orderBy?: Enumerable<chii_ep_statusOrderByWithAggregationInput>
    by: Array<Chii_ep_statusScalarFieldEnum>
    having?: chii_ep_statusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_ep_statusCountAggregateInputType | true
    _avg?: Chii_ep_statusAvgAggregateInputType
    _sum?: Chii_ep_statusSumAggregateInputType
    _min?: Chii_ep_statusMinAggregateInputType
    _max?: Chii_ep_statusMaxAggregateInputType
  }


  export type Chii_ep_statusGroupByOutputType = {
    ep_stt_id: number
    ep_stt_uid: number
    ep_stt_sid: number
    ep_stt_on_prg: boolean
    ep_stt_status: string
    ep_stt_lasttouch: number
    _count: Chii_ep_statusCountAggregateOutputType | null
    _avg: Chii_ep_statusAvgAggregateOutputType | null
    _sum: Chii_ep_statusSumAggregateOutputType | null
    _min: Chii_ep_statusMinAggregateOutputType | null
    _max: Chii_ep_statusMaxAggregateOutputType | null
  }

  type GetChii_ep_statusGroupByPayload<T extends Chii_ep_statusGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_ep_statusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_ep_statusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_ep_statusGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_ep_statusGroupByOutputType[P]>
        }
      >
    >


  export type chii_ep_statusSelect = {
    ep_stt_id?: boolean
    ep_stt_uid?: boolean
    ep_stt_sid?: boolean
    ep_stt_on_prg?: boolean
    ep_stt_status?: boolean
    ep_stt_lasttouch?: boolean
  }


  export type chii_ep_statusGetPayload<S extends boolean | null | undefined | chii_ep_statusArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_ep_status :
    S extends undefined ? never :
    S extends { include: any } & (chii_ep_statusArgs | chii_ep_statusFindManyArgs)
    ? chii_ep_status 
    : S extends { select: any } & (chii_ep_statusArgs | chii_ep_statusFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_ep_status ? chii_ep_status[P] : never
  } 
      : chii_ep_status


  type chii_ep_statusCountArgs = Merge<
    Omit<chii_ep_statusFindManyArgs, 'select' | 'include'> & {
      select?: Chii_ep_statusCountAggregateInputType | true
    }
  >

  export interface chii_ep_statusDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_ep_status that matches the filter.
     * @param {chii_ep_statusFindUniqueArgs} args - Arguments to find a Chii_ep_status
     * @example
     * // Get one Chii_ep_status
     * const chii_ep_status = await prisma.chii_ep_status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_ep_statusFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_ep_statusFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_ep_status'> extends True ? Prisma__chii_ep_statusClient<chii_ep_statusGetPayload<T>> : Prisma__chii_ep_statusClient<chii_ep_statusGetPayload<T> | null, null>

    /**
     * Find one Chii_ep_status that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_ep_statusFindUniqueOrThrowArgs} args - Arguments to find a Chii_ep_status
     * @example
     * // Get one Chii_ep_status
     * const chii_ep_status = await prisma.chii_ep_status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_ep_statusFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_ep_statusFindUniqueOrThrowArgs>
    ): Prisma__chii_ep_statusClient<chii_ep_statusGetPayload<T>>

    /**
     * Find the first Chii_ep_status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_ep_statusFindFirstArgs} args - Arguments to find a Chii_ep_status
     * @example
     * // Get one Chii_ep_status
     * const chii_ep_status = await prisma.chii_ep_status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_ep_statusFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_ep_statusFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_ep_status'> extends True ? Prisma__chii_ep_statusClient<chii_ep_statusGetPayload<T>> : Prisma__chii_ep_statusClient<chii_ep_statusGetPayload<T> | null, null>

    /**
     * Find the first Chii_ep_status that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_ep_statusFindFirstOrThrowArgs} args - Arguments to find a Chii_ep_status
     * @example
     * // Get one Chii_ep_status
     * const chii_ep_status = await prisma.chii_ep_status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_ep_statusFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_ep_statusFindFirstOrThrowArgs>
    ): Prisma__chii_ep_statusClient<chii_ep_statusGetPayload<T>>

    /**
     * Find zero or more Chii_ep_statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_ep_statusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_ep_statuses
     * const chii_ep_statuses = await prisma.chii_ep_status.findMany()
     * 
     * // Get first 10 Chii_ep_statuses
     * const chii_ep_statuses = await prisma.chii_ep_status.findMany({ take: 10 })
     * 
     * // Only select the `ep_stt_id`
     * const chii_ep_statusWithEp_stt_idOnly = await prisma.chii_ep_status.findMany({ select: { ep_stt_id: true } })
     * 
    **/
    findMany<T extends chii_ep_statusFindManyArgs>(
      args?: SelectSubset<T, chii_ep_statusFindManyArgs>
    ): PrismaPromise<Array<chii_ep_statusGetPayload<T>>>

    /**
     * Create a Chii_ep_status.
     * @param {chii_ep_statusCreateArgs} args - Arguments to create a Chii_ep_status.
     * @example
     * // Create one Chii_ep_status
     * const Chii_ep_status = await prisma.chii_ep_status.create({
     *   data: {
     *     // ... data to create a Chii_ep_status
     *   }
     * })
     * 
    **/
    create<T extends chii_ep_statusCreateArgs>(
      args: SelectSubset<T, chii_ep_statusCreateArgs>
    ): Prisma__chii_ep_statusClient<chii_ep_statusGetPayload<T>>

    /**
     * Create many Chii_ep_statuses.
     *     @param {chii_ep_statusCreateManyArgs} args - Arguments to create many Chii_ep_statuses.
     *     @example
     *     // Create many Chii_ep_statuses
     *     const chii_ep_status = await prisma.chii_ep_status.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_ep_statusCreateManyArgs>(
      args?: SelectSubset<T, chii_ep_statusCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_ep_status.
     * @param {chii_ep_statusDeleteArgs} args - Arguments to delete one Chii_ep_status.
     * @example
     * // Delete one Chii_ep_status
     * const Chii_ep_status = await prisma.chii_ep_status.delete({
     *   where: {
     *     // ... filter to delete one Chii_ep_status
     *   }
     * })
     * 
    **/
    delete<T extends chii_ep_statusDeleteArgs>(
      args: SelectSubset<T, chii_ep_statusDeleteArgs>
    ): Prisma__chii_ep_statusClient<chii_ep_statusGetPayload<T>>

    /**
     * Update one Chii_ep_status.
     * @param {chii_ep_statusUpdateArgs} args - Arguments to update one Chii_ep_status.
     * @example
     * // Update one Chii_ep_status
     * const chii_ep_status = await prisma.chii_ep_status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_ep_statusUpdateArgs>(
      args: SelectSubset<T, chii_ep_statusUpdateArgs>
    ): Prisma__chii_ep_statusClient<chii_ep_statusGetPayload<T>>

    /**
     * Delete zero or more Chii_ep_statuses.
     * @param {chii_ep_statusDeleteManyArgs} args - Arguments to filter Chii_ep_statuses to delete.
     * @example
     * // Delete a few Chii_ep_statuses
     * const { count } = await prisma.chii_ep_status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_ep_statusDeleteManyArgs>(
      args?: SelectSubset<T, chii_ep_statusDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_ep_statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_ep_statusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_ep_statuses
     * const chii_ep_status = await prisma.chii_ep_status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_ep_statusUpdateManyArgs>(
      args: SelectSubset<T, chii_ep_statusUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_ep_status.
     * @param {chii_ep_statusUpsertArgs} args - Arguments to update or create a Chii_ep_status.
     * @example
     * // Update or create a Chii_ep_status
     * const chii_ep_status = await prisma.chii_ep_status.upsert({
     *   create: {
     *     // ... data to create a Chii_ep_status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_ep_status we want to update
     *   }
     * })
    **/
    upsert<T extends chii_ep_statusUpsertArgs>(
      args: SelectSubset<T, chii_ep_statusUpsertArgs>
    ): Prisma__chii_ep_statusClient<chii_ep_statusGetPayload<T>>

    /**
     * Count the number of Chii_ep_statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_ep_statusCountArgs} args - Arguments to filter Chii_ep_statuses to count.
     * @example
     * // Count the number of Chii_ep_statuses
     * const count = await prisma.chii_ep_status.count({
     *   where: {
     *     // ... the filter for the Chii_ep_statuses we want to count
     *   }
     * })
    **/
    count<T extends chii_ep_statusCountArgs>(
      args?: Subset<T, chii_ep_statusCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_ep_statusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_ep_status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_ep_statusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_ep_statusAggregateArgs>(args: Subset<T, Chii_ep_statusAggregateArgs>): PrismaPromise<GetChii_ep_statusAggregateType<T>>

    /**
     * Group by Chii_ep_status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_ep_statusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_ep_statusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_ep_statusGroupByArgs['orderBy'] }
        : { orderBy?: Chii_ep_statusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_ep_statusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_ep_statusGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_ep_status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_ep_statusClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_ep_status base type for findUnique actions
   */
  export type chii_ep_statusFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_ep_status
     * 
    **/
    select?: chii_ep_statusSelect | null
    /**
     * Filter, which chii_ep_status to fetch.
     * 
    **/
    where: chii_ep_statusWhereUniqueInput
  }

  /**
   * chii_ep_status: findUnique
   */
  export interface chii_ep_statusFindUniqueArgs extends chii_ep_statusFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_ep_status findUniqueOrThrow
   */
  export type chii_ep_statusFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_status
     * 
    **/
    select?: chii_ep_statusSelect | null
    /**
     * Filter, which chii_ep_status to fetch.
     * 
    **/
    where: chii_ep_statusWhereUniqueInput
  }


  /**
   * chii_ep_status base type for findFirst actions
   */
  export type chii_ep_statusFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_ep_status
     * 
    **/
    select?: chii_ep_statusSelect | null
    /**
     * Filter, which chii_ep_status to fetch.
     * 
    **/
    where?: chii_ep_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_ep_statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_ep_statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_ep_statuses.
     * 
    **/
    cursor?: chii_ep_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_ep_statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_ep_statuses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_ep_statuses.
     * 
    **/
    distinct?: Enumerable<Chii_ep_statusScalarFieldEnum>
  }

  /**
   * chii_ep_status: findFirst
   */
  export interface chii_ep_statusFindFirstArgs extends chii_ep_statusFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_ep_status findFirstOrThrow
   */
  export type chii_ep_statusFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_status
     * 
    **/
    select?: chii_ep_statusSelect | null
    /**
     * Filter, which chii_ep_status to fetch.
     * 
    **/
    where?: chii_ep_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_ep_statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_ep_statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_ep_statuses.
     * 
    **/
    cursor?: chii_ep_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_ep_statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_ep_statuses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_ep_statuses.
     * 
    **/
    distinct?: Enumerable<Chii_ep_statusScalarFieldEnum>
  }


  /**
   * chii_ep_status findMany
   */
  export type chii_ep_statusFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_status
     * 
    **/
    select?: chii_ep_statusSelect | null
    /**
     * Filter, which chii_ep_statuses to fetch.
     * 
    **/
    where?: chii_ep_statusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_ep_statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_ep_statusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_ep_statuses.
     * 
    **/
    cursor?: chii_ep_statusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_ep_statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_ep_statuses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_ep_statusScalarFieldEnum>
  }


  /**
   * chii_ep_status create
   */
  export type chii_ep_statusCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_status
     * 
    **/
    select?: chii_ep_statusSelect | null
    /**
     * The data needed to create a chii_ep_status.
     * 
    **/
    data: XOR<chii_ep_statusCreateInput, chii_ep_statusUncheckedCreateInput>
  }


  /**
   * chii_ep_status createMany
   */
  export type chii_ep_statusCreateManyArgs = {
    /**
     * The data used to create many chii_ep_statuses.
     * 
    **/
    data: Enumerable<chii_ep_statusCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_ep_status update
   */
  export type chii_ep_statusUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_status
     * 
    **/
    select?: chii_ep_statusSelect | null
    /**
     * The data needed to update a chii_ep_status.
     * 
    **/
    data: XOR<chii_ep_statusUpdateInput, chii_ep_statusUncheckedUpdateInput>
    /**
     * Choose, which chii_ep_status to update.
     * 
    **/
    where: chii_ep_statusWhereUniqueInput
  }


  /**
   * chii_ep_status updateMany
   */
  export type chii_ep_statusUpdateManyArgs = {
    /**
     * The data used to update chii_ep_statuses.
     * 
    **/
    data: XOR<chii_ep_statusUpdateManyMutationInput, chii_ep_statusUncheckedUpdateManyInput>
    /**
     * Filter which chii_ep_statuses to update
     * 
    **/
    where?: chii_ep_statusWhereInput
  }


  /**
   * chii_ep_status upsert
   */
  export type chii_ep_statusUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_status
     * 
    **/
    select?: chii_ep_statusSelect | null
    /**
     * The filter to search for the chii_ep_status to update in case it exists.
     * 
    **/
    where: chii_ep_statusWhereUniqueInput
    /**
     * In case the chii_ep_status found by the `where` argument doesn't exist, create a new chii_ep_status with this data.
     * 
    **/
    create: XOR<chii_ep_statusCreateInput, chii_ep_statusUncheckedCreateInput>
    /**
     * In case the chii_ep_status was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_ep_statusUpdateInput, chii_ep_statusUncheckedUpdateInput>
  }


  /**
   * chii_ep_status delete
   */
  export type chii_ep_statusDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_status
     * 
    **/
    select?: chii_ep_statusSelect | null
    /**
     * Filter which chii_ep_status to delete.
     * 
    **/
    where: chii_ep_statusWhereUniqueInput
  }


  /**
   * chii_ep_status deleteMany
   */
  export type chii_ep_statusDeleteManyArgs = {
    /**
     * Filter which chii_ep_statuses to delete
     * 
    **/
    where?: chii_ep_statusWhereInput
  }


  /**
   * chii_ep_status without action
   */
  export type chii_ep_statusArgs = {
    /**
     * Select specific fields to fetch from the chii_ep_status
     * 
    **/
    select?: chii_ep_statusSelect | null
  }



  /**
   * Model chii_episodes
   */


  export type AggregateChii_episodes = {
    _count: Chii_episodesCountAggregateOutputType | null
    _avg: Chii_episodesAvgAggregateOutputType | null
    _sum: Chii_episodesSumAggregateOutputType | null
    _min: Chii_episodesMinAggregateOutputType | null
    _max: Chii_episodesMaxAggregateOutputType | null
  }

  export type Chii_episodesAvgAggregateOutputType = {
    ep_id: number | null
    ep_subject_id: number | null
    ep_sort: number | null
    ep_type: number | null
    ep_disc: number | null
    ep_rate: number | null
    ep_comment: number | null
    ep_resources: number | null
    ep_dateline: number | null
    ep_lastpost: number | null
    ep_lock: number | null
    ep_ban: number | null
  }

  export type Chii_episodesSumAggregateOutputType = {
    ep_id: number | null
    ep_subject_id: number | null
    ep_sort: number | null
    ep_type: number | null
    ep_disc: number | null
    ep_rate: number | null
    ep_comment: number | null
    ep_resources: number | null
    ep_dateline: number | null
    ep_lastpost: number | null
    ep_lock: number | null
    ep_ban: number | null
  }

  export type Chii_episodesMinAggregateOutputType = {
    ep_id: number | null
    ep_subject_id: number | null
    ep_sort: number | null
    ep_type: number | null
    ep_disc: number | null
    ep_name: string | null
    ep_name_cn: string | null
    ep_rate: number | null
    ep_duration: string | null
    ep_airdate: string | null
    ep_online: string | null
    ep_comment: number | null
    ep_resources: number | null
    ep_desc: string | null
    ep_dateline: number | null
    ep_lastpost: number | null
    ep_lock: number | null
    ep_ban: number | null
  }

  export type Chii_episodesMaxAggregateOutputType = {
    ep_id: number | null
    ep_subject_id: number | null
    ep_sort: number | null
    ep_type: number | null
    ep_disc: number | null
    ep_name: string | null
    ep_name_cn: string | null
    ep_rate: number | null
    ep_duration: string | null
    ep_airdate: string | null
    ep_online: string | null
    ep_comment: number | null
    ep_resources: number | null
    ep_desc: string | null
    ep_dateline: number | null
    ep_lastpost: number | null
    ep_lock: number | null
    ep_ban: number | null
  }

  export type Chii_episodesCountAggregateOutputType = {
    ep_id: number
    ep_subject_id: number
    ep_sort: number
    ep_type: number
    ep_disc: number
    ep_name: number
    ep_name_cn: number
    ep_rate: number
    ep_duration: number
    ep_airdate: number
    ep_online: number
    ep_comment: number
    ep_resources: number
    ep_desc: number
    ep_dateline: number
    ep_lastpost: number
    ep_lock: number
    ep_ban: number
    _all: number
  }


  export type Chii_episodesAvgAggregateInputType = {
    ep_id?: true
    ep_subject_id?: true
    ep_sort?: true
    ep_type?: true
    ep_disc?: true
    ep_rate?: true
    ep_comment?: true
    ep_resources?: true
    ep_dateline?: true
    ep_lastpost?: true
    ep_lock?: true
    ep_ban?: true
  }

  export type Chii_episodesSumAggregateInputType = {
    ep_id?: true
    ep_subject_id?: true
    ep_sort?: true
    ep_type?: true
    ep_disc?: true
    ep_rate?: true
    ep_comment?: true
    ep_resources?: true
    ep_dateline?: true
    ep_lastpost?: true
    ep_lock?: true
    ep_ban?: true
  }

  export type Chii_episodesMinAggregateInputType = {
    ep_id?: true
    ep_subject_id?: true
    ep_sort?: true
    ep_type?: true
    ep_disc?: true
    ep_name?: true
    ep_name_cn?: true
    ep_rate?: true
    ep_duration?: true
    ep_airdate?: true
    ep_online?: true
    ep_comment?: true
    ep_resources?: true
    ep_desc?: true
    ep_dateline?: true
    ep_lastpost?: true
    ep_lock?: true
    ep_ban?: true
  }

  export type Chii_episodesMaxAggregateInputType = {
    ep_id?: true
    ep_subject_id?: true
    ep_sort?: true
    ep_type?: true
    ep_disc?: true
    ep_name?: true
    ep_name_cn?: true
    ep_rate?: true
    ep_duration?: true
    ep_airdate?: true
    ep_online?: true
    ep_comment?: true
    ep_resources?: true
    ep_desc?: true
    ep_dateline?: true
    ep_lastpost?: true
    ep_lock?: true
    ep_ban?: true
  }

  export type Chii_episodesCountAggregateInputType = {
    ep_id?: true
    ep_subject_id?: true
    ep_sort?: true
    ep_type?: true
    ep_disc?: true
    ep_name?: true
    ep_name_cn?: true
    ep_rate?: true
    ep_duration?: true
    ep_airdate?: true
    ep_online?: true
    ep_comment?: true
    ep_resources?: true
    ep_desc?: true
    ep_dateline?: true
    ep_lastpost?: true
    ep_lock?: true
    ep_ban?: true
    _all?: true
  }

  export type Chii_episodesAggregateArgs = {
    /**
     * Filter which chii_episodes to aggregate.
     * 
    **/
    where?: chii_episodesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_episodes to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_episodesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_episodesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_episodes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_episodes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_episodes
    **/
    _count?: true | Chii_episodesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_episodesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_episodesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_episodesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_episodesMaxAggregateInputType
  }

  export type GetChii_episodesAggregateType<T extends Chii_episodesAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_episodes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_episodes[P]>
      : GetScalarType<T[P], AggregateChii_episodes[P]>
  }




  export type Chii_episodesGroupByArgs = {
    where?: chii_episodesWhereInput
    orderBy?: Enumerable<chii_episodesOrderByWithAggregationInput>
    by: Array<Chii_episodesScalarFieldEnum>
    having?: chii_episodesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_episodesCountAggregateInputType | true
    _avg?: Chii_episodesAvgAggregateInputType
    _sum?: Chii_episodesSumAggregateInputType
    _min?: Chii_episodesMinAggregateInputType
    _max?: Chii_episodesMaxAggregateInputType
  }


  export type Chii_episodesGroupByOutputType = {
    ep_id: number
    ep_subject_id: number
    ep_sort: number
    ep_type: number
    ep_disc: number
    ep_name: string
    ep_name_cn: string
    ep_rate: number
    ep_duration: string
    ep_airdate: string
    ep_online: string
    ep_comment: number
    ep_resources: number
    ep_desc: string
    ep_dateline: number
    ep_lastpost: number
    ep_lock: number
    ep_ban: number
    _count: Chii_episodesCountAggregateOutputType | null
    _avg: Chii_episodesAvgAggregateOutputType | null
    _sum: Chii_episodesSumAggregateOutputType | null
    _min: Chii_episodesMinAggregateOutputType | null
    _max: Chii_episodesMaxAggregateOutputType | null
  }

  type GetChii_episodesGroupByPayload<T extends Chii_episodesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_episodesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_episodesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_episodesGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_episodesGroupByOutputType[P]>
        }
      >
    >


  export type chii_episodesSelect = {
    ep_id?: boolean
    ep_subject_id?: boolean
    ep_sort?: boolean
    ep_type?: boolean
    ep_disc?: boolean
    ep_name?: boolean
    ep_name_cn?: boolean
    ep_rate?: boolean
    ep_duration?: boolean
    ep_airdate?: boolean
    ep_online?: boolean
    ep_comment?: boolean
    ep_resources?: boolean
    ep_desc?: boolean
    ep_dateline?: boolean
    ep_lastpost?: boolean
    ep_lock?: boolean
    ep_ban?: boolean
  }


  export type chii_episodesGetPayload<S extends boolean | null | undefined | chii_episodesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_episodes :
    S extends undefined ? never :
    S extends { include: any } & (chii_episodesArgs | chii_episodesFindManyArgs)
    ? chii_episodes 
    : S extends { select: any } & (chii_episodesArgs | chii_episodesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_episodes ? chii_episodes[P] : never
  } 
      : chii_episodes


  type chii_episodesCountArgs = Merge<
    Omit<chii_episodesFindManyArgs, 'select' | 'include'> & {
      select?: Chii_episodesCountAggregateInputType | true
    }
  >

  export interface chii_episodesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_episodes that matches the filter.
     * @param {chii_episodesFindUniqueArgs} args - Arguments to find a Chii_episodes
     * @example
     * // Get one Chii_episodes
     * const chii_episodes = await prisma.chii_episodes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_episodesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_episodesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_episodes'> extends True ? Prisma__chii_episodesClient<chii_episodesGetPayload<T>> : Prisma__chii_episodesClient<chii_episodesGetPayload<T> | null, null>

    /**
     * Find one Chii_episodes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_episodesFindUniqueOrThrowArgs} args - Arguments to find a Chii_episodes
     * @example
     * // Get one Chii_episodes
     * const chii_episodes = await prisma.chii_episodes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_episodesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_episodesFindUniqueOrThrowArgs>
    ): Prisma__chii_episodesClient<chii_episodesGetPayload<T>>

    /**
     * Find the first Chii_episodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_episodesFindFirstArgs} args - Arguments to find a Chii_episodes
     * @example
     * // Get one Chii_episodes
     * const chii_episodes = await prisma.chii_episodes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_episodesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_episodesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_episodes'> extends True ? Prisma__chii_episodesClient<chii_episodesGetPayload<T>> : Prisma__chii_episodesClient<chii_episodesGetPayload<T> | null, null>

    /**
     * Find the first Chii_episodes that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_episodesFindFirstOrThrowArgs} args - Arguments to find a Chii_episodes
     * @example
     * // Get one Chii_episodes
     * const chii_episodes = await prisma.chii_episodes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_episodesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_episodesFindFirstOrThrowArgs>
    ): Prisma__chii_episodesClient<chii_episodesGetPayload<T>>

    /**
     * Find zero or more Chii_episodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_episodesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_episodes
     * const chii_episodes = await prisma.chii_episodes.findMany()
     * 
     * // Get first 10 Chii_episodes
     * const chii_episodes = await prisma.chii_episodes.findMany({ take: 10 })
     * 
     * // Only select the `ep_id`
     * const chii_episodesWithEp_idOnly = await prisma.chii_episodes.findMany({ select: { ep_id: true } })
     * 
    **/
    findMany<T extends chii_episodesFindManyArgs>(
      args?: SelectSubset<T, chii_episodesFindManyArgs>
    ): PrismaPromise<Array<chii_episodesGetPayload<T>>>

    /**
     * Create a Chii_episodes.
     * @param {chii_episodesCreateArgs} args - Arguments to create a Chii_episodes.
     * @example
     * // Create one Chii_episodes
     * const Chii_episodes = await prisma.chii_episodes.create({
     *   data: {
     *     // ... data to create a Chii_episodes
     *   }
     * })
     * 
    **/
    create<T extends chii_episodesCreateArgs>(
      args: SelectSubset<T, chii_episodesCreateArgs>
    ): Prisma__chii_episodesClient<chii_episodesGetPayload<T>>

    /**
     * Create many Chii_episodes.
     *     @param {chii_episodesCreateManyArgs} args - Arguments to create many Chii_episodes.
     *     @example
     *     // Create many Chii_episodes
     *     const chii_episodes = await prisma.chii_episodes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_episodesCreateManyArgs>(
      args?: SelectSubset<T, chii_episodesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_episodes.
     * @param {chii_episodesDeleteArgs} args - Arguments to delete one Chii_episodes.
     * @example
     * // Delete one Chii_episodes
     * const Chii_episodes = await prisma.chii_episodes.delete({
     *   where: {
     *     // ... filter to delete one Chii_episodes
     *   }
     * })
     * 
    **/
    delete<T extends chii_episodesDeleteArgs>(
      args: SelectSubset<T, chii_episodesDeleteArgs>
    ): Prisma__chii_episodesClient<chii_episodesGetPayload<T>>

    /**
     * Update one Chii_episodes.
     * @param {chii_episodesUpdateArgs} args - Arguments to update one Chii_episodes.
     * @example
     * // Update one Chii_episodes
     * const chii_episodes = await prisma.chii_episodes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_episodesUpdateArgs>(
      args: SelectSubset<T, chii_episodesUpdateArgs>
    ): Prisma__chii_episodesClient<chii_episodesGetPayload<T>>

    /**
     * Delete zero or more Chii_episodes.
     * @param {chii_episodesDeleteManyArgs} args - Arguments to filter Chii_episodes to delete.
     * @example
     * // Delete a few Chii_episodes
     * const { count } = await prisma.chii_episodes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_episodesDeleteManyArgs>(
      args?: SelectSubset<T, chii_episodesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_episodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_episodesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_episodes
     * const chii_episodes = await prisma.chii_episodes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_episodesUpdateManyArgs>(
      args: SelectSubset<T, chii_episodesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_episodes.
     * @param {chii_episodesUpsertArgs} args - Arguments to update or create a Chii_episodes.
     * @example
     * // Update or create a Chii_episodes
     * const chii_episodes = await prisma.chii_episodes.upsert({
     *   create: {
     *     // ... data to create a Chii_episodes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_episodes we want to update
     *   }
     * })
    **/
    upsert<T extends chii_episodesUpsertArgs>(
      args: SelectSubset<T, chii_episodesUpsertArgs>
    ): Prisma__chii_episodesClient<chii_episodesGetPayload<T>>

    /**
     * Count the number of Chii_episodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_episodesCountArgs} args - Arguments to filter Chii_episodes to count.
     * @example
     * // Count the number of Chii_episodes
     * const count = await prisma.chii_episodes.count({
     *   where: {
     *     // ... the filter for the Chii_episodes we want to count
     *   }
     * })
    **/
    count<T extends chii_episodesCountArgs>(
      args?: Subset<T, chii_episodesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_episodesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_episodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_episodesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_episodesAggregateArgs>(args: Subset<T, Chii_episodesAggregateArgs>): PrismaPromise<GetChii_episodesAggregateType<T>>

    /**
     * Group by Chii_episodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_episodesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_episodesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_episodesGroupByArgs['orderBy'] }
        : { orderBy?: Chii_episodesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_episodesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_episodesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_episodes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_episodesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_episodes base type for findUnique actions
   */
  export type chii_episodesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_episodes
     * 
    **/
    select?: chii_episodesSelect | null
    /**
     * Filter, which chii_episodes to fetch.
     * 
    **/
    where: chii_episodesWhereUniqueInput
  }

  /**
   * chii_episodes: findUnique
   */
  export interface chii_episodesFindUniqueArgs extends chii_episodesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_episodes findUniqueOrThrow
   */
  export type chii_episodesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_episodes
     * 
    **/
    select?: chii_episodesSelect | null
    /**
     * Filter, which chii_episodes to fetch.
     * 
    **/
    where: chii_episodesWhereUniqueInput
  }


  /**
   * chii_episodes base type for findFirst actions
   */
  export type chii_episodesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_episodes
     * 
    **/
    select?: chii_episodesSelect | null
    /**
     * Filter, which chii_episodes to fetch.
     * 
    **/
    where?: chii_episodesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_episodes to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_episodesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_episodes.
     * 
    **/
    cursor?: chii_episodesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_episodes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_episodes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_episodes.
     * 
    **/
    distinct?: Enumerable<Chii_episodesScalarFieldEnum>
  }

  /**
   * chii_episodes: findFirst
   */
  export interface chii_episodesFindFirstArgs extends chii_episodesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_episodes findFirstOrThrow
   */
  export type chii_episodesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_episodes
     * 
    **/
    select?: chii_episodesSelect | null
    /**
     * Filter, which chii_episodes to fetch.
     * 
    **/
    where?: chii_episodesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_episodes to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_episodesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_episodes.
     * 
    **/
    cursor?: chii_episodesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_episodes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_episodes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_episodes.
     * 
    **/
    distinct?: Enumerable<Chii_episodesScalarFieldEnum>
  }


  /**
   * chii_episodes findMany
   */
  export type chii_episodesFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_episodes
     * 
    **/
    select?: chii_episodesSelect | null
    /**
     * Filter, which chii_episodes to fetch.
     * 
    **/
    where?: chii_episodesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_episodes to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_episodesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_episodes.
     * 
    **/
    cursor?: chii_episodesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_episodes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_episodes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_episodesScalarFieldEnum>
  }


  /**
   * chii_episodes create
   */
  export type chii_episodesCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_episodes
     * 
    **/
    select?: chii_episodesSelect | null
    /**
     * The data needed to create a chii_episodes.
     * 
    **/
    data: XOR<chii_episodesCreateInput, chii_episodesUncheckedCreateInput>
  }


  /**
   * chii_episodes createMany
   */
  export type chii_episodesCreateManyArgs = {
    /**
     * The data used to create many chii_episodes.
     * 
    **/
    data: Enumerable<chii_episodesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_episodes update
   */
  export type chii_episodesUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_episodes
     * 
    **/
    select?: chii_episodesSelect | null
    /**
     * The data needed to update a chii_episodes.
     * 
    **/
    data: XOR<chii_episodesUpdateInput, chii_episodesUncheckedUpdateInput>
    /**
     * Choose, which chii_episodes to update.
     * 
    **/
    where: chii_episodesWhereUniqueInput
  }


  /**
   * chii_episodes updateMany
   */
  export type chii_episodesUpdateManyArgs = {
    /**
     * The data used to update chii_episodes.
     * 
    **/
    data: XOR<chii_episodesUpdateManyMutationInput, chii_episodesUncheckedUpdateManyInput>
    /**
     * Filter which chii_episodes to update
     * 
    **/
    where?: chii_episodesWhereInput
  }


  /**
   * chii_episodes upsert
   */
  export type chii_episodesUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_episodes
     * 
    **/
    select?: chii_episodesSelect | null
    /**
     * The filter to search for the chii_episodes to update in case it exists.
     * 
    **/
    where: chii_episodesWhereUniqueInput
    /**
     * In case the chii_episodes found by the `where` argument doesn't exist, create a new chii_episodes with this data.
     * 
    **/
    create: XOR<chii_episodesCreateInput, chii_episodesUncheckedCreateInput>
    /**
     * In case the chii_episodes was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_episodesUpdateInput, chii_episodesUncheckedUpdateInput>
  }


  /**
   * chii_episodes delete
   */
  export type chii_episodesDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_episodes
     * 
    **/
    select?: chii_episodesSelect | null
    /**
     * Filter which chii_episodes to delete.
     * 
    **/
    where: chii_episodesWhereUniqueInput
  }


  /**
   * chii_episodes deleteMany
   */
  export type chii_episodesDeleteManyArgs = {
    /**
     * Filter which chii_episodes to delete
     * 
    **/
    where?: chii_episodesWhereInput
  }


  /**
   * chii_episodes without action
   */
  export type chii_episodesArgs = {
    /**
     * Select specific fields to fetch from the chii_episodes
     * 
    **/
    select?: chii_episodesSelect | null
  }



  /**
   * Model chii_group_members
   */


  export type AggregateChii_group_members = {
    _count: Chii_group_membersCountAggregateOutputType | null
    _avg: Chii_group_membersAvgAggregateOutputType | null
    _sum: Chii_group_membersSumAggregateOutputType | null
    _min: Chii_group_membersMinAggregateOutputType | null
    _max: Chii_group_membersMaxAggregateOutputType | null
  }

  export type Chii_group_membersAvgAggregateOutputType = {
    gmb_uid: number | null
    gmb_gid: number | null
    gmb_dateline: number | null
  }

  export type Chii_group_membersSumAggregateOutputType = {
    gmb_uid: number | null
    gmb_gid: number | null
    gmb_dateline: number | null
  }

  export type Chii_group_membersMinAggregateOutputType = {
    gmb_uid: number | null
    gmb_gid: number | null
    gmb_moderator: boolean | null
    gmb_dateline: number | null
  }

  export type Chii_group_membersMaxAggregateOutputType = {
    gmb_uid: number | null
    gmb_gid: number | null
    gmb_moderator: boolean | null
    gmb_dateline: number | null
  }

  export type Chii_group_membersCountAggregateOutputType = {
    gmb_uid: number
    gmb_gid: number
    gmb_moderator: number
    gmb_dateline: number
    _all: number
  }


  export type Chii_group_membersAvgAggregateInputType = {
    gmb_uid?: true
    gmb_gid?: true
    gmb_dateline?: true
  }

  export type Chii_group_membersSumAggregateInputType = {
    gmb_uid?: true
    gmb_gid?: true
    gmb_dateline?: true
  }

  export type Chii_group_membersMinAggregateInputType = {
    gmb_uid?: true
    gmb_gid?: true
    gmb_moderator?: true
    gmb_dateline?: true
  }

  export type Chii_group_membersMaxAggregateInputType = {
    gmb_uid?: true
    gmb_gid?: true
    gmb_moderator?: true
    gmb_dateline?: true
  }

  export type Chii_group_membersCountAggregateInputType = {
    gmb_uid?: true
    gmb_gid?: true
    gmb_moderator?: true
    gmb_dateline?: true
    _all?: true
  }

  export type Chii_group_membersAggregateArgs = {
    /**
     * Filter which chii_group_members to aggregate.
     * 
    **/
    where?: chii_group_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_group_members to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_group_membersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_group_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_group_members from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_group_members.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_group_members
    **/
    _count?: true | Chii_group_membersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_group_membersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_group_membersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_group_membersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_group_membersMaxAggregateInputType
  }

  export type GetChii_group_membersAggregateType<T extends Chii_group_membersAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_group_members]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_group_members[P]>
      : GetScalarType<T[P], AggregateChii_group_members[P]>
  }




  export type Chii_group_membersGroupByArgs = {
    where?: chii_group_membersWhereInput
    orderBy?: Enumerable<chii_group_membersOrderByWithAggregationInput>
    by: Array<Chii_group_membersScalarFieldEnum>
    having?: chii_group_membersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_group_membersCountAggregateInputType | true
    _avg?: Chii_group_membersAvgAggregateInputType
    _sum?: Chii_group_membersSumAggregateInputType
    _min?: Chii_group_membersMinAggregateInputType
    _max?: Chii_group_membersMaxAggregateInputType
  }


  export type Chii_group_membersGroupByOutputType = {
    gmb_uid: number
    gmb_gid: number
    gmb_moderator: boolean
    gmb_dateline: number
    _count: Chii_group_membersCountAggregateOutputType | null
    _avg: Chii_group_membersAvgAggregateOutputType | null
    _sum: Chii_group_membersSumAggregateOutputType | null
    _min: Chii_group_membersMinAggregateOutputType | null
    _max: Chii_group_membersMaxAggregateOutputType | null
  }

  type GetChii_group_membersGroupByPayload<T extends Chii_group_membersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_group_membersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_group_membersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_group_membersGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_group_membersGroupByOutputType[P]>
        }
      >
    >


  export type chii_group_membersSelect = {
    gmb_uid?: boolean
    gmb_gid?: boolean
    gmb_moderator?: boolean
    gmb_dateline?: boolean
  }


  export type chii_group_membersGetPayload<S extends boolean | null | undefined | chii_group_membersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_group_members :
    S extends undefined ? never :
    S extends { include: any } & (chii_group_membersArgs | chii_group_membersFindManyArgs)
    ? chii_group_members 
    : S extends { select: any } & (chii_group_membersArgs | chii_group_membersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_group_members ? chii_group_members[P] : never
  } 
      : chii_group_members


  type chii_group_membersCountArgs = Merge<
    Omit<chii_group_membersFindManyArgs, 'select' | 'include'> & {
      select?: Chii_group_membersCountAggregateInputType | true
    }
  >

  export interface chii_group_membersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_group_members that matches the filter.
     * @param {chii_group_membersFindUniqueArgs} args - Arguments to find a Chii_group_members
     * @example
     * // Get one Chii_group_members
     * const chii_group_members = await prisma.chii_group_members.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_group_membersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_group_membersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_group_members'> extends True ? Prisma__chii_group_membersClient<chii_group_membersGetPayload<T>> : Prisma__chii_group_membersClient<chii_group_membersGetPayload<T> | null, null>

    /**
     * Find one Chii_group_members that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_group_membersFindUniqueOrThrowArgs} args - Arguments to find a Chii_group_members
     * @example
     * // Get one Chii_group_members
     * const chii_group_members = await prisma.chii_group_members.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_group_membersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_group_membersFindUniqueOrThrowArgs>
    ): Prisma__chii_group_membersClient<chii_group_membersGetPayload<T>>

    /**
     * Find the first Chii_group_members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_group_membersFindFirstArgs} args - Arguments to find a Chii_group_members
     * @example
     * // Get one Chii_group_members
     * const chii_group_members = await prisma.chii_group_members.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_group_membersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_group_membersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_group_members'> extends True ? Prisma__chii_group_membersClient<chii_group_membersGetPayload<T>> : Prisma__chii_group_membersClient<chii_group_membersGetPayload<T> | null, null>

    /**
     * Find the first Chii_group_members that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_group_membersFindFirstOrThrowArgs} args - Arguments to find a Chii_group_members
     * @example
     * // Get one Chii_group_members
     * const chii_group_members = await prisma.chii_group_members.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_group_membersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_group_membersFindFirstOrThrowArgs>
    ): Prisma__chii_group_membersClient<chii_group_membersGetPayload<T>>

    /**
     * Find zero or more Chii_group_members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_group_membersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_group_members
     * const chii_group_members = await prisma.chii_group_members.findMany()
     * 
     * // Get first 10 Chii_group_members
     * const chii_group_members = await prisma.chii_group_members.findMany({ take: 10 })
     * 
     * // Only select the `gmb_uid`
     * const chii_group_membersWithGmb_uidOnly = await prisma.chii_group_members.findMany({ select: { gmb_uid: true } })
     * 
    **/
    findMany<T extends chii_group_membersFindManyArgs>(
      args?: SelectSubset<T, chii_group_membersFindManyArgs>
    ): PrismaPromise<Array<chii_group_membersGetPayload<T>>>

    /**
     * Create a Chii_group_members.
     * @param {chii_group_membersCreateArgs} args - Arguments to create a Chii_group_members.
     * @example
     * // Create one Chii_group_members
     * const Chii_group_members = await prisma.chii_group_members.create({
     *   data: {
     *     // ... data to create a Chii_group_members
     *   }
     * })
     * 
    **/
    create<T extends chii_group_membersCreateArgs>(
      args: SelectSubset<T, chii_group_membersCreateArgs>
    ): Prisma__chii_group_membersClient<chii_group_membersGetPayload<T>>

    /**
     * Create many Chii_group_members.
     *     @param {chii_group_membersCreateManyArgs} args - Arguments to create many Chii_group_members.
     *     @example
     *     // Create many Chii_group_members
     *     const chii_group_members = await prisma.chii_group_members.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_group_membersCreateManyArgs>(
      args?: SelectSubset<T, chii_group_membersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_group_members.
     * @param {chii_group_membersDeleteArgs} args - Arguments to delete one Chii_group_members.
     * @example
     * // Delete one Chii_group_members
     * const Chii_group_members = await prisma.chii_group_members.delete({
     *   where: {
     *     // ... filter to delete one Chii_group_members
     *   }
     * })
     * 
    **/
    delete<T extends chii_group_membersDeleteArgs>(
      args: SelectSubset<T, chii_group_membersDeleteArgs>
    ): Prisma__chii_group_membersClient<chii_group_membersGetPayload<T>>

    /**
     * Update one Chii_group_members.
     * @param {chii_group_membersUpdateArgs} args - Arguments to update one Chii_group_members.
     * @example
     * // Update one Chii_group_members
     * const chii_group_members = await prisma.chii_group_members.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_group_membersUpdateArgs>(
      args: SelectSubset<T, chii_group_membersUpdateArgs>
    ): Prisma__chii_group_membersClient<chii_group_membersGetPayload<T>>

    /**
     * Delete zero or more Chii_group_members.
     * @param {chii_group_membersDeleteManyArgs} args - Arguments to filter Chii_group_members to delete.
     * @example
     * // Delete a few Chii_group_members
     * const { count } = await prisma.chii_group_members.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_group_membersDeleteManyArgs>(
      args?: SelectSubset<T, chii_group_membersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_group_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_group_membersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_group_members
     * const chii_group_members = await prisma.chii_group_members.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_group_membersUpdateManyArgs>(
      args: SelectSubset<T, chii_group_membersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_group_members.
     * @param {chii_group_membersUpsertArgs} args - Arguments to update or create a Chii_group_members.
     * @example
     * // Update or create a Chii_group_members
     * const chii_group_members = await prisma.chii_group_members.upsert({
     *   create: {
     *     // ... data to create a Chii_group_members
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_group_members we want to update
     *   }
     * })
    **/
    upsert<T extends chii_group_membersUpsertArgs>(
      args: SelectSubset<T, chii_group_membersUpsertArgs>
    ): Prisma__chii_group_membersClient<chii_group_membersGetPayload<T>>

    /**
     * Count the number of Chii_group_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_group_membersCountArgs} args - Arguments to filter Chii_group_members to count.
     * @example
     * // Count the number of Chii_group_members
     * const count = await prisma.chii_group_members.count({
     *   where: {
     *     // ... the filter for the Chii_group_members we want to count
     *   }
     * })
    **/
    count<T extends chii_group_membersCountArgs>(
      args?: Subset<T, chii_group_membersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_group_membersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_group_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_group_membersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_group_membersAggregateArgs>(args: Subset<T, Chii_group_membersAggregateArgs>): PrismaPromise<GetChii_group_membersAggregateType<T>>

    /**
     * Group by Chii_group_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_group_membersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_group_membersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_group_membersGroupByArgs['orderBy'] }
        : { orderBy?: Chii_group_membersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_group_membersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_group_membersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_group_members.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_group_membersClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_group_members base type for findUnique actions
   */
  export type chii_group_membersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_group_members
     * 
    **/
    select?: chii_group_membersSelect | null
    /**
     * Filter, which chii_group_members to fetch.
     * 
    **/
    where: chii_group_membersWhereUniqueInput
  }

  /**
   * chii_group_members: findUnique
   */
  export interface chii_group_membersFindUniqueArgs extends chii_group_membersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_group_members findUniqueOrThrow
   */
  export type chii_group_membersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_group_members
     * 
    **/
    select?: chii_group_membersSelect | null
    /**
     * Filter, which chii_group_members to fetch.
     * 
    **/
    where: chii_group_membersWhereUniqueInput
  }


  /**
   * chii_group_members base type for findFirst actions
   */
  export type chii_group_membersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_group_members
     * 
    **/
    select?: chii_group_membersSelect | null
    /**
     * Filter, which chii_group_members to fetch.
     * 
    **/
    where?: chii_group_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_group_members to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_group_membersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_group_members.
     * 
    **/
    cursor?: chii_group_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_group_members from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_group_members.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_group_members.
     * 
    **/
    distinct?: Enumerable<Chii_group_membersScalarFieldEnum>
  }

  /**
   * chii_group_members: findFirst
   */
  export interface chii_group_membersFindFirstArgs extends chii_group_membersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_group_members findFirstOrThrow
   */
  export type chii_group_membersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_group_members
     * 
    **/
    select?: chii_group_membersSelect | null
    /**
     * Filter, which chii_group_members to fetch.
     * 
    **/
    where?: chii_group_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_group_members to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_group_membersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_group_members.
     * 
    **/
    cursor?: chii_group_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_group_members from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_group_members.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_group_members.
     * 
    **/
    distinct?: Enumerable<Chii_group_membersScalarFieldEnum>
  }


  /**
   * chii_group_members findMany
   */
  export type chii_group_membersFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_group_members
     * 
    **/
    select?: chii_group_membersSelect | null
    /**
     * Filter, which chii_group_members to fetch.
     * 
    **/
    where?: chii_group_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_group_members to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_group_membersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_group_members.
     * 
    **/
    cursor?: chii_group_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_group_members from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_group_members.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_group_membersScalarFieldEnum>
  }


  /**
   * chii_group_members create
   */
  export type chii_group_membersCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_group_members
     * 
    **/
    select?: chii_group_membersSelect | null
    /**
     * The data needed to create a chii_group_members.
     * 
    **/
    data: XOR<chii_group_membersCreateInput, chii_group_membersUncheckedCreateInput>
  }


  /**
   * chii_group_members createMany
   */
  export type chii_group_membersCreateManyArgs = {
    /**
     * The data used to create many chii_group_members.
     * 
    **/
    data: Enumerable<chii_group_membersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_group_members update
   */
  export type chii_group_membersUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_group_members
     * 
    **/
    select?: chii_group_membersSelect | null
    /**
     * The data needed to update a chii_group_members.
     * 
    **/
    data: XOR<chii_group_membersUpdateInput, chii_group_membersUncheckedUpdateInput>
    /**
     * Choose, which chii_group_members to update.
     * 
    **/
    where: chii_group_membersWhereUniqueInput
  }


  /**
   * chii_group_members updateMany
   */
  export type chii_group_membersUpdateManyArgs = {
    /**
     * The data used to update chii_group_members.
     * 
    **/
    data: XOR<chii_group_membersUpdateManyMutationInput, chii_group_membersUncheckedUpdateManyInput>
    /**
     * Filter which chii_group_members to update
     * 
    **/
    where?: chii_group_membersWhereInput
  }


  /**
   * chii_group_members upsert
   */
  export type chii_group_membersUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_group_members
     * 
    **/
    select?: chii_group_membersSelect | null
    /**
     * The filter to search for the chii_group_members to update in case it exists.
     * 
    **/
    where: chii_group_membersWhereUniqueInput
    /**
     * In case the chii_group_members found by the `where` argument doesn't exist, create a new chii_group_members with this data.
     * 
    **/
    create: XOR<chii_group_membersCreateInput, chii_group_membersUncheckedCreateInput>
    /**
     * In case the chii_group_members was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_group_membersUpdateInput, chii_group_membersUncheckedUpdateInput>
  }


  /**
   * chii_group_members delete
   */
  export type chii_group_membersDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_group_members
     * 
    **/
    select?: chii_group_membersSelect | null
    /**
     * Filter which chii_group_members to delete.
     * 
    **/
    where: chii_group_membersWhereUniqueInput
  }


  /**
   * chii_group_members deleteMany
   */
  export type chii_group_membersDeleteManyArgs = {
    /**
     * Filter which chii_group_members to delete
     * 
    **/
    where?: chii_group_membersWhereInput
  }


  /**
   * chii_group_members without action
   */
  export type chii_group_membersArgs = {
    /**
     * Select specific fields to fetch from the chii_group_members
     * 
    **/
    select?: chii_group_membersSelect | null
  }



  /**
   * Model chii_group_posts
   */


  export type AggregateChii_group_posts = {
    _count: Chii_group_postsCountAggregateOutputType | null
    _avg: Chii_group_postsAvgAggregateOutputType | null
    _sum: Chii_group_postsSumAggregateOutputType | null
    _min: Chii_group_postsMinAggregateOutputType | null
    _max: Chii_group_postsMaxAggregateOutputType | null
  }

  export type Chii_group_postsAvgAggregateOutputType = {
    grp_pst_id: number | null
    grp_pst_mid: number | null
    grp_pst_uid: number | null
    grp_pst_related: number | null
    grp_pst_dateline: number | null
  }

  export type Chii_group_postsSumAggregateOutputType = {
    grp_pst_id: number | null
    grp_pst_mid: number | null
    grp_pst_uid: number | null
    grp_pst_related: number | null
    grp_pst_dateline: number | null
  }

  export type Chii_group_postsMinAggregateOutputType = {
    grp_pst_id: number | null
    grp_pst_mid: number | null
    grp_pst_uid: number | null
    grp_pst_related: number | null
    grp_pst_content: string | null
    grp_pst_state: boolean | null
    grp_pst_dateline: number | null
  }

  export type Chii_group_postsMaxAggregateOutputType = {
    grp_pst_id: number | null
    grp_pst_mid: number | null
    grp_pst_uid: number | null
    grp_pst_related: number | null
    grp_pst_content: string | null
    grp_pst_state: boolean | null
    grp_pst_dateline: number | null
  }

  export type Chii_group_postsCountAggregateOutputType = {
    grp_pst_id: number
    grp_pst_mid: number
    grp_pst_uid: number
    grp_pst_related: number
    grp_pst_content: number
    grp_pst_state: number
    grp_pst_dateline: number
    _all: number
  }


  export type Chii_group_postsAvgAggregateInputType = {
    grp_pst_id?: true
    grp_pst_mid?: true
    grp_pst_uid?: true
    grp_pst_related?: true
    grp_pst_dateline?: true
  }

  export type Chii_group_postsSumAggregateInputType = {
    grp_pst_id?: true
    grp_pst_mid?: true
    grp_pst_uid?: true
    grp_pst_related?: true
    grp_pst_dateline?: true
  }

  export type Chii_group_postsMinAggregateInputType = {
    grp_pst_id?: true
    grp_pst_mid?: true
    grp_pst_uid?: true
    grp_pst_related?: true
    grp_pst_content?: true
    grp_pst_state?: true
    grp_pst_dateline?: true
  }

  export type Chii_group_postsMaxAggregateInputType = {
    grp_pst_id?: true
    grp_pst_mid?: true
    grp_pst_uid?: true
    grp_pst_related?: true
    grp_pst_content?: true
    grp_pst_state?: true
    grp_pst_dateline?: true
  }

  export type Chii_group_postsCountAggregateInputType = {
    grp_pst_id?: true
    grp_pst_mid?: true
    grp_pst_uid?: true
    grp_pst_related?: true
    grp_pst_content?: true
    grp_pst_state?: true
    grp_pst_dateline?: true
    _all?: true
  }

  export type Chii_group_postsAggregateArgs = {
    /**
     * Filter which chii_group_posts to aggregate.
     * 
    **/
    where?: chii_group_postsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_group_posts to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_group_postsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_group_postsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_group_posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_group_posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_group_posts
    **/
    _count?: true | Chii_group_postsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_group_postsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_group_postsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_group_postsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_group_postsMaxAggregateInputType
  }

  export type GetChii_group_postsAggregateType<T extends Chii_group_postsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_group_posts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_group_posts[P]>
      : GetScalarType<T[P], AggregateChii_group_posts[P]>
  }




  export type Chii_group_postsGroupByArgs = {
    where?: chii_group_postsWhereInput
    orderBy?: Enumerable<chii_group_postsOrderByWithAggregationInput>
    by: Array<Chii_group_postsScalarFieldEnum>
    having?: chii_group_postsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_group_postsCountAggregateInputType | true
    _avg?: Chii_group_postsAvgAggregateInputType
    _sum?: Chii_group_postsSumAggregateInputType
    _min?: Chii_group_postsMinAggregateInputType
    _max?: Chii_group_postsMaxAggregateInputType
  }


  export type Chii_group_postsGroupByOutputType = {
    grp_pst_id: number
    grp_pst_mid: number
    grp_pst_uid: number
    grp_pst_related: number
    grp_pst_content: string
    grp_pst_state: boolean
    grp_pst_dateline: number
    _count: Chii_group_postsCountAggregateOutputType | null
    _avg: Chii_group_postsAvgAggregateOutputType | null
    _sum: Chii_group_postsSumAggregateOutputType | null
    _min: Chii_group_postsMinAggregateOutputType | null
    _max: Chii_group_postsMaxAggregateOutputType | null
  }

  type GetChii_group_postsGroupByPayload<T extends Chii_group_postsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_group_postsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_group_postsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_group_postsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_group_postsGroupByOutputType[P]>
        }
      >
    >


  export type chii_group_postsSelect = {
    grp_pst_id?: boolean
    grp_pst_mid?: boolean
    grp_pst_uid?: boolean
    grp_pst_related?: boolean
    grp_pst_content?: boolean
    grp_pst_state?: boolean
    grp_pst_dateline?: boolean
  }


  export type chii_group_postsGetPayload<S extends boolean | null | undefined | chii_group_postsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_group_posts :
    S extends undefined ? never :
    S extends { include: any } & (chii_group_postsArgs | chii_group_postsFindManyArgs)
    ? chii_group_posts 
    : S extends { select: any } & (chii_group_postsArgs | chii_group_postsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_group_posts ? chii_group_posts[P] : never
  } 
      : chii_group_posts


  type chii_group_postsCountArgs = Merge<
    Omit<chii_group_postsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_group_postsCountAggregateInputType | true
    }
  >

  export interface chii_group_postsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_group_posts that matches the filter.
     * @param {chii_group_postsFindUniqueArgs} args - Arguments to find a Chii_group_posts
     * @example
     * // Get one Chii_group_posts
     * const chii_group_posts = await prisma.chii_group_posts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_group_postsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_group_postsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_group_posts'> extends True ? Prisma__chii_group_postsClient<chii_group_postsGetPayload<T>> : Prisma__chii_group_postsClient<chii_group_postsGetPayload<T> | null, null>

    /**
     * Find one Chii_group_posts that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_group_postsFindUniqueOrThrowArgs} args - Arguments to find a Chii_group_posts
     * @example
     * // Get one Chii_group_posts
     * const chii_group_posts = await prisma.chii_group_posts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_group_postsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_group_postsFindUniqueOrThrowArgs>
    ): Prisma__chii_group_postsClient<chii_group_postsGetPayload<T>>

    /**
     * Find the first Chii_group_posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_group_postsFindFirstArgs} args - Arguments to find a Chii_group_posts
     * @example
     * // Get one Chii_group_posts
     * const chii_group_posts = await prisma.chii_group_posts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_group_postsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_group_postsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_group_posts'> extends True ? Prisma__chii_group_postsClient<chii_group_postsGetPayload<T>> : Prisma__chii_group_postsClient<chii_group_postsGetPayload<T> | null, null>

    /**
     * Find the first Chii_group_posts that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_group_postsFindFirstOrThrowArgs} args - Arguments to find a Chii_group_posts
     * @example
     * // Get one Chii_group_posts
     * const chii_group_posts = await prisma.chii_group_posts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_group_postsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_group_postsFindFirstOrThrowArgs>
    ): Prisma__chii_group_postsClient<chii_group_postsGetPayload<T>>

    /**
     * Find zero or more Chii_group_posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_group_postsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_group_posts
     * const chii_group_posts = await prisma.chii_group_posts.findMany()
     * 
     * // Get first 10 Chii_group_posts
     * const chii_group_posts = await prisma.chii_group_posts.findMany({ take: 10 })
     * 
     * // Only select the `grp_pst_id`
     * const chii_group_postsWithGrp_pst_idOnly = await prisma.chii_group_posts.findMany({ select: { grp_pst_id: true } })
     * 
    **/
    findMany<T extends chii_group_postsFindManyArgs>(
      args?: SelectSubset<T, chii_group_postsFindManyArgs>
    ): PrismaPromise<Array<chii_group_postsGetPayload<T>>>

    /**
     * Create a Chii_group_posts.
     * @param {chii_group_postsCreateArgs} args - Arguments to create a Chii_group_posts.
     * @example
     * // Create one Chii_group_posts
     * const Chii_group_posts = await prisma.chii_group_posts.create({
     *   data: {
     *     // ... data to create a Chii_group_posts
     *   }
     * })
     * 
    **/
    create<T extends chii_group_postsCreateArgs>(
      args: SelectSubset<T, chii_group_postsCreateArgs>
    ): Prisma__chii_group_postsClient<chii_group_postsGetPayload<T>>

    /**
     * Create many Chii_group_posts.
     *     @param {chii_group_postsCreateManyArgs} args - Arguments to create many Chii_group_posts.
     *     @example
     *     // Create many Chii_group_posts
     *     const chii_group_posts = await prisma.chii_group_posts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_group_postsCreateManyArgs>(
      args?: SelectSubset<T, chii_group_postsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_group_posts.
     * @param {chii_group_postsDeleteArgs} args - Arguments to delete one Chii_group_posts.
     * @example
     * // Delete one Chii_group_posts
     * const Chii_group_posts = await prisma.chii_group_posts.delete({
     *   where: {
     *     // ... filter to delete one Chii_group_posts
     *   }
     * })
     * 
    **/
    delete<T extends chii_group_postsDeleteArgs>(
      args: SelectSubset<T, chii_group_postsDeleteArgs>
    ): Prisma__chii_group_postsClient<chii_group_postsGetPayload<T>>

    /**
     * Update one Chii_group_posts.
     * @param {chii_group_postsUpdateArgs} args - Arguments to update one Chii_group_posts.
     * @example
     * // Update one Chii_group_posts
     * const chii_group_posts = await prisma.chii_group_posts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_group_postsUpdateArgs>(
      args: SelectSubset<T, chii_group_postsUpdateArgs>
    ): Prisma__chii_group_postsClient<chii_group_postsGetPayload<T>>

    /**
     * Delete zero or more Chii_group_posts.
     * @param {chii_group_postsDeleteManyArgs} args - Arguments to filter Chii_group_posts to delete.
     * @example
     * // Delete a few Chii_group_posts
     * const { count } = await prisma.chii_group_posts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_group_postsDeleteManyArgs>(
      args?: SelectSubset<T, chii_group_postsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_group_posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_group_postsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_group_posts
     * const chii_group_posts = await prisma.chii_group_posts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_group_postsUpdateManyArgs>(
      args: SelectSubset<T, chii_group_postsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_group_posts.
     * @param {chii_group_postsUpsertArgs} args - Arguments to update or create a Chii_group_posts.
     * @example
     * // Update or create a Chii_group_posts
     * const chii_group_posts = await prisma.chii_group_posts.upsert({
     *   create: {
     *     // ... data to create a Chii_group_posts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_group_posts we want to update
     *   }
     * })
    **/
    upsert<T extends chii_group_postsUpsertArgs>(
      args: SelectSubset<T, chii_group_postsUpsertArgs>
    ): Prisma__chii_group_postsClient<chii_group_postsGetPayload<T>>

    /**
     * Count the number of Chii_group_posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_group_postsCountArgs} args - Arguments to filter Chii_group_posts to count.
     * @example
     * // Count the number of Chii_group_posts
     * const count = await prisma.chii_group_posts.count({
     *   where: {
     *     // ... the filter for the Chii_group_posts we want to count
     *   }
     * })
    **/
    count<T extends chii_group_postsCountArgs>(
      args?: Subset<T, chii_group_postsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_group_postsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_group_posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_group_postsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_group_postsAggregateArgs>(args: Subset<T, Chii_group_postsAggregateArgs>): PrismaPromise<GetChii_group_postsAggregateType<T>>

    /**
     * Group by Chii_group_posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_group_postsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_group_postsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_group_postsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_group_postsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_group_postsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_group_postsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_group_posts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_group_postsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_group_posts base type for findUnique actions
   */
  export type chii_group_postsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_group_posts
     * 
    **/
    select?: chii_group_postsSelect | null
    /**
     * Filter, which chii_group_posts to fetch.
     * 
    **/
    where: chii_group_postsWhereUniqueInput
  }

  /**
   * chii_group_posts: findUnique
   */
  export interface chii_group_postsFindUniqueArgs extends chii_group_postsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_group_posts findUniqueOrThrow
   */
  export type chii_group_postsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_group_posts
     * 
    **/
    select?: chii_group_postsSelect | null
    /**
     * Filter, which chii_group_posts to fetch.
     * 
    **/
    where: chii_group_postsWhereUniqueInput
  }


  /**
   * chii_group_posts base type for findFirst actions
   */
  export type chii_group_postsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_group_posts
     * 
    **/
    select?: chii_group_postsSelect | null
    /**
     * Filter, which chii_group_posts to fetch.
     * 
    **/
    where?: chii_group_postsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_group_posts to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_group_postsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_group_posts.
     * 
    **/
    cursor?: chii_group_postsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_group_posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_group_posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_group_posts.
     * 
    **/
    distinct?: Enumerable<Chii_group_postsScalarFieldEnum>
  }

  /**
   * chii_group_posts: findFirst
   */
  export interface chii_group_postsFindFirstArgs extends chii_group_postsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_group_posts findFirstOrThrow
   */
  export type chii_group_postsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_group_posts
     * 
    **/
    select?: chii_group_postsSelect | null
    /**
     * Filter, which chii_group_posts to fetch.
     * 
    **/
    where?: chii_group_postsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_group_posts to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_group_postsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_group_posts.
     * 
    **/
    cursor?: chii_group_postsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_group_posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_group_posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_group_posts.
     * 
    **/
    distinct?: Enumerable<Chii_group_postsScalarFieldEnum>
  }


  /**
   * chii_group_posts findMany
   */
  export type chii_group_postsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_group_posts
     * 
    **/
    select?: chii_group_postsSelect | null
    /**
     * Filter, which chii_group_posts to fetch.
     * 
    **/
    where?: chii_group_postsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_group_posts to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_group_postsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_group_posts.
     * 
    **/
    cursor?: chii_group_postsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_group_posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_group_posts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_group_postsScalarFieldEnum>
  }


  /**
   * chii_group_posts create
   */
  export type chii_group_postsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_group_posts
     * 
    **/
    select?: chii_group_postsSelect | null
    /**
     * The data needed to create a chii_group_posts.
     * 
    **/
    data: XOR<chii_group_postsCreateInput, chii_group_postsUncheckedCreateInput>
  }


  /**
   * chii_group_posts createMany
   */
  export type chii_group_postsCreateManyArgs = {
    /**
     * The data used to create many chii_group_posts.
     * 
    **/
    data: Enumerable<chii_group_postsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_group_posts update
   */
  export type chii_group_postsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_group_posts
     * 
    **/
    select?: chii_group_postsSelect | null
    /**
     * The data needed to update a chii_group_posts.
     * 
    **/
    data: XOR<chii_group_postsUpdateInput, chii_group_postsUncheckedUpdateInput>
    /**
     * Choose, which chii_group_posts to update.
     * 
    **/
    where: chii_group_postsWhereUniqueInput
  }


  /**
   * chii_group_posts updateMany
   */
  export type chii_group_postsUpdateManyArgs = {
    /**
     * The data used to update chii_group_posts.
     * 
    **/
    data: XOR<chii_group_postsUpdateManyMutationInput, chii_group_postsUncheckedUpdateManyInput>
    /**
     * Filter which chii_group_posts to update
     * 
    **/
    where?: chii_group_postsWhereInput
  }


  /**
   * chii_group_posts upsert
   */
  export type chii_group_postsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_group_posts
     * 
    **/
    select?: chii_group_postsSelect | null
    /**
     * The filter to search for the chii_group_posts to update in case it exists.
     * 
    **/
    where: chii_group_postsWhereUniqueInput
    /**
     * In case the chii_group_posts found by the `where` argument doesn't exist, create a new chii_group_posts with this data.
     * 
    **/
    create: XOR<chii_group_postsCreateInput, chii_group_postsUncheckedCreateInput>
    /**
     * In case the chii_group_posts was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_group_postsUpdateInput, chii_group_postsUncheckedUpdateInput>
  }


  /**
   * chii_group_posts delete
   */
  export type chii_group_postsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_group_posts
     * 
    **/
    select?: chii_group_postsSelect | null
    /**
     * Filter which chii_group_posts to delete.
     * 
    **/
    where: chii_group_postsWhereUniqueInput
  }


  /**
   * chii_group_posts deleteMany
   */
  export type chii_group_postsDeleteManyArgs = {
    /**
     * Filter which chii_group_posts to delete
     * 
    **/
    where?: chii_group_postsWhereInput
  }


  /**
   * chii_group_posts without action
   */
  export type chii_group_postsArgs = {
    /**
     * Select specific fields to fetch from the chii_group_posts
     * 
    **/
    select?: chii_group_postsSelect | null
  }



  /**
   * Model chii_group_topics
   */


  export type AggregateChii_group_topics = {
    _count: Chii_group_topicsCountAggregateOutputType | null
    _avg: Chii_group_topicsAvgAggregateOutputType | null
    _sum: Chii_group_topicsSumAggregateOutputType | null
    _min: Chii_group_topicsMinAggregateOutputType | null
    _max: Chii_group_topicsMaxAggregateOutputType | null
  }

  export type Chii_group_topicsAvgAggregateOutputType = {
    grp_tpc_id: number | null
    grp_tpc_gid: number | null
    grp_tpc_uid: number | null
    grp_tpc_dateline: number | null
    grp_tpc_lastpost: number | null
    grp_tpc_replies: number | null
  }

  export type Chii_group_topicsSumAggregateOutputType = {
    grp_tpc_id: number | null
    grp_tpc_gid: number | null
    grp_tpc_uid: number | null
    grp_tpc_dateline: number | null
    grp_tpc_lastpost: number | null
    grp_tpc_replies: number | null
  }

  export type Chii_group_topicsMinAggregateOutputType = {
    grp_tpc_id: number | null
    grp_tpc_gid: number | null
    grp_tpc_uid: number | null
    grp_tpc_title: string | null
    grp_tpc_dateline: number | null
    grp_tpc_lastpost: number | null
    grp_tpc_replies: number | null
    grp_tpc_state: boolean | null
    grp_tpc_display: boolean | null
  }

  export type Chii_group_topicsMaxAggregateOutputType = {
    grp_tpc_id: number | null
    grp_tpc_gid: number | null
    grp_tpc_uid: number | null
    grp_tpc_title: string | null
    grp_tpc_dateline: number | null
    grp_tpc_lastpost: number | null
    grp_tpc_replies: number | null
    grp_tpc_state: boolean | null
    grp_tpc_display: boolean | null
  }

  export type Chii_group_topicsCountAggregateOutputType = {
    grp_tpc_id: number
    grp_tpc_gid: number
    grp_tpc_uid: number
    grp_tpc_title: number
    grp_tpc_dateline: number
    grp_tpc_lastpost: number
    grp_tpc_replies: number
    grp_tpc_state: number
    grp_tpc_display: number
    _all: number
  }


  export type Chii_group_topicsAvgAggregateInputType = {
    grp_tpc_id?: true
    grp_tpc_gid?: true
    grp_tpc_uid?: true
    grp_tpc_dateline?: true
    grp_tpc_lastpost?: true
    grp_tpc_replies?: true
  }

  export type Chii_group_topicsSumAggregateInputType = {
    grp_tpc_id?: true
    grp_tpc_gid?: true
    grp_tpc_uid?: true
    grp_tpc_dateline?: true
    grp_tpc_lastpost?: true
    grp_tpc_replies?: true
  }

  export type Chii_group_topicsMinAggregateInputType = {
    grp_tpc_id?: true
    grp_tpc_gid?: true
    grp_tpc_uid?: true
    grp_tpc_title?: true
    grp_tpc_dateline?: true
    grp_tpc_lastpost?: true
    grp_tpc_replies?: true
    grp_tpc_state?: true
    grp_tpc_display?: true
  }

  export type Chii_group_topicsMaxAggregateInputType = {
    grp_tpc_id?: true
    grp_tpc_gid?: true
    grp_tpc_uid?: true
    grp_tpc_title?: true
    grp_tpc_dateline?: true
    grp_tpc_lastpost?: true
    grp_tpc_replies?: true
    grp_tpc_state?: true
    grp_tpc_display?: true
  }

  export type Chii_group_topicsCountAggregateInputType = {
    grp_tpc_id?: true
    grp_tpc_gid?: true
    grp_tpc_uid?: true
    grp_tpc_title?: true
    grp_tpc_dateline?: true
    grp_tpc_lastpost?: true
    grp_tpc_replies?: true
    grp_tpc_state?: true
    grp_tpc_display?: true
    _all?: true
  }

  export type Chii_group_topicsAggregateArgs = {
    /**
     * Filter which chii_group_topics to aggregate.
     * 
    **/
    where?: chii_group_topicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_group_topics to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_group_topicsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_group_topicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_group_topics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_group_topics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_group_topics
    **/
    _count?: true | Chii_group_topicsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_group_topicsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_group_topicsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_group_topicsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_group_topicsMaxAggregateInputType
  }

  export type GetChii_group_topicsAggregateType<T extends Chii_group_topicsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_group_topics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_group_topics[P]>
      : GetScalarType<T[P], AggregateChii_group_topics[P]>
  }




  export type Chii_group_topicsGroupByArgs = {
    where?: chii_group_topicsWhereInput
    orderBy?: Enumerable<chii_group_topicsOrderByWithAggregationInput>
    by: Array<Chii_group_topicsScalarFieldEnum>
    having?: chii_group_topicsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_group_topicsCountAggregateInputType | true
    _avg?: Chii_group_topicsAvgAggregateInputType
    _sum?: Chii_group_topicsSumAggregateInputType
    _min?: Chii_group_topicsMinAggregateInputType
    _max?: Chii_group_topicsMaxAggregateInputType
  }


  export type Chii_group_topicsGroupByOutputType = {
    grp_tpc_id: number
    grp_tpc_gid: number
    grp_tpc_uid: number
    grp_tpc_title: string
    grp_tpc_dateline: number
    grp_tpc_lastpost: number
    grp_tpc_replies: number
    grp_tpc_state: boolean
    grp_tpc_display: boolean
    _count: Chii_group_topicsCountAggregateOutputType | null
    _avg: Chii_group_topicsAvgAggregateOutputType | null
    _sum: Chii_group_topicsSumAggregateOutputType | null
    _min: Chii_group_topicsMinAggregateOutputType | null
    _max: Chii_group_topicsMaxAggregateOutputType | null
  }

  type GetChii_group_topicsGroupByPayload<T extends Chii_group_topicsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_group_topicsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_group_topicsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_group_topicsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_group_topicsGroupByOutputType[P]>
        }
      >
    >


  export type chii_group_topicsSelect = {
    grp_tpc_id?: boolean
    grp_tpc_gid?: boolean
    grp_tpc_uid?: boolean
    grp_tpc_title?: boolean
    grp_tpc_dateline?: boolean
    grp_tpc_lastpost?: boolean
    grp_tpc_replies?: boolean
    grp_tpc_state?: boolean
    grp_tpc_display?: boolean
  }


  export type chii_group_topicsGetPayload<S extends boolean | null | undefined | chii_group_topicsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_group_topics :
    S extends undefined ? never :
    S extends { include: any } & (chii_group_topicsArgs | chii_group_topicsFindManyArgs)
    ? chii_group_topics 
    : S extends { select: any } & (chii_group_topicsArgs | chii_group_topicsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_group_topics ? chii_group_topics[P] : never
  } 
      : chii_group_topics


  type chii_group_topicsCountArgs = Merge<
    Omit<chii_group_topicsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_group_topicsCountAggregateInputType | true
    }
  >

  export interface chii_group_topicsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_group_topics that matches the filter.
     * @param {chii_group_topicsFindUniqueArgs} args - Arguments to find a Chii_group_topics
     * @example
     * // Get one Chii_group_topics
     * const chii_group_topics = await prisma.chii_group_topics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_group_topicsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_group_topicsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_group_topics'> extends True ? Prisma__chii_group_topicsClient<chii_group_topicsGetPayload<T>> : Prisma__chii_group_topicsClient<chii_group_topicsGetPayload<T> | null, null>

    /**
     * Find one Chii_group_topics that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_group_topicsFindUniqueOrThrowArgs} args - Arguments to find a Chii_group_topics
     * @example
     * // Get one Chii_group_topics
     * const chii_group_topics = await prisma.chii_group_topics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_group_topicsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_group_topicsFindUniqueOrThrowArgs>
    ): Prisma__chii_group_topicsClient<chii_group_topicsGetPayload<T>>

    /**
     * Find the first Chii_group_topics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_group_topicsFindFirstArgs} args - Arguments to find a Chii_group_topics
     * @example
     * // Get one Chii_group_topics
     * const chii_group_topics = await prisma.chii_group_topics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_group_topicsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_group_topicsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_group_topics'> extends True ? Prisma__chii_group_topicsClient<chii_group_topicsGetPayload<T>> : Prisma__chii_group_topicsClient<chii_group_topicsGetPayload<T> | null, null>

    /**
     * Find the first Chii_group_topics that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_group_topicsFindFirstOrThrowArgs} args - Arguments to find a Chii_group_topics
     * @example
     * // Get one Chii_group_topics
     * const chii_group_topics = await prisma.chii_group_topics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_group_topicsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_group_topicsFindFirstOrThrowArgs>
    ): Prisma__chii_group_topicsClient<chii_group_topicsGetPayload<T>>

    /**
     * Find zero or more Chii_group_topics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_group_topicsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_group_topics
     * const chii_group_topics = await prisma.chii_group_topics.findMany()
     * 
     * // Get first 10 Chii_group_topics
     * const chii_group_topics = await prisma.chii_group_topics.findMany({ take: 10 })
     * 
     * // Only select the `grp_tpc_id`
     * const chii_group_topicsWithGrp_tpc_idOnly = await prisma.chii_group_topics.findMany({ select: { grp_tpc_id: true } })
     * 
    **/
    findMany<T extends chii_group_topicsFindManyArgs>(
      args?: SelectSubset<T, chii_group_topicsFindManyArgs>
    ): PrismaPromise<Array<chii_group_topicsGetPayload<T>>>

    /**
     * Create a Chii_group_topics.
     * @param {chii_group_topicsCreateArgs} args - Arguments to create a Chii_group_topics.
     * @example
     * // Create one Chii_group_topics
     * const Chii_group_topics = await prisma.chii_group_topics.create({
     *   data: {
     *     // ... data to create a Chii_group_topics
     *   }
     * })
     * 
    **/
    create<T extends chii_group_topicsCreateArgs>(
      args: SelectSubset<T, chii_group_topicsCreateArgs>
    ): Prisma__chii_group_topicsClient<chii_group_topicsGetPayload<T>>

    /**
     * Create many Chii_group_topics.
     *     @param {chii_group_topicsCreateManyArgs} args - Arguments to create many Chii_group_topics.
     *     @example
     *     // Create many Chii_group_topics
     *     const chii_group_topics = await prisma.chii_group_topics.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_group_topicsCreateManyArgs>(
      args?: SelectSubset<T, chii_group_topicsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_group_topics.
     * @param {chii_group_topicsDeleteArgs} args - Arguments to delete one Chii_group_topics.
     * @example
     * // Delete one Chii_group_topics
     * const Chii_group_topics = await prisma.chii_group_topics.delete({
     *   where: {
     *     // ... filter to delete one Chii_group_topics
     *   }
     * })
     * 
    **/
    delete<T extends chii_group_topicsDeleteArgs>(
      args: SelectSubset<T, chii_group_topicsDeleteArgs>
    ): Prisma__chii_group_topicsClient<chii_group_topicsGetPayload<T>>

    /**
     * Update one Chii_group_topics.
     * @param {chii_group_topicsUpdateArgs} args - Arguments to update one Chii_group_topics.
     * @example
     * // Update one Chii_group_topics
     * const chii_group_topics = await prisma.chii_group_topics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_group_topicsUpdateArgs>(
      args: SelectSubset<T, chii_group_topicsUpdateArgs>
    ): Prisma__chii_group_topicsClient<chii_group_topicsGetPayload<T>>

    /**
     * Delete zero or more Chii_group_topics.
     * @param {chii_group_topicsDeleteManyArgs} args - Arguments to filter Chii_group_topics to delete.
     * @example
     * // Delete a few Chii_group_topics
     * const { count } = await prisma.chii_group_topics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_group_topicsDeleteManyArgs>(
      args?: SelectSubset<T, chii_group_topicsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_group_topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_group_topicsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_group_topics
     * const chii_group_topics = await prisma.chii_group_topics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_group_topicsUpdateManyArgs>(
      args: SelectSubset<T, chii_group_topicsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_group_topics.
     * @param {chii_group_topicsUpsertArgs} args - Arguments to update or create a Chii_group_topics.
     * @example
     * // Update or create a Chii_group_topics
     * const chii_group_topics = await prisma.chii_group_topics.upsert({
     *   create: {
     *     // ... data to create a Chii_group_topics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_group_topics we want to update
     *   }
     * })
    **/
    upsert<T extends chii_group_topicsUpsertArgs>(
      args: SelectSubset<T, chii_group_topicsUpsertArgs>
    ): Prisma__chii_group_topicsClient<chii_group_topicsGetPayload<T>>

    /**
     * Count the number of Chii_group_topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_group_topicsCountArgs} args - Arguments to filter Chii_group_topics to count.
     * @example
     * // Count the number of Chii_group_topics
     * const count = await prisma.chii_group_topics.count({
     *   where: {
     *     // ... the filter for the Chii_group_topics we want to count
     *   }
     * })
    **/
    count<T extends chii_group_topicsCountArgs>(
      args?: Subset<T, chii_group_topicsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_group_topicsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_group_topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_group_topicsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_group_topicsAggregateArgs>(args: Subset<T, Chii_group_topicsAggregateArgs>): PrismaPromise<GetChii_group_topicsAggregateType<T>>

    /**
     * Group by Chii_group_topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_group_topicsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_group_topicsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_group_topicsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_group_topicsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_group_topicsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_group_topicsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_group_topics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_group_topicsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_group_topics base type for findUnique actions
   */
  export type chii_group_topicsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_group_topics
     * 
    **/
    select?: chii_group_topicsSelect | null
    /**
     * Filter, which chii_group_topics to fetch.
     * 
    **/
    where: chii_group_topicsWhereUniqueInput
  }

  /**
   * chii_group_topics: findUnique
   */
  export interface chii_group_topicsFindUniqueArgs extends chii_group_topicsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_group_topics findUniqueOrThrow
   */
  export type chii_group_topicsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_group_topics
     * 
    **/
    select?: chii_group_topicsSelect | null
    /**
     * Filter, which chii_group_topics to fetch.
     * 
    **/
    where: chii_group_topicsWhereUniqueInput
  }


  /**
   * chii_group_topics base type for findFirst actions
   */
  export type chii_group_topicsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_group_topics
     * 
    **/
    select?: chii_group_topicsSelect | null
    /**
     * Filter, which chii_group_topics to fetch.
     * 
    **/
    where?: chii_group_topicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_group_topics to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_group_topicsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_group_topics.
     * 
    **/
    cursor?: chii_group_topicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_group_topics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_group_topics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_group_topics.
     * 
    **/
    distinct?: Enumerable<Chii_group_topicsScalarFieldEnum>
  }

  /**
   * chii_group_topics: findFirst
   */
  export interface chii_group_topicsFindFirstArgs extends chii_group_topicsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_group_topics findFirstOrThrow
   */
  export type chii_group_topicsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_group_topics
     * 
    **/
    select?: chii_group_topicsSelect | null
    /**
     * Filter, which chii_group_topics to fetch.
     * 
    **/
    where?: chii_group_topicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_group_topics to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_group_topicsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_group_topics.
     * 
    **/
    cursor?: chii_group_topicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_group_topics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_group_topics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_group_topics.
     * 
    **/
    distinct?: Enumerable<Chii_group_topicsScalarFieldEnum>
  }


  /**
   * chii_group_topics findMany
   */
  export type chii_group_topicsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_group_topics
     * 
    **/
    select?: chii_group_topicsSelect | null
    /**
     * Filter, which chii_group_topics to fetch.
     * 
    **/
    where?: chii_group_topicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_group_topics to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_group_topicsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_group_topics.
     * 
    **/
    cursor?: chii_group_topicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_group_topics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_group_topics.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_group_topicsScalarFieldEnum>
  }


  /**
   * chii_group_topics create
   */
  export type chii_group_topicsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_group_topics
     * 
    **/
    select?: chii_group_topicsSelect | null
    /**
     * The data needed to create a chii_group_topics.
     * 
    **/
    data: XOR<chii_group_topicsCreateInput, chii_group_topicsUncheckedCreateInput>
  }


  /**
   * chii_group_topics createMany
   */
  export type chii_group_topicsCreateManyArgs = {
    /**
     * The data used to create many chii_group_topics.
     * 
    **/
    data: Enumerable<chii_group_topicsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_group_topics update
   */
  export type chii_group_topicsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_group_topics
     * 
    **/
    select?: chii_group_topicsSelect | null
    /**
     * The data needed to update a chii_group_topics.
     * 
    **/
    data: XOR<chii_group_topicsUpdateInput, chii_group_topicsUncheckedUpdateInput>
    /**
     * Choose, which chii_group_topics to update.
     * 
    **/
    where: chii_group_topicsWhereUniqueInput
  }


  /**
   * chii_group_topics updateMany
   */
  export type chii_group_topicsUpdateManyArgs = {
    /**
     * The data used to update chii_group_topics.
     * 
    **/
    data: XOR<chii_group_topicsUpdateManyMutationInput, chii_group_topicsUncheckedUpdateManyInput>
    /**
     * Filter which chii_group_topics to update
     * 
    **/
    where?: chii_group_topicsWhereInput
  }


  /**
   * chii_group_topics upsert
   */
  export type chii_group_topicsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_group_topics
     * 
    **/
    select?: chii_group_topicsSelect | null
    /**
     * The filter to search for the chii_group_topics to update in case it exists.
     * 
    **/
    where: chii_group_topicsWhereUniqueInput
    /**
     * In case the chii_group_topics found by the `where` argument doesn't exist, create a new chii_group_topics with this data.
     * 
    **/
    create: XOR<chii_group_topicsCreateInput, chii_group_topicsUncheckedCreateInput>
    /**
     * In case the chii_group_topics was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_group_topicsUpdateInput, chii_group_topicsUncheckedUpdateInput>
  }


  /**
   * chii_group_topics delete
   */
  export type chii_group_topicsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_group_topics
     * 
    **/
    select?: chii_group_topicsSelect | null
    /**
     * Filter which chii_group_topics to delete.
     * 
    **/
    where: chii_group_topicsWhereUniqueInput
  }


  /**
   * chii_group_topics deleteMany
   */
  export type chii_group_topicsDeleteManyArgs = {
    /**
     * Filter which chii_group_topics to delete
     * 
    **/
    where?: chii_group_topicsWhereInput
  }


  /**
   * chii_group_topics without action
   */
  export type chii_group_topicsArgs = {
    /**
     * Select specific fields to fetch from the chii_group_topics
     * 
    **/
    select?: chii_group_topicsSelect | null
  }



  /**
   * Model chii_groups
   */


  export type AggregateChii_groups = {
    _count: Chii_groupsCountAggregateOutputType | null
    _avg: Chii_groupsAvgAggregateOutputType | null
    _sum: Chii_groupsSumAggregateOutputType | null
    _min: Chii_groupsMinAggregateOutputType | null
    _max: Chii_groupsMaxAggregateOutputType | null
  }

  export type Chii_groupsAvgAggregateOutputType = {
    grp_id: number | null
    grp_cat: number | null
    grp_creator: number | null
    grp_topics: number | null
    grp_posts: number | null
    grp_members: number | null
    grp_lastpost: number | null
    grp_builddate: number | null
  }

  export type Chii_groupsSumAggregateOutputType = {
    grp_id: number | null
    grp_cat: number | null
    grp_creator: number | null
    grp_topics: number | null
    grp_posts: number | null
    grp_members: number | null
    grp_lastpost: number | null
    grp_builddate: number | null
  }

  export type Chii_groupsMinAggregateOutputType = {
    grp_id: number | null
    grp_cat: number | null
    grp_name: string | null
    grp_title: string | null
    grp_icon: string | null
    grp_creator: number | null
    grp_topics: number | null
    grp_posts: number | null
    grp_members: number | null
    grp_desc: string | null
    grp_lastpost: number | null
    grp_builddate: number | null
    grp_accessible: boolean | null
    grp_nsfw: boolean | null
  }

  export type Chii_groupsMaxAggregateOutputType = {
    grp_id: number | null
    grp_cat: number | null
    grp_name: string | null
    grp_title: string | null
    grp_icon: string | null
    grp_creator: number | null
    grp_topics: number | null
    grp_posts: number | null
    grp_members: number | null
    grp_desc: string | null
    grp_lastpost: number | null
    grp_builddate: number | null
    grp_accessible: boolean | null
    grp_nsfw: boolean | null
  }

  export type Chii_groupsCountAggregateOutputType = {
    grp_id: number
    grp_cat: number
    grp_name: number
    grp_title: number
    grp_icon: number
    grp_creator: number
    grp_topics: number
    grp_posts: number
    grp_members: number
    grp_desc: number
    grp_lastpost: number
    grp_builddate: number
    grp_accessible: number
    grp_nsfw: number
    _all: number
  }


  export type Chii_groupsAvgAggregateInputType = {
    grp_id?: true
    grp_cat?: true
    grp_creator?: true
    grp_topics?: true
    grp_posts?: true
    grp_members?: true
    grp_lastpost?: true
    grp_builddate?: true
  }

  export type Chii_groupsSumAggregateInputType = {
    grp_id?: true
    grp_cat?: true
    grp_creator?: true
    grp_topics?: true
    grp_posts?: true
    grp_members?: true
    grp_lastpost?: true
    grp_builddate?: true
  }

  export type Chii_groupsMinAggregateInputType = {
    grp_id?: true
    grp_cat?: true
    grp_name?: true
    grp_title?: true
    grp_icon?: true
    grp_creator?: true
    grp_topics?: true
    grp_posts?: true
    grp_members?: true
    grp_desc?: true
    grp_lastpost?: true
    grp_builddate?: true
    grp_accessible?: true
    grp_nsfw?: true
  }

  export type Chii_groupsMaxAggregateInputType = {
    grp_id?: true
    grp_cat?: true
    grp_name?: true
    grp_title?: true
    grp_icon?: true
    grp_creator?: true
    grp_topics?: true
    grp_posts?: true
    grp_members?: true
    grp_desc?: true
    grp_lastpost?: true
    grp_builddate?: true
    grp_accessible?: true
    grp_nsfw?: true
  }

  export type Chii_groupsCountAggregateInputType = {
    grp_id?: true
    grp_cat?: true
    grp_name?: true
    grp_title?: true
    grp_icon?: true
    grp_creator?: true
    grp_topics?: true
    grp_posts?: true
    grp_members?: true
    grp_desc?: true
    grp_lastpost?: true
    grp_builddate?: true
    grp_accessible?: true
    grp_nsfw?: true
    _all?: true
  }

  export type Chii_groupsAggregateArgs = {
    /**
     * Filter which chii_groups to aggregate.
     * 
    **/
    where?: chii_groupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_groups to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_groupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_groupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_groups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_groups
    **/
    _count?: true | Chii_groupsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_groupsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_groupsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_groupsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_groupsMaxAggregateInputType
  }

  export type GetChii_groupsAggregateType<T extends Chii_groupsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_groups]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_groups[P]>
      : GetScalarType<T[P], AggregateChii_groups[P]>
  }




  export type Chii_groupsGroupByArgs = {
    where?: chii_groupsWhereInput
    orderBy?: Enumerable<chii_groupsOrderByWithAggregationInput>
    by: Array<Chii_groupsScalarFieldEnum>
    having?: chii_groupsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_groupsCountAggregateInputType | true
    _avg?: Chii_groupsAvgAggregateInputType
    _sum?: Chii_groupsSumAggregateInputType
    _min?: Chii_groupsMinAggregateInputType
    _max?: Chii_groupsMaxAggregateInputType
  }


  export type Chii_groupsGroupByOutputType = {
    grp_id: number
    grp_cat: number
    grp_name: string
    grp_title: string
    grp_icon: string
    grp_creator: number
    grp_topics: number
    grp_posts: number
    grp_members: number
    grp_desc: string
    grp_lastpost: number
    grp_builddate: number
    grp_accessible: boolean
    grp_nsfw: boolean
    _count: Chii_groupsCountAggregateOutputType | null
    _avg: Chii_groupsAvgAggregateOutputType | null
    _sum: Chii_groupsSumAggregateOutputType | null
    _min: Chii_groupsMinAggregateOutputType | null
    _max: Chii_groupsMaxAggregateOutputType | null
  }

  type GetChii_groupsGroupByPayload<T extends Chii_groupsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_groupsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_groupsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_groupsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_groupsGroupByOutputType[P]>
        }
      >
    >


  export type chii_groupsSelect = {
    grp_id?: boolean
    grp_cat?: boolean
    grp_name?: boolean
    grp_title?: boolean
    grp_icon?: boolean
    grp_creator?: boolean
    grp_topics?: boolean
    grp_posts?: boolean
    grp_members?: boolean
    grp_desc?: boolean
    grp_lastpost?: boolean
    grp_builddate?: boolean
    grp_accessible?: boolean
    grp_nsfw?: boolean
  }


  export type chii_groupsGetPayload<S extends boolean | null | undefined | chii_groupsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_groups :
    S extends undefined ? never :
    S extends { include: any } & (chii_groupsArgs | chii_groupsFindManyArgs)
    ? chii_groups 
    : S extends { select: any } & (chii_groupsArgs | chii_groupsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_groups ? chii_groups[P] : never
  } 
      : chii_groups


  type chii_groupsCountArgs = Merge<
    Omit<chii_groupsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_groupsCountAggregateInputType | true
    }
  >

  export interface chii_groupsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_groups that matches the filter.
     * @param {chii_groupsFindUniqueArgs} args - Arguments to find a Chii_groups
     * @example
     * // Get one Chii_groups
     * const chii_groups = await prisma.chii_groups.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_groupsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_groupsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_groups'> extends True ? Prisma__chii_groupsClient<chii_groupsGetPayload<T>> : Prisma__chii_groupsClient<chii_groupsGetPayload<T> | null, null>

    /**
     * Find one Chii_groups that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_groupsFindUniqueOrThrowArgs} args - Arguments to find a Chii_groups
     * @example
     * // Get one Chii_groups
     * const chii_groups = await prisma.chii_groups.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_groupsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_groupsFindUniqueOrThrowArgs>
    ): Prisma__chii_groupsClient<chii_groupsGetPayload<T>>

    /**
     * Find the first Chii_groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_groupsFindFirstArgs} args - Arguments to find a Chii_groups
     * @example
     * // Get one Chii_groups
     * const chii_groups = await prisma.chii_groups.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_groupsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_groupsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_groups'> extends True ? Prisma__chii_groupsClient<chii_groupsGetPayload<T>> : Prisma__chii_groupsClient<chii_groupsGetPayload<T> | null, null>

    /**
     * Find the first Chii_groups that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_groupsFindFirstOrThrowArgs} args - Arguments to find a Chii_groups
     * @example
     * // Get one Chii_groups
     * const chii_groups = await prisma.chii_groups.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_groupsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_groupsFindFirstOrThrowArgs>
    ): Prisma__chii_groupsClient<chii_groupsGetPayload<T>>

    /**
     * Find zero or more Chii_groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_groupsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_groups
     * const chii_groups = await prisma.chii_groups.findMany()
     * 
     * // Get first 10 Chii_groups
     * const chii_groups = await prisma.chii_groups.findMany({ take: 10 })
     * 
     * // Only select the `grp_id`
     * const chii_groupsWithGrp_idOnly = await prisma.chii_groups.findMany({ select: { grp_id: true } })
     * 
    **/
    findMany<T extends chii_groupsFindManyArgs>(
      args?: SelectSubset<T, chii_groupsFindManyArgs>
    ): PrismaPromise<Array<chii_groupsGetPayload<T>>>

    /**
     * Create a Chii_groups.
     * @param {chii_groupsCreateArgs} args - Arguments to create a Chii_groups.
     * @example
     * // Create one Chii_groups
     * const Chii_groups = await prisma.chii_groups.create({
     *   data: {
     *     // ... data to create a Chii_groups
     *   }
     * })
     * 
    **/
    create<T extends chii_groupsCreateArgs>(
      args: SelectSubset<T, chii_groupsCreateArgs>
    ): Prisma__chii_groupsClient<chii_groupsGetPayload<T>>

    /**
     * Create many Chii_groups.
     *     @param {chii_groupsCreateManyArgs} args - Arguments to create many Chii_groups.
     *     @example
     *     // Create many Chii_groups
     *     const chii_groups = await prisma.chii_groups.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_groupsCreateManyArgs>(
      args?: SelectSubset<T, chii_groupsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_groups.
     * @param {chii_groupsDeleteArgs} args - Arguments to delete one Chii_groups.
     * @example
     * // Delete one Chii_groups
     * const Chii_groups = await prisma.chii_groups.delete({
     *   where: {
     *     // ... filter to delete one Chii_groups
     *   }
     * })
     * 
    **/
    delete<T extends chii_groupsDeleteArgs>(
      args: SelectSubset<T, chii_groupsDeleteArgs>
    ): Prisma__chii_groupsClient<chii_groupsGetPayload<T>>

    /**
     * Update one Chii_groups.
     * @param {chii_groupsUpdateArgs} args - Arguments to update one Chii_groups.
     * @example
     * // Update one Chii_groups
     * const chii_groups = await prisma.chii_groups.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_groupsUpdateArgs>(
      args: SelectSubset<T, chii_groupsUpdateArgs>
    ): Prisma__chii_groupsClient<chii_groupsGetPayload<T>>

    /**
     * Delete zero or more Chii_groups.
     * @param {chii_groupsDeleteManyArgs} args - Arguments to filter Chii_groups to delete.
     * @example
     * // Delete a few Chii_groups
     * const { count } = await prisma.chii_groups.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_groupsDeleteManyArgs>(
      args?: SelectSubset<T, chii_groupsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_groupsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_groups
     * const chii_groups = await prisma.chii_groups.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_groupsUpdateManyArgs>(
      args: SelectSubset<T, chii_groupsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_groups.
     * @param {chii_groupsUpsertArgs} args - Arguments to update or create a Chii_groups.
     * @example
     * // Update or create a Chii_groups
     * const chii_groups = await prisma.chii_groups.upsert({
     *   create: {
     *     // ... data to create a Chii_groups
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_groups we want to update
     *   }
     * })
    **/
    upsert<T extends chii_groupsUpsertArgs>(
      args: SelectSubset<T, chii_groupsUpsertArgs>
    ): Prisma__chii_groupsClient<chii_groupsGetPayload<T>>

    /**
     * Count the number of Chii_groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_groupsCountArgs} args - Arguments to filter Chii_groups to count.
     * @example
     * // Count the number of Chii_groups
     * const count = await prisma.chii_groups.count({
     *   where: {
     *     // ... the filter for the Chii_groups we want to count
     *   }
     * })
    **/
    count<T extends chii_groupsCountArgs>(
      args?: Subset<T, chii_groupsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_groupsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_groupsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_groupsAggregateArgs>(args: Subset<T, Chii_groupsAggregateArgs>): PrismaPromise<GetChii_groupsAggregateType<T>>

    /**
     * Group by Chii_groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_groupsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_groupsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_groupsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_groupsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_groupsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_groupsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_groups.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_groupsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_groups base type for findUnique actions
   */
  export type chii_groupsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_groups
     * 
    **/
    select?: chii_groupsSelect | null
    /**
     * Filter, which chii_groups to fetch.
     * 
    **/
    where: chii_groupsWhereUniqueInput
  }

  /**
   * chii_groups: findUnique
   */
  export interface chii_groupsFindUniqueArgs extends chii_groupsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_groups findUniqueOrThrow
   */
  export type chii_groupsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_groups
     * 
    **/
    select?: chii_groupsSelect | null
    /**
     * Filter, which chii_groups to fetch.
     * 
    **/
    where: chii_groupsWhereUniqueInput
  }


  /**
   * chii_groups base type for findFirst actions
   */
  export type chii_groupsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_groups
     * 
    **/
    select?: chii_groupsSelect | null
    /**
     * Filter, which chii_groups to fetch.
     * 
    **/
    where?: chii_groupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_groups to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_groupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_groups.
     * 
    **/
    cursor?: chii_groupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_groups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_groups.
     * 
    **/
    distinct?: Enumerable<Chii_groupsScalarFieldEnum>
  }

  /**
   * chii_groups: findFirst
   */
  export interface chii_groupsFindFirstArgs extends chii_groupsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_groups findFirstOrThrow
   */
  export type chii_groupsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_groups
     * 
    **/
    select?: chii_groupsSelect | null
    /**
     * Filter, which chii_groups to fetch.
     * 
    **/
    where?: chii_groupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_groups to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_groupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_groups.
     * 
    **/
    cursor?: chii_groupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_groups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_groups.
     * 
    **/
    distinct?: Enumerable<Chii_groupsScalarFieldEnum>
  }


  /**
   * chii_groups findMany
   */
  export type chii_groupsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_groups
     * 
    **/
    select?: chii_groupsSelect | null
    /**
     * Filter, which chii_groups to fetch.
     * 
    **/
    where?: chii_groupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_groups to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_groupsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_groups.
     * 
    **/
    cursor?: chii_groupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_groups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_groups.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_groupsScalarFieldEnum>
  }


  /**
   * chii_groups create
   */
  export type chii_groupsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_groups
     * 
    **/
    select?: chii_groupsSelect | null
    /**
     * The data needed to create a chii_groups.
     * 
    **/
    data: XOR<chii_groupsCreateInput, chii_groupsUncheckedCreateInput>
  }


  /**
   * chii_groups createMany
   */
  export type chii_groupsCreateManyArgs = {
    /**
     * The data used to create many chii_groups.
     * 
    **/
    data: Enumerable<chii_groupsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_groups update
   */
  export type chii_groupsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_groups
     * 
    **/
    select?: chii_groupsSelect | null
    /**
     * The data needed to update a chii_groups.
     * 
    **/
    data: XOR<chii_groupsUpdateInput, chii_groupsUncheckedUpdateInput>
    /**
     * Choose, which chii_groups to update.
     * 
    **/
    where: chii_groupsWhereUniqueInput
  }


  /**
   * chii_groups updateMany
   */
  export type chii_groupsUpdateManyArgs = {
    /**
     * The data used to update chii_groups.
     * 
    **/
    data: XOR<chii_groupsUpdateManyMutationInput, chii_groupsUncheckedUpdateManyInput>
    /**
     * Filter which chii_groups to update
     * 
    **/
    where?: chii_groupsWhereInput
  }


  /**
   * chii_groups upsert
   */
  export type chii_groupsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_groups
     * 
    **/
    select?: chii_groupsSelect | null
    /**
     * The filter to search for the chii_groups to update in case it exists.
     * 
    **/
    where: chii_groupsWhereUniqueInput
    /**
     * In case the chii_groups found by the `where` argument doesn't exist, create a new chii_groups with this data.
     * 
    **/
    create: XOR<chii_groupsCreateInput, chii_groupsUncheckedCreateInput>
    /**
     * In case the chii_groups was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_groupsUpdateInput, chii_groupsUncheckedUpdateInput>
  }


  /**
   * chii_groups delete
   */
  export type chii_groupsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_groups
     * 
    **/
    select?: chii_groupsSelect | null
    /**
     * Filter which chii_groups to delete.
     * 
    **/
    where: chii_groupsWhereUniqueInput
  }


  /**
   * chii_groups deleteMany
   */
  export type chii_groupsDeleteManyArgs = {
    /**
     * Filter which chii_groups to delete
     * 
    **/
    where?: chii_groupsWhereInput
  }


  /**
   * chii_groups without action
   */
  export type chii_groupsArgs = {
    /**
     * Select specific fields to fetch from the chii_groups
     * 
    **/
    select?: chii_groupsSelect | null
  }



  /**
   * Model chii_index
   */


  export type AggregateChii_index = {
    _count: Chii_indexCountAggregateOutputType | null
    _avg: Chii_indexAvgAggregateOutputType | null
    _sum: Chii_indexSumAggregateOutputType | null
    _min: Chii_indexMinAggregateOutputType | null
    _max: Chii_indexMaxAggregateOutputType | null
  }

  export type Chii_indexAvgAggregateOutputType = {
    idx_id: number | null
    idx_type: number | null
    idx_replies: number | null
    idx_subject_total: number | null
    idx_collects: number | null
    idx_dateline: number | null
    idx_lasttouch: number | null
    idx_uid: number | null
  }

  export type Chii_indexSumAggregateOutputType = {
    idx_id: number | null
    idx_type: number | null
    idx_replies: number | null
    idx_subject_total: number | null
    idx_collects: number | null
    idx_dateline: number | null
    idx_lasttouch: number | null
    idx_uid: number | null
  }

  export type Chii_indexMinAggregateOutputType = {
    idx_id: number | null
    idx_type: number | null
    idx_title: string | null
    idx_desc: string | null
    idx_replies: number | null
    idx_subject_total: number | null
    idx_collects: number | null
    idx_stats: string | null
    idx_dateline: number | null
    idx_lasttouch: number | null
    idx_uid: number | null
    idx_ban: boolean | null
  }

  export type Chii_indexMaxAggregateOutputType = {
    idx_id: number | null
    idx_type: number | null
    idx_title: string | null
    idx_desc: string | null
    idx_replies: number | null
    idx_subject_total: number | null
    idx_collects: number | null
    idx_stats: string | null
    idx_dateline: number | null
    idx_lasttouch: number | null
    idx_uid: number | null
    idx_ban: boolean | null
  }

  export type Chii_indexCountAggregateOutputType = {
    idx_id: number
    idx_type: number
    idx_title: number
    idx_desc: number
    idx_replies: number
    idx_subject_total: number
    idx_collects: number
    idx_stats: number
    idx_dateline: number
    idx_lasttouch: number
    idx_uid: number
    idx_ban: number
    _all: number
  }


  export type Chii_indexAvgAggregateInputType = {
    idx_id?: true
    idx_type?: true
    idx_replies?: true
    idx_subject_total?: true
    idx_collects?: true
    idx_dateline?: true
    idx_lasttouch?: true
    idx_uid?: true
  }

  export type Chii_indexSumAggregateInputType = {
    idx_id?: true
    idx_type?: true
    idx_replies?: true
    idx_subject_total?: true
    idx_collects?: true
    idx_dateline?: true
    idx_lasttouch?: true
    idx_uid?: true
  }

  export type Chii_indexMinAggregateInputType = {
    idx_id?: true
    idx_type?: true
    idx_title?: true
    idx_desc?: true
    idx_replies?: true
    idx_subject_total?: true
    idx_collects?: true
    idx_stats?: true
    idx_dateline?: true
    idx_lasttouch?: true
    idx_uid?: true
    idx_ban?: true
  }

  export type Chii_indexMaxAggregateInputType = {
    idx_id?: true
    idx_type?: true
    idx_title?: true
    idx_desc?: true
    idx_replies?: true
    idx_subject_total?: true
    idx_collects?: true
    idx_stats?: true
    idx_dateline?: true
    idx_lasttouch?: true
    idx_uid?: true
    idx_ban?: true
  }

  export type Chii_indexCountAggregateInputType = {
    idx_id?: true
    idx_type?: true
    idx_title?: true
    idx_desc?: true
    idx_replies?: true
    idx_subject_total?: true
    idx_collects?: true
    idx_stats?: true
    idx_dateline?: true
    idx_lasttouch?: true
    idx_uid?: true
    idx_ban?: true
    _all?: true
  }

  export type Chii_indexAggregateArgs = {
    /**
     * Filter which chii_index to aggregate.
     * 
    **/
    where?: chii_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_indices to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_indexOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_indices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_indices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_indices
    **/
    _count?: true | Chii_indexCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_indexAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_indexSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_indexMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_indexMaxAggregateInputType
  }

  export type GetChii_indexAggregateType<T extends Chii_indexAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_index]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_index[P]>
      : GetScalarType<T[P], AggregateChii_index[P]>
  }




  export type Chii_indexGroupByArgs = {
    where?: chii_indexWhereInput
    orderBy?: Enumerable<chii_indexOrderByWithAggregationInput>
    by: Array<Chii_indexScalarFieldEnum>
    having?: chii_indexScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_indexCountAggregateInputType | true
    _avg?: Chii_indexAvgAggregateInputType
    _sum?: Chii_indexSumAggregateInputType
    _min?: Chii_indexMinAggregateInputType
    _max?: Chii_indexMaxAggregateInputType
  }


  export type Chii_indexGroupByOutputType = {
    idx_id: number
    idx_type: number
    idx_title: string
    idx_desc: string
    idx_replies: number
    idx_subject_total: number
    idx_collects: number
    idx_stats: string
    idx_dateline: number
    idx_lasttouch: number
    idx_uid: number
    idx_ban: boolean
    _count: Chii_indexCountAggregateOutputType | null
    _avg: Chii_indexAvgAggregateOutputType | null
    _sum: Chii_indexSumAggregateOutputType | null
    _min: Chii_indexMinAggregateOutputType | null
    _max: Chii_indexMaxAggregateOutputType | null
  }

  type GetChii_indexGroupByPayload<T extends Chii_indexGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_indexGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_indexGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_indexGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_indexGroupByOutputType[P]>
        }
      >
    >


  export type chii_indexSelect = {
    idx_id?: boolean
    idx_type?: boolean
    idx_title?: boolean
    idx_desc?: boolean
    idx_replies?: boolean
    idx_subject_total?: boolean
    idx_collects?: boolean
    idx_stats?: boolean
    idx_dateline?: boolean
    idx_lasttouch?: boolean
    idx_uid?: boolean
    idx_ban?: boolean
  }


  export type chii_indexGetPayload<S extends boolean | null | undefined | chii_indexArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_index :
    S extends undefined ? never :
    S extends { include: any } & (chii_indexArgs | chii_indexFindManyArgs)
    ? chii_index 
    : S extends { select: any } & (chii_indexArgs | chii_indexFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_index ? chii_index[P] : never
  } 
      : chii_index


  type chii_indexCountArgs = Merge<
    Omit<chii_indexFindManyArgs, 'select' | 'include'> & {
      select?: Chii_indexCountAggregateInputType | true
    }
  >

  export interface chii_indexDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_index that matches the filter.
     * @param {chii_indexFindUniqueArgs} args - Arguments to find a Chii_index
     * @example
     * // Get one Chii_index
     * const chii_index = await prisma.chii_index.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_indexFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_indexFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_index'> extends True ? Prisma__chii_indexClient<chii_indexGetPayload<T>> : Prisma__chii_indexClient<chii_indexGetPayload<T> | null, null>

    /**
     * Find one Chii_index that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_indexFindUniqueOrThrowArgs} args - Arguments to find a Chii_index
     * @example
     * // Get one Chii_index
     * const chii_index = await prisma.chii_index.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_indexFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_indexFindUniqueOrThrowArgs>
    ): Prisma__chii_indexClient<chii_indexGetPayload<T>>

    /**
     * Find the first Chii_index that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_indexFindFirstArgs} args - Arguments to find a Chii_index
     * @example
     * // Get one Chii_index
     * const chii_index = await prisma.chii_index.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_indexFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_indexFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_index'> extends True ? Prisma__chii_indexClient<chii_indexGetPayload<T>> : Prisma__chii_indexClient<chii_indexGetPayload<T> | null, null>

    /**
     * Find the first Chii_index that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_indexFindFirstOrThrowArgs} args - Arguments to find a Chii_index
     * @example
     * // Get one Chii_index
     * const chii_index = await prisma.chii_index.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_indexFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_indexFindFirstOrThrowArgs>
    ): Prisma__chii_indexClient<chii_indexGetPayload<T>>

    /**
     * Find zero or more Chii_indices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_indexFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_indices
     * const chii_indices = await prisma.chii_index.findMany()
     * 
     * // Get first 10 Chii_indices
     * const chii_indices = await prisma.chii_index.findMany({ take: 10 })
     * 
     * // Only select the `idx_id`
     * const chii_indexWithIdx_idOnly = await prisma.chii_index.findMany({ select: { idx_id: true } })
     * 
    **/
    findMany<T extends chii_indexFindManyArgs>(
      args?: SelectSubset<T, chii_indexFindManyArgs>
    ): PrismaPromise<Array<chii_indexGetPayload<T>>>

    /**
     * Create a Chii_index.
     * @param {chii_indexCreateArgs} args - Arguments to create a Chii_index.
     * @example
     * // Create one Chii_index
     * const Chii_index = await prisma.chii_index.create({
     *   data: {
     *     // ... data to create a Chii_index
     *   }
     * })
     * 
    **/
    create<T extends chii_indexCreateArgs>(
      args: SelectSubset<T, chii_indexCreateArgs>
    ): Prisma__chii_indexClient<chii_indexGetPayload<T>>

    /**
     * Create many Chii_indices.
     *     @param {chii_indexCreateManyArgs} args - Arguments to create many Chii_indices.
     *     @example
     *     // Create many Chii_indices
     *     const chii_index = await prisma.chii_index.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_indexCreateManyArgs>(
      args?: SelectSubset<T, chii_indexCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_index.
     * @param {chii_indexDeleteArgs} args - Arguments to delete one Chii_index.
     * @example
     * // Delete one Chii_index
     * const Chii_index = await prisma.chii_index.delete({
     *   where: {
     *     // ... filter to delete one Chii_index
     *   }
     * })
     * 
    **/
    delete<T extends chii_indexDeleteArgs>(
      args: SelectSubset<T, chii_indexDeleteArgs>
    ): Prisma__chii_indexClient<chii_indexGetPayload<T>>

    /**
     * Update one Chii_index.
     * @param {chii_indexUpdateArgs} args - Arguments to update one Chii_index.
     * @example
     * // Update one Chii_index
     * const chii_index = await prisma.chii_index.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_indexUpdateArgs>(
      args: SelectSubset<T, chii_indexUpdateArgs>
    ): Prisma__chii_indexClient<chii_indexGetPayload<T>>

    /**
     * Delete zero or more Chii_indices.
     * @param {chii_indexDeleteManyArgs} args - Arguments to filter Chii_indices to delete.
     * @example
     * // Delete a few Chii_indices
     * const { count } = await prisma.chii_index.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_indexDeleteManyArgs>(
      args?: SelectSubset<T, chii_indexDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_indices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_indexUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_indices
     * const chii_index = await prisma.chii_index.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_indexUpdateManyArgs>(
      args: SelectSubset<T, chii_indexUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_index.
     * @param {chii_indexUpsertArgs} args - Arguments to update or create a Chii_index.
     * @example
     * // Update or create a Chii_index
     * const chii_index = await prisma.chii_index.upsert({
     *   create: {
     *     // ... data to create a Chii_index
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_index we want to update
     *   }
     * })
    **/
    upsert<T extends chii_indexUpsertArgs>(
      args: SelectSubset<T, chii_indexUpsertArgs>
    ): Prisma__chii_indexClient<chii_indexGetPayload<T>>

    /**
     * Count the number of Chii_indices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_indexCountArgs} args - Arguments to filter Chii_indices to count.
     * @example
     * // Count the number of Chii_indices
     * const count = await prisma.chii_index.count({
     *   where: {
     *     // ... the filter for the Chii_indices we want to count
     *   }
     * })
    **/
    count<T extends chii_indexCountArgs>(
      args?: Subset<T, chii_indexCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_indexCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_index.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_indexAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_indexAggregateArgs>(args: Subset<T, Chii_indexAggregateArgs>): PrismaPromise<GetChii_indexAggregateType<T>>

    /**
     * Group by Chii_index.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_indexGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_indexGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_indexGroupByArgs['orderBy'] }
        : { orderBy?: Chii_indexGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_indexGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_indexGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_index.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_indexClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_index base type for findUnique actions
   */
  export type chii_indexFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_index
     * 
    **/
    select?: chii_indexSelect | null
    /**
     * Filter, which chii_index to fetch.
     * 
    **/
    where: chii_indexWhereUniqueInput
  }

  /**
   * chii_index: findUnique
   */
  export interface chii_indexFindUniqueArgs extends chii_indexFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_index findUniqueOrThrow
   */
  export type chii_indexFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_index
     * 
    **/
    select?: chii_indexSelect | null
    /**
     * Filter, which chii_index to fetch.
     * 
    **/
    where: chii_indexWhereUniqueInput
  }


  /**
   * chii_index base type for findFirst actions
   */
  export type chii_indexFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_index
     * 
    **/
    select?: chii_indexSelect | null
    /**
     * Filter, which chii_index to fetch.
     * 
    **/
    where?: chii_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_indices to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_indexOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_indices.
     * 
    **/
    cursor?: chii_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_indices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_indices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_indices.
     * 
    **/
    distinct?: Enumerable<Chii_indexScalarFieldEnum>
  }

  /**
   * chii_index: findFirst
   */
  export interface chii_indexFindFirstArgs extends chii_indexFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_index findFirstOrThrow
   */
  export type chii_indexFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_index
     * 
    **/
    select?: chii_indexSelect | null
    /**
     * Filter, which chii_index to fetch.
     * 
    **/
    where?: chii_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_indices to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_indexOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_indices.
     * 
    **/
    cursor?: chii_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_indices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_indices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_indices.
     * 
    **/
    distinct?: Enumerable<Chii_indexScalarFieldEnum>
  }


  /**
   * chii_index findMany
   */
  export type chii_indexFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_index
     * 
    **/
    select?: chii_indexSelect | null
    /**
     * Filter, which chii_indices to fetch.
     * 
    **/
    where?: chii_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_indices to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_indexOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_indices.
     * 
    **/
    cursor?: chii_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_indices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_indices.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_indexScalarFieldEnum>
  }


  /**
   * chii_index create
   */
  export type chii_indexCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_index
     * 
    **/
    select?: chii_indexSelect | null
    /**
     * The data needed to create a chii_index.
     * 
    **/
    data: XOR<chii_indexCreateInput, chii_indexUncheckedCreateInput>
  }


  /**
   * chii_index createMany
   */
  export type chii_indexCreateManyArgs = {
    /**
     * The data used to create many chii_indices.
     * 
    **/
    data: Enumerable<chii_indexCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_index update
   */
  export type chii_indexUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_index
     * 
    **/
    select?: chii_indexSelect | null
    /**
     * The data needed to update a chii_index.
     * 
    **/
    data: XOR<chii_indexUpdateInput, chii_indexUncheckedUpdateInput>
    /**
     * Choose, which chii_index to update.
     * 
    **/
    where: chii_indexWhereUniqueInput
  }


  /**
   * chii_index updateMany
   */
  export type chii_indexUpdateManyArgs = {
    /**
     * The data used to update chii_indices.
     * 
    **/
    data: XOR<chii_indexUpdateManyMutationInput, chii_indexUncheckedUpdateManyInput>
    /**
     * Filter which chii_indices to update
     * 
    **/
    where?: chii_indexWhereInput
  }


  /**
   * chii_index upsert
   */
  export type chii_indexUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_index
     * 
    **/
    select?: chii_indexSelect | null
    /**
     * The filter to search for the chii_index to update in case it exists.
     * 
    **/
    where: chii_indexWhereUniqueInput
    /**
     * In case the chii_index found by the `where` argument doesn't exist, create a new chii_index with this data.
     * 
    **/
    create: XOR<chii_indexCreateInput, chii_indexUncheckedCreateInput>
    /**
     * In case the chii_index was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_indexUpdateInput, chii_indexUncheckedUpdateInput>
  }


  /**
   * chii_index delete
   */
  export type chii_indexDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_index
     * 
    **/
    select?: chii_indexSelect | null
    /**
     * Filter which chii_index to delete.
     * 
    **/
    where: chii_indexWhereUniqueInput
  }


  /**
   * chii_index deleteMany
   */
  export type chii_indexDeleteManyArgs = {
    /**
     * Filter which chii_indices to delete
     * 
    **/
    where?: chii_indexWhereInput
  }


  /**
   * chii_index without action
   */
  export type chii_indexArgs = {
    /**
     * Select specific fields to fetch from the chii_index
     * 
    **/
    select?: chii_indexSelect | null
  }



  /**
   * Model chii_index_collects
   */


  export type AggregateChii_index_collects = {
    _count: Chii_index_collectsCountAggregateOutputType | null
    _avg: Chii_index_collectsAvgAggregateOutputType | null
    _sum: Chii_index_collectsSumAggregateOutputType | null
    _min: Chii_index_collectsMinAggregateOutputType | null
    _max: Chii_index_collectsMaxAggregateOutputType | null
  }

  export type Chii_index_collectsAvgAggregateOutputType = {
    idx_clt_id: number | null
    idx_clt_mid: number | null
    idx_clt_uid: number | null
    idx_clt_dateline: number | null
  }

  export type Chii_index_collectsSumAggregateOutputType = {
    idx_clt_id: number | null
    idx_clt_mid: number | null
    idx_clt_uid: number | null
    idx_clt_dateline: number | null
  }

  export type Chii_index_collectsMinAggregateOutputType = {
    idx_clt_id: number | null
    idx_clt_mid: number | null
    idx_clt_uid: number | null
    idx_clt_dateline: number | null
  }

  export type Chii_index_collectsMaxAggregateOutputType = {
    idx_clt_id: number | null
    idx_clt_mid: number | null
    idx_clt_uid: number | null
    idx_clt_dateline: number | null
  }

  export type Chii_index_collectsCountAggregateOutputType = {
    idx_clt_id: number
    idx_clt_mid: number
    idx_clt_uid: number
    idx_clt_dateline: number
    _all: number
  }


  export type Chii_index_collectsAvgAggregateInputType = {
    idx_clt_id?: true
    idx_clt_mid?: true
    idx_clt_uid?: true
    idx_clt_dateline?: true
  }

  export type Chii_index_collectsSumAggregateInputType = {
    idx_clt_id?: true
    idx_clt_mid?: true
    idx_clt_uid?: true
    idx_clt_dateline?: true
  }

  export type Chii_index_collectsMinAggregateInputType = {
    idx_clt_id?: true
    idx_clt_mid?: true
    idx_clt_uid?: true
    idx_clt_dateline?: true
  }

  export type Chii_index_collectsMaxAggregateInputType = {
    idx_clt_id?: true
    idx_clt_mid?: true
    idx_clt_uid?: true
    idx_clt_dateline?: true
  }

  export type Chii_index_collectsCountAggregateInputType = {
    idx_clt_id?: true
    idx_clt_mid?: true
    idx_clt_uid?: true
    idx_clt_dateline?: true
    _all?: true
  }

  export type Chii_index_collectsAggregateArgs = {
    /**
     * Filter which chii_index_collects to aggregate.
     * 
    **/
    where?: chii_index_collectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_index_collects to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_index_collectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_index_collectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_index_collects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_index_collects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_index_collects
    **/
    _count?: true | Chii_index_collectsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_index_collectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_index_collectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_index_collectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_index_collectsMaxAggregateInputType
  }

  export type GetChii_index_collectsAggregateType<T extends Chii_index_collectsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_index_collects]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_index_collects[P]>
      : GetScalarType<T[P], AggregateChii_index_collects[P]>
  }




  export type Chii_index_collectsGroupByArgs = {
    where?: chii_index_collectsWhereInput
    orderBy?: Enumerable<chii_index_collectsOrderByWithAggregationInput>
    by: Array<Chii_index_collectsScalarFieldEnum>
    having?: chii_index_collectsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_index_collectsCountAggregateInputType | true
    _avg?: Chii_index_collectsAvgAggregateInputType
    _sum?: Chii_index_collectsSumAggregateInputType
    _min?: Chii_index_collectsMinAggregateInputType
    _max?: Chii_index_collectsMaxAggregateInputType
  }


  export type Chii_index_collectsGroupByOutputType = {
    idx_clt_id: number
    idx_clt_mid: number
    idx_clt_uid: number
    idx_clt_dateline: number
    _count: Chii_index_collectsCountAggregateOutputType | null
    _avg: Chii_index_collectsAvgAggregateOutputType | null
    _sum: Chii_index_collectsSumAggregateOutputType | null
    _min: Chii_index_collectsMinAggregateOutputType | null
    _max: Chii_index_collectsMaxAggregateOutputType | null
  }

  type GetChii_index_collectsGroupByPayload<T extends Chii_index_collectsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_index_collectsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_index_collectsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_index_collectsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_index_collectsGroupByOutputType[P]>
        }
      >
    >


  export type chii_index_collectsSelect = {
    idx_clt_id?: boolean
    idx_clt_mid?: boolean
    idx_clt_uid?: boolean
    idx_clt_dateline?: boolean
  }


  export type chii_index_collectsGetPayload<S extends boolean | null | undefined | chii_index_collectsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_index_collects :
    S extends undefined ? never :
    S extends { include: any } & (chii_index_collectsArgs | chii_index_collectsFindManyArgs)
    ? chii_index_collects 
    : S extends { select: any } & (chii_index_collectsArgs | chii_index_collectsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_index_collects ? chii_index_collects[P] : never
  } 
      : chii_index_collects


  type chii_index_collectsCountArgs = Merge<
    Omit<chii_index_collectsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_index_collectsCountAggregateInputType | true
    }
  >

  export interface chii_index_collectsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_index_collects that matches the filter.
     * @param {chii_index_collectsFindUniqueArgs} args - Arguments to find a Chii_index_collects
     * @example
     * // Get one Chii_index_collects
     * const chii_index_collects = await prisma.chii_index_collects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_index_collectsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_index_collectsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_index_collects'> extends True ? Prisma__chii_index_collectsClient<chii_index_collectsGetPayload<T>> : Prisma__chii_index_collectsClient<chii_index_collectsGetPayload<T> | null, null>

    /**
     * Find one Chii_index_collects that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_index_collectsFindUniqueOrThrowArgs} args - Arguments to find a Chii_index_collects
     * @example
     * // Get one Chii_index_collects
     * const chii_index_collects = await prisma.chii_index_collects.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_index_collectsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_index_collectsFindUniqueOrThrowArgs>
    ): Prisma__chii_index_collectsClient<chii_index_collectsGetPayload<T>>

    /**
     * Find the first Chii_index_collects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_index_collectsFindFirstArgs} args - Arguments to find a Chii_index_collects
     * @example
     * // Get one Chii_index_collects
     * const chii_index_collects = await prisma.chii_index_collects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_index_collectsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_index_collectsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_index_collects'> extends True ? Prisma__chii_index_collectsClient<chii_index_collectsGetPayload<T>> : Prisma__chii_index_collectsClient<chii_index_collectsGetPayload<T> | null, null>

    /**
     * Find the first Chii_index_collects that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_index_collectsFindFirstOrThrowArgs} args - Arguments to find a Chii_index_collects
     * @example
     * // Get one Chii_index_collects
     * const chii_index_collects = await prisma.chii_index_collects.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_index_collectsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_index_collectsFindFirstOrThrowArgs>
    ): Prisma__chii_index_collectsClient<chii_index_collectsGetPayload<T>>

    /**
     * Find zero or more Chii_index_collects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_index_collectsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_index_collects
     * const chii_index_collects = await prisma.chii_index_collects.findMany()
     * 
     * // Get first 10 Chii_index_collects
     * const chii_index_collects = await prisma.chii_index_collects.findMany({ take: 10 })
     * 
     * // Only select the `idx_clt_id`
     * const chii_index_collectsWithIdx_clt_idOnly = await prisma.chii_index_collects.findMany({ select: { idx_clt_id: true } })
     * 
    **/
    findMany<T extends chii_index_collectsFindManyArgs>(
      args?: SelectSubset<T, chii_index_collectsFindManyArgs>
    ): PrismaPromise<Array<chii_index_collectsGetPayload<T>>>

    /**
     * Create a Chii_index_collects.
     * @param {chii_index_collectsCreateArgs} args - Arguments to create a Chii_index_collects.
     * @example
     * // Create one Chii_index_collects
     * const Chii_index_collects = await prisma.chii_index_collects.create({
     *   data: {
     *     // ... data to create a Chii_index_collects
     *   }
     * })
     * 
    **/
    create<T extends chii_index_collectsCreateArgs>(
      args: SelectSubset<T, chii_index_collectsCreateArgs>
    ): Prisma__chii_index_collectsClient<chii_index_collectsGetPayload<T>>

    /**
     * Create many Chii_index_collects.
     *     @param {chii_index_collectsCreateManyArgs} args - Arguments to create many Chii_index_collects.
     *     @example
     *     // Create many Chii_index_collects
     *     const chii_index_collects = await prisma.chii_index_collects.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_index_collectsCreateManyArgs>(
      args?: SelectSubset<T, chii_index_collectsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_index_collects.
     * @param {chii_index_collectsDeleteArgs} args - Arguments to delete one Chii_index_collects.
     * @example
     * // Delete one Chii_index_collects
     * const Chii_index_collects = await prisma.chii_index_collects.delete({
     *   where: {
     *     // ... filter to delete one Chii_index_collects
     *   }
     * })
     * 
    **/
    delete<T extends chii_index_collectsDeleteArgs>(
      args: SelectSubset<T, chii_index_collectsDeleteArgs>
    ): Prisma__chii_index_collectsClient<chii_index_collectsGetPayload<T>>

    /**
     * Update one Chii_index_collects.
     * @param {chii_index_collectsUpdateArgs} args - Arguments to update one Chii_index_collects.
     * @example
     * // Update one Chii_index_collects
     * const chii_index_collects = await prisma.chii_index_collects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_index_collectsUpdateArgs>(
      args: SelectSubset<T, chii_index_collectsUpdateArgs>
    ): Prisma__chii_index_collectsClient<chii_index_collectsGetPayload<T>>

    /**
     * Delete zero or more Chii_index_collects.
     * @param {chii_index_collectsDeleteManyArgs} args - Arguments to filter Chii_index_collects to delete.
     * @example
     * // Delete a few Chii_index_collects
     * const { count } = await prisma.chii_index_collects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_index_collectsDeleteManyArgs>(
      args?: SelectSubset<T, chii_index_collectsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_index_collects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_index_collectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_index_collects
     * const chii_index_collects = await prisma.chii_index_collects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_index_collectsUpdateManyArgs>(
      args: SelectSubset<T, chii_index_collectsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_index_collects.
     * @param {chii_index_collectsUpsertArgs} args - Arguments to update or create a Chii_index_collects.
     * @example
     * // Update or create a Chii_index_collects
     * const chii_index_collects = await prisma.chii_index_collects.upsert({
     *   create: {
     *     // ... data to create a Chii_index_collects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_index_collects we want to update
     *   }
     * })
    **/
    upsert<T extends chii_index_collectsUpsertArgs>(
      args: SelectSubset<T, chii_index_collectsUpsertArgs>
    ): Prisma__chii_index_collectsClient<chii_index_collectsGetPayload<T>>

    /**
     * Count the number of Chii_index_collects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_index_collectsCountArgs} args - Arguments to filter Chii_index_collects to count.
     * @example
     * // Count the number of Chii_index_collects
     * const count = await prisma.chii_index_collects.count({
     *   where: {
     *     // ... the filter for the Chii_index_collects we want to count
     *   }
     * })
    **/
    count<T extends chii_index_collectsCountArgs>(
      args?: Subset<T, chii_index_collectsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_index_collectsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_index_collects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_index_collectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_index_collectsAggregateArgs>(args: Subset<T, Chii_index_collectsAggregateArgs>): PrismaPromise<GetChii_index_collectsAggregateType<T>>

    /**
     * Group by Chii_index_collects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_index_collectsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_index_collectsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_index_collectsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_index_collectsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_index_collectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_index_collectsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_index_collects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_index_collectsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_index_collects base type for findUnique actions
   */
  export type chii_index_collectsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_index_collects
     * 
    **/
    select?: chii_index_collectsSelect | null
    /**
     * Filter, which chii_index_collects to fetch.
     * 
    **/
    where: chii_index_collectsWhereUniqueInput
  }

  /**
   * chii_index_collects: findUnique
   */
  export interface chii_index_collectsFindUniqueArgs extends chii_index_collectsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_index_collects findUniqueOrThrow
   */
  export type chii_index_collectsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_index_collects
     * 
    **/
    select?: chii_index_collectsSelect | null
    /**
     * Filter, which chii_index_collects to fetch.
     * 
    **/
    where: chii_index_collectsWhereUniqueInput
  }


  /**
   * chii_index_collects base type for findFirst actions
   */
  export type chii_index_collectsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_index_collects
     * 
    **/
    select?: chii_index_collectsSelect | null
    /**
     * Filter, which chii_index_collects to fetch.
     * 
    **/
    where?: chii_index_collectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_index_collects to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_index_collectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_index_collects.
     * 
    **/
    cursor?: chii_index_collectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_index_collects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_index_collects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_index_collects.
     * 
    **/
    distinct?: Enumerable<Chii_index_collectsScalarFieldEnum>
  }

  /**
   * chii_index_collects: findFirst
   */
  export interface chii_index_collectsFindFirstArgs extends chii_index_collectsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_index_collects findFirstOrThrow
   */
  export type chii_index_collectsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_index_collects
     * 
    **/
    select?: chii_index_collectsSelect | null
    /**
     * Filter, which chii_index_collects to fetch.
     * 
    **/
    where?: chii_index_collectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_index_collects to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_index_collectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_index_collects.
     * 
    **/
    cursor?: chii_index_collectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_index_collects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_index_collects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_index_collects.
     * 
    **/
    distinct?: Enumerable<Chii_index_collectsScalarFieldEnum>
  }


  /**
   * chii_index_collects findMany
   */
  export type chii_index_collectsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_index_collects
     * 
    **/
    select?: chii_index_collectsSelect | null
    /**
     * Filter, which chii_index_collects to fetch.
     * 
    **/
    where?: chii_index_collectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_index_collects to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_index_collectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_index_collects.
     * 
    **/
    cursor?: chii_index_collectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_index_collects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_index_collects.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_index_collectsScalarFieldEnum>
  }


  /**
   * chii_index_collects create
   */
  export type chii_index_collectsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_index_collects
     * 
    **/
    select?: chii_index_collectsSelect | null
    /**
     * The data needed to create a chii_index_collects.
     * 
    **/
    data: XOR<chii_index_collectsCreateInput, chii_index_collectsUncheckedCreateInput>
  }


  /**
   * chii_index_collects createMany
   */
  export type chii_index_collectsCreateManyArgs = {
    /**
     * The data used to create many chii_index_collects.
     * 
    **/
    data: Enumerable<chii_index_collectsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_index_collects update
   */
  export type chii_index_collectsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_index_collects
     * 
    **/
    select?: chii_index_collectsSelect | null
    /**
     * The data needed to update a chii_index_collects.
     * 
    **/
    data: XOR<chii_index_collectsUpdateInput, chii_index_collectsUncheckedUpdateInput>
    /**
     * Choose, which chii_index_collects to update.
     * 
    **/
    where: chii_index_collectsWhereUniqueInput
  }


  /**
   * chii_index_collects updateMany
   */
  export type chii_index_collectsUpdateManyArgs = {
    /**
     * The data used to update chii_index_collects.
     * 
    **/
    data: XOR<chii_index_collectsUpdateManyMutationInput, chii_index_collectsUncheckedUpdateManyInput>
    /**
     * Filter which chii_index_collects to update
     * 
    **/
    where?: chii_index_collectsWhereInput
  }


  /**
   * chii_index_collects upsert
   */
  export type chii_index_collectsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_index_collects
     * 
    **/
    select?: chii_index_collectsSelect | null
    /**
     * The filter to search for the chii_index_collects to update in case it exists.
     * 
    **/
    where: chii_index_collectsWhereUniqueInput
    /**
     * In case the chii_index_collects found by the `where` argument doesn't exist, create a new chii_index_collects with this data.
     * 
    **/
    create: XOR<chii_index_collectsCreateInput, chii_index_collectsUncheckedCreateInput>
    /**
     * In case the chii_index_collects was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_index_collectsUpdateInput, chii_index_collectsUncheckedUpdateInput>
  }


  /**
   * chii_index_collects delete
   */
  export type chii_index_collectsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_index_collects
     * 
    **/
    select?: chii_index_collectsSelect | null
    /**
     * Filter which chii_index_collects to delete.
     * 
    **/
    where: chii_index_collectsWhereUniqueInput
  }


  /**
   * chii_index_collects deleteMany
   */
  export type chii_index_collectsDeleteManyArgs = {
    /**
     * Filter which chii_index_collects to delete
     * 
    **/
    where?: chii_index_collectsWhereInput
  }


  /**
   * chii_index_collects without action
   */
  export type chii_index_collectsArgs = {
    /**
     * Select specific fields to fetch from the chii_index_collects
     * 
    **/
    select?: chii_index_collectsSelect | null
  }



  /**
   * Model chii_index_comments
   */


  export type AggregateChii_index_comments = {
    _count: Chii_index_commentsCountAggregateOutputType | null
    _avg: Chii_index_commentsAvgAggregateOutputType | null
    _sum: Chii_index_commentsSumAggregateOutputType | null
    _min: Chii_index_commentsMinAggregateOutputType | null
    _max: Chii_index_commentsMaxAggregateOutputType | null
  }

  export type Chii_index_commentsAvgAggregateOutputType = {
    idx_pst_id: number | null
    idx_pst_mid: number | null
    idx_pst_uid: number | null
    idx_pst_related: number | null
    idx_pst_dateline: number | null
  }

  export type Chii_index_commentsSumAggregateOutputType = {
    idx_pst_id: number | null
    idx_pst_mid: number | null
    idx_pst_uid: number | null
    idx_pst_related: number | null
    idx_pst_dateline: number | null
  }

  export type Chii_index_commentsMinAggregateOutputType = {
    idx_pst_id: number | null
    idx_pst_mid: number | null
    idx_pst_uid: number | null
    idx_pst_related: number | null
    idx_pst_dateline: number | null
    idx_pst_content: string | null
  }

  export type Chii_index_commentsMaxAggregateOutputType = {
    idx_pst_id: number | null
    idx_pst_mid: number | null
    idx_pst_uid: number | null
    idx_pst_related: number | null
    idx_pst_dateline: number | null
    idx_pst_content: string | null
  }

  export type Chii_index_commentsCountAggregateOutputType = {
    idx_pst_id: number
    idx_pst_mid: number
    idx_pst_uid: number
    idx_pst_related: number
    idx_pst_dateline: number
    idx_pst_content: number
    _all: number
  }


  export type Chii_index_commentsAvgAggregateInputType = {
    idx_pst_id?: true
    idx_pst_mid?: true
    idx_pst_uid?: true
    idx_pst_related?: true
    idx_pst_dateline?: true
  }

  export type Chii_index_commentsSumAggregateInputType = {
    idx_pst_id?: true
    idx_pst_mid?: true
    idx_pst_uid?: true
    idx_pst_related?: true
    idx_pst_dateline?: true
  }

  export type Chii_index_commentsMinAggregateInputType = {
    idx_pst_id?: true
    idx_pst_mid?: true
    idx_pst_uid?: true
    idx_pst_related?: true
    idx_pst_dateline?: true
    idx_pst_content?: true
  }

  export type Chii_index_commentsMaxAggregateInputType = {
    idx_pst_id?: true
    idx_pst_mid?: true
    idx_pst_uid?: true
    idx_pst_related?: true
    idx_pst_dateline?: true
    idx_pst_content?: true
  }

  export type Chii_index_commentsCountAggregateInputType = {
    idx_pst_id?: true
    idx_pst_mid?: true
    idx_pst_uid?: true
    idx_pst_related?: true
    idx_pst_dateline?: true
    idx_pst_content?: true
    _all?: true
  }

  export type Chii_index_commentsAggregateArgs = {
    /**
     * Filter which chii_index_comments to aggregate.
     * 
    **/
    where?: chii_index_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_index_comments to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_index_commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_index_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_index_comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_index_comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_index_comments
    **/
    _count?: true | Chii_index_commentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_index_commentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_index_commentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_index_commentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_index_commentsMaxAggregateInputType
  }

  export type GetChii_index_commentsAggregateType<T extends Chii_index_commentsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_index_comments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_index_comments[P]>
      : GetScalarType<T[P], AggregateChii_index_comments[P]>
  }




  export type Chii_index_commentsGroupByArgs = {
    where?: chii_index_commentsWhereInput
    orderBy?: Enumerable<chii_index_commentsOrderByWithAggregationInput>
    by: Array<Chii_index_commentsScalarFieldEnum>
    having?: chii_index_commentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_index_commentsCountAggregateInputType | true
    _avg?: Chii_index_commentsAvgAggregateInputType
    _sum?: Chii_index_commentsSumAggregateInputType
    _min?: Chii_index_commentsMinAggregateInputType
    _max?: Chii_index_commentsMaxAggregateInputType
  }


  export type Chii_index_commentsGroupByOutputType = {
    idx_pst_id: number
    idx_pst_mid: number
    idx_pst_uid: number
    idx_pst_related: number
    idx_pst_dateline: number
    idx_pst_content: string
    _count: Chii_index_commentsCountAggregateOutputType | null
    _avg: Chii_index_commentsAvgAggregateOutputType | null
    _sum: Chii_index_commentsSumAggregateOutputType | null
    _min: Chii_index_commentsMinAggregateOutputType | null
    _max: Chii_index_commentsMaxAggregateOutputType | null
  }

  type GetChii_index_commentsGroupByPayload<T extends Chii_index_commentsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_index_commentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_index_commentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_index_commentsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_index_commentsGroupByOutputType[P]>
        }
      >
    >


  export type chii_index_commentsSelect = {
    idx_pst_id?: boolean
    idx_pst_mid?: boolean
    idx_pst_uid?: boolean
    idx_pst_related?: boolean
    idx_pst_dateline?: boolean
    idx_pst_content?: boolean
  }


  export type chii_index_commentsGetPayload<S extends boolean | null | undefined | chii_index_commentsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_index_comments :
    S extends undefined ? never :
    S extends { include: any } & (chii_index_commentsArgs | chii_index_commentsFindManyArgs)
    ? chii_index_comments 
    : S extends { select: any } & (chii_index_commentsArgs | chii_index_commentsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_index_comments ? chii_index_comments[P] : never
  } 
      : chii_index_comments


  type chii_index_commentsCountArgs = Merge<
    Omit<chii_index_commentsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_index_commentsCountAggregateInputType | true
    }
  >

  export interface chii_index_commentsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_index_comments that matches the filter.
     * @param {chii_index_commentsFindUniqueArgs} args - Arguments to find a Chii_index_comments
     * @example
     * // Get one Chii_index_comments
     * const chii_index_comments = await prisma.chii_index_comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_index_commentsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_index_commentsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_index_comments'> extends True ? Prisma__chii_index_commentsClient<chii_index_commentsGetPayload<T>> : Prisma__chii_index_commentsClient<chii_index_commentsGetPayload<T> | null, null>

    /**
     * Find one Chii_index_comments that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_index_commentsFindUniqueOrThrowArgs} args - Arguments to find a Chii_index_comments
     * @example
     * // Get one Chii_index_comments
     * const chii_index_comments = await prisma.chii_index_comments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_index_commentsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_index_commentsFindUniqueOrThrowArgs>
    ): Prisma__chii_index_commentsClient<chii_index_commentsGetPayload<T>>

    /**
     * Find the first Chii_index_comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_index_commentsFindFirstArgs} args - Arguments to find a Chii_index_comments
     * @example
     * // Get one Chii_index_comments
     * const chii_index_comments = await prisma.chii_index_comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_index_commentsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_index_commentsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_index_comments'> extends True ? Prisma__chii_index_commentsClient<chii_index_commentsGetPayload<T>> : Prisma__chii_index_commentsClient<chii_index_commentsGetPayload<T> | null, null>

    /**
     * Find the first Chii_index_comments that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_index_commentsFindFirstOrThrowArgs} args - Arguments to find a Chii_index_comments
     * @example
     * // Get one Chii_index_comments
     * const chii_index_comments = await prisma.chii_index_comments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_index_commentsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_index_commentsFindFirstOrThrowArgs>
    ): Prisma__chii_index_commentsClient<chii_index_commentsGetPayload<T>>

    /**
     * Find zero or more Chii_index_comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_index_commentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_index_comments
     * const chii_index_comments = await prisma.chii_index_comments.findMany()
     * 
     * // Get first 10 Chii_index_comments
     * const chii_index_comments = await prisma.chii_index_comments.findMany({ take: 10 })
     * 
     * // Only select the `idx_pst_id`
     * const chii_index_commentsWithIdx_pst_idOnly = await prisma.chii_index_comments.findMany({ select: { idx_pst_id: true } })
     * 
    **/
    findMany<T extends chii_index_commentsFindManyArgs>(
      args?: SelectSubset<T, chii_index_commentsFindManyArgs>
    ): PrismaPromise<Array<chii_index_commentsGetPayload<T>>>

    /**
     * Create a Chii_index_comments.
     * @param {chii_index_commentsCreateArgs} args - Arguments to create a Chii_index_comments.
     * @example
     * // Create one Chii_index_comments
     * const Chii_index_comments = await prisma.chii_index_comments.create({
     *   data: {
     *     // ... data to create a Chii_index_comments
     *   }
     * })
     * 
    **/
    create<T extends chii_index_commentsCreateArgs>(
      args: SelectSubset<T, chii_index_commentsCreateArgs>
    ): Prisma__chii_index_commentsClient<chii_index_commentsGetPayload<T>>

    /**
     * Create many Chii_index_comments.
     *     @param {chii_index_commentsCreateManyArgs} args - Arguments to create many Chii_index_comments.
     *     @example
     *     // Create many Chii_index_comments
     *     const chii_index_comments = await prisma.chii_index_comments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_index_commentsCreateManyArgs>(
      args?: SelectSubset<T, chii_index_commentsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_index_comments.
     * @param {chii_index_commentsDeleteArgs} args - Arguments to delete one Chii_index_comments.
     * @example
     * // Delete one Chii_index_comments
     * const Chii_index_comments = await prisma.chii_index_comments.delete({
     *   where: {
     *     // ... filter to delete one Chii_index_comments
     *   }
     * })
     * 
    **/
    delete<T extends chii_index_commentsDeleteArgs>(
      args: SelectSubset<T, chii_index_commentsDeleteArgs>
    ): Prisma__chii_index_commentsClient<chii_index_commentsGetPayload<T>>

    /**
     * Update one Chii_index_comments.
     * @param {chii_index_commentsUpdateArgs} args - Arguments to update one Chii_index_comments.
     * @example
     * // Update one Chii_index_comments
     * const chii_index_comments = await prisma.chii_index_comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_index_commentsUpdateArgs>(
      args: SelectSubset<T, chii_index_commentsUpdateArgs>
    ): Prisma__chii_index_commentsClient<chii_index_commentsGetPayload<T>>

    /**
     * Delete zero or more Chii_index_comments.
     * @param {chii_index_commentsDeleteManyArgs} args - Arguments to filter Chii_index_comments to delete.
     * @example
     * // Delete a few Chii_index_comments
     * const { count } = await prisma.chii_index_comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_index_commentsDeleteManyArgs>(
      args?: SelectSubset<T, chii_index_commentsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_index_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_index_commentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_index_comments
     * const chii_index_comments = await prisma.chii_index_comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_index_commentsUpdateManyArgs>(
      args: SelectSubset<T, chii_index_commentsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_index_comments.
     * @param {chii_index_commentsUpsertArgs} args - Arguments to update or create a Chii_index_comments.
     * @example
     * // Update or create a Chii_index_comments
     * const chii_index_comments = await prisma.chii_index_comments.upsert({
     *   create: {
     *     // ... data to create a Chii_index_comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_index_comments we want to update
     *   }
     * })
    **/
    upsert<T extends chii_index_commentsUpsertArgs>(
      args: SelectSubset<T, chii_index_commentsUpsertArgs>
    ): Prisma__chii_index_commentsClient<chii_index_commentsGetPayload<T>>

    /**
     * Count the number of Chii_index_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_index_commentsCountArgs} args - Arguments to filter Chii_index_comments to count.
     * @example
     * // Count the number of Chii_index_comments
     * const count = await prisma.chii_index_comments.count({
     *   where: {
     *     // ... the filter for the Chii_index_comments we want to count
     *   }
     * })
    **/
    count<T extends chii_index_commentsCountArgs>(
      args?: Subset<T, chii_index_commentsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_index_commentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_index_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_index_commentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_index_commentsAggregateArgs>(args: Subset<T, Chii_index_commentsAggregateArgs>): PrismaPromise<GetChii_index_commentsAggregateType<T>>

    /**
     * Group by Chii_index_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_index_commentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_index_commentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_index_commentsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_index_commentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_index_commentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_index_commentsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_index_comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_index_commentsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_index_comments base type for findUnique actions
   */
  export type chii_index_commentsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_index_comments
     * 
    **/
    select?: chii_index_commentsSelect | null
    /**
     * Filter, which chii_index_comments to fetch.
     * 
    **/
    where: chii_index_commentsWhereUniqueInput
  }

  /**
   * chii_index_comments: findUnique
   */
  export interface chii_index_commentsFindUniqueArgs extends chii_index_commentsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_index_comments findUniqueOrThrow
   */
  export type chii_index_commentsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_index_comments
     * 
    **/
    select?: chii_index_commentsSelect | null
    /**
     * Filter, which chii_index_comments to fetch.
     * 
    **/
    where: chii_index_commentsWhereUniqueInput
  }


  /**
   * chii_index_comments base type for findFirst actions
   */
  export type chii_index_commentsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_index_comments
     * 
    **/
    select?: chii_index_commentsSelect | null
    /**
     * Filter, which chii_index_comments to fetch.
     * 
    **/
    where?: chii_index_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_index_comments to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_index_commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_index_comments.
     * 
    **/
    cursor?: chii_index_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_index_comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_index_comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_index_comments.
     * 
    **/
    distinct?: Enumerable<Chii_index_commentsScalarFieldEnum>
  }

  /**
   * chii_index_comments: findFirst
   */
  export interface chii_index_commentsFindFirstArgs extends chii_index_commentsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_index_comments findFirstOrThrow
   */
  export type chii_index_commentsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_index_comments
     * 
    **/
    select?: chii_index_commentsSelect | null
    /**
     * Filter, which chii_index_comments to fetch.
     * 
    **/
    where?: chii_index_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_index_comments to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_index_commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_index_comments.
     * 
    **/
    cursor?: chii_index_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_index_comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_index_comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_index_comments.
     * 
    **/
    distinct?: Enumerable<Chii_index_commentsScalarFieldEnum>
  }


  /**
   * chii_index_comments findMany
   */
  export type chii_index_commentsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_index_comments
     * 
    **/
    select?: chii_index_commentsSelect | null
    /**
     * Filter, which chii_index_comments to fetch.
     * 
    **/
    where?: chii_index_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_index_comments to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_index_commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_index_comments.
     * 
    **/
    cursor?: chii_index_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_index_comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_index_comments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_index_commentsScalarFieldEnum>
  }


  /**
   * chii_index_comments create
   */
  export type chii_index_commentsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_index_comments
     * 
    **/
    select?: chii_index_commentsSelect | null
    /**
     * The data needed to create a chii_index_comments.
     * 
    **/
    data: XOR<chii_index_commentsCreateInput, chii_index_commentsUncheckedCreateInput>
  }


  /**
   * chii_index_comments createMany
   */
  export type chii_index_commentsCreateManyArgs = {
    /**
     * The data used to create many chii_index_comments.
     * 
    **/
    data: Enumerable<chii_index_commentsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_index_comments update
   */
  export type chii_index_commentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_index_comments
     * 
    **/
    select?: chii_index_commentsSelect | null
    /**
     * The data needed to update a chii_index_comments.
     * 
    **/
    data: XOR<chii_index_commentsUpdateInput, chii_index_commentsUncheckedUpdateInput>
    /**
     * Choose, which chii_index_comments to update.
     * 
    **/
    where: chii_index_commentsWhereUniqueInput
  }


  /**
   * chii_index_comments updateMany
   */
  export type chii_index_commentsUpdateManyArgs = {
    /**
     * The data used to update chii_index_comments.
     * 
    **/
    data: XOR<chii_index_commentsUpdateManyMutationInput, chii_index_commentsUncheckedUpdateManyInput>
    /**
     * Filter which chii_index_comments to update
     * 
    **/
    where?: chii_index_commentsWhereInput
  }


  /**
   * chii_index_comments upsert
   */
  export type chii_index_commentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_index_comments
     * 
    **/
    select?: chii_index_commentsSelect | null
    /**
     * The filter to search for the chii_index_comments to update in case it exists.
     * 
    **/
    where: chii_index_commentsWhereUniqueInput
    /**
     * In case the chii_index_comments found by the `where` argument doesn't exist, create a new chii_index_comments with this data.
     * 
    **/
    create: XOR<chii_index_commentsCreateInput, chii_index_commentsUncheckedCreateInput>
    /**
     * In case the chii_index_comments was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_index_commentsUpdateInput, chii_index_commentsUncheckedUpdateInput>
  }


  /**
   * chii_index_comments delete
   */
  export type chii_index_commentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_index_comments
     * 
    **/
    select?: chii_index_commentsSelect | null
    /**
     * Filter which chii_index_comments to delete.
     * 
    **/
    where: chii_index_commentsWhereUniqueInput
  }


  /**
   * chii_index_comments deleteMany
   */
  export type chii_index_commentsDeleteManyArgs = {
    /**
     * Filter which chii_index_comments to delete
     * 
    **/
    where?: chii_index_commentsWhereInput
  }


  /**
   * chii_index_comments without action
   */
  export type chii_index_commentsArgs = {
    /**
     * Select specific fields to fetch from the chii_index_comments
     * 
    **/
    select?: chii_index_commentsSelect | null
  }



  /**
   * Model chii_index_related
   */


  export type AggregateChii_index_related = {
    _count: Chii_index_relatedCountAggregateOutputType | null
    _avg: Chii_index_relatedAvgAggregateOutputType | null
    _sum: Chii_index_relatedSumAggregateOutputType | null
    _min: Chii_index_relatedMinAggregateOutputType | null
    _max: Chii_index_relatedMaxAggregateOutputType | null
  }

  export type Chii_index_relatedAvgAggregateOutputType = {
    idx_rlt_id: number | null
    idx_rlt_cat: number | null
    idx_rlt_rid: number | null
    idx_rlt_type: number | null
    idx_rlt_sid: number | null
    idx_rlt_order: number | null
    idx_rlt_dateline: number | null
  }

  export type Chii_index_relatedSumAggregateOutputType = {
    idx_rlt_id: number | null
    idx_rlt_cat: number | null
    idx_rlt_rid: number | null
    idx_rlt_type: number | null
    idx_rlt_sid: number | null
    idx_rlt_order: number | null
    idx_rlt_dateline: number | null
  }

  export type Chii_index_relatedMinAggregateOutputType = {
    idx_rlt_id: number | null
    idx_rlt_cat: number | null
    idx_rlt_rid: number | null
    idx_rlt_type: number | null
    idx_rlt_sid: number | null
    idx_rlt_order: number | null
    idx_rlt_comment: string | null
    idx_rlt_dateline: number | null
  }

  export type Chii_index_relatedMaxAggregateOutputType = {
    idx_rlt_id: number | null
    idx_rlt_cat: number | null
    idx_rlt_rid: number | null
    idx_rlt_type: number | null
    idx_rlt_sid: number | null
    idx_rlt_order: number | null
    idx_rlt_comment: string | null
    idx_rlt_dateline: number | null
  }

  export type Chii_index_relatedCountAggregateOutputType = {
    idx_rlt_id: number
    idx_rlt_cat: number
    idx_rlt_rid: number
    idx_rlt_type: number
    idx_rlt_sid: number
    idx_rlt_order: number
    idx_rlt_comment: number
    idx_rlt_dateline: number
    _all: number
  }


  export type Chii_index_relatedAvgAggregateInputType = {
    idx_rlt_id?: true
    idx_rlt_cat?: true
    idx_rlt_rid?: true
    idx_rlt_type?: true
    idx_rlt_sid?: true
    idx_rlt_order?: true
    idx_rlt_dateline?: true
  }

  export type Chii_index_relatedSumAggregateInputType = {
    idx_rlt_id?: true
    idx_rlt_cat?: true
    idx_rlt_rid?: true
    idx_rlt_type?: true
    idx_rlt_sid?: true
    idx_rlt_order?: true
    idx_rlt_dateline?: true
  }

  export type Chii_index_relatedMinAggregateInputType = {
    idx_rlt_id?: true
    idx_rlt_cat?: true
    idx_rlt_rid?: true
    idx_rlt_type?: true
    idx_rlt_sid?: true
    idx_rlt_order?: true
    idx_rlt_comment?: true
    idx_rlt_dateline?: true
  }

  export type Chii_index_relatedMaxAggregateInputType = {
    idx_rlt_id?: true
    idx_rlt_cat?: true
    idx_rlt_rid?: true
    idx_rlt_type?: true
    idx_rlt_sid?: true
    idx_rlt_order?: true
    idx_rlt_comment?: true
    idx_rlt_dateline?: true
  }

  export type Chii_index_relatedCountAggregateInputType = {
    idx_rlt_id?: true
    idx_rlt_cat?: true
    idx_rlt_rid?: true
    idx_rlt_type?: true
    idx_rlt_sid?: true
    idx_rlt_order?: true
    idx_rlt_comment?: true
    idx_rlt_dateline?: true
    _all?: true
  }

  export type Chii_index_relatedAggregateArgs = {
    /**
     * Filter which chii_index_related to aggregate.
     * 
    **/
    where?: chii_index_relatedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_index_relateds to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_index_relatedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_index_relatedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_index_relateds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_index_relateds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_index_relateds
    **/
    _count?: true | Chii_index_relatedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_index_relatedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_index_relatedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_index_relatedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_index_relatedMaxAggregateInputType
  }

  export type GetChii_index_relatedAggregateType<T extends Chii_index_relatedAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_index_related]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_index_related[P]>
      : GetScalarType<T[P], AggregateChii_index_related[P]>
  }




  export type Chii_index_relatedGroupByArgs = {
    where?: chii_index_relatedWhereInput
    orderBy?: Enumerable<chii_index_relatedOrderByWithAggregationInput>
    by: Array<Chii_index_relatedScalarFieldEnum>
    having?: chii_index_relatedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_index_relatedCountAggregateInputType | true
    _avg?: Chii_index_relatedAvgAggregateInputType
    _sum?: Chii_index_relatedSumAggregateInputType
    _min?: Chii_index_relatedMinAggregateInputType
    _max?: Chii_index_relatedMaxAggregateInputType
  }


  export type Chii_index_relatedGroupByOutputType = {
    idx_rlt_id: number
    idx_rlt_cat: number
    idx_rlt_rid: number
    idx_rlt_type: number
    idx_rlt_sid: number
    idx_rlt_order: number
    idx_rlt_comment: string
    idx_rlt_dateline: number
    _count: Chii_index_relatedCountAggregateOutputType | null
    _avg: Chii_index_relatedAvgAggregateOutputType | null
    _sum: Chii_index_relatedSumAggregateOutputType | null
    _min: Chii_index_relatedMinAggregateOutputType | null
    _max: Chii_index_relatedMaxAggregateOutputType | null
  }

  type GetChii_index_relatedGroupByPayload<T extends Chii_index_relatedGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_index_relatedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_index_relatedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_index_relatedGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_index_relatedGroupByOutputType[P]>
        }
      >
    >


  export type chii_index_relatedSelect = {
    idx_rlt_id?: boolean
    idx_rlt_cat?: boolean
    idx_rlt_rid?: boolean
    idx_rlt_type?: boolean
    idx_rlt_sid?: boolean
    idx_rlt_order?: boolean
    idx_rlt_comment?: boolean
    idx_rlt_dateline?: boolean
  }


  export type chii_index_relatedGetPayload<S extends boolean | null | undefined | chii_index_relatedArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_index_related :
    S extends undefined ? never :
    S extends { include: any } & (chii_index_relatedArgs | chii_index_relatedFindManyArgs)
    ? chii_index_related 
    : S extends { select: any } & (chii_index_relatedArgs | chii_index_relatedFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_index_related ? chii_index_related[P] : never
  } 
      : chii_index_related


  type chii_index_relatedCountArgs = Merge<
    Omit<chii_index_relatedFindManyArgs, 'select' | 'include'> & {
      select?: Chii_index_relatedCountAggregateInputType | true
    }
  >

  export interface chii_index_relatedDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_index_related that matches the filter.
     * @param {chii_index_relatedFindUniqueArgs} args - Arguments to find a Chii_index_related
     * @example
     * // Get one Chii_index_related
     * const chii_index_related = await prisma.chii_index_related.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_index_relatedFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_index_relatedFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_index_related'> extends True ? Prisma__chii_index_relatedClient<chii_index_relatedGetPayload<T>> : Prisma__chii_index_relatedClient<chii_index_relatedGetPayload<T> | null, null>

    /**
     * Find one Chii_index_related that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_index_relatedFindUniqueOrThrowArgs} args - Arguments to find a Chii_index_related
     * @example
     * // Get one Chii_index_related
     * const chii_index_related = await prisma.chii_index_related.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_index_relatedFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_index_relatedFindUniqueOrThrowArgs>
    ): Prisma__chii_index_relatedClient<chii_index_relatedGetPayload<T>>

    /**
     * Find the first Chii_index_related that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_index_relatedFindFirstArgs} args - Arguments to find a Chii_index_related
     * @example
     * // Get one Chii_index_related
     * const chii_index_related = await prisma.chii_index_related.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_index_relatedFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_index_relatedFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_index_related'> extends True ? Prisma__chii_index_relatedClient<chii_index_relatedGetPayload<T>> : Prisma__chii_index_relatedClient<chii_index_relatedGetPayload<T> | null, null>

    /**
     * Find the first Chii_index_related that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_index_relatedFindFirstOrThrowArgs} args - Arguments to find a Chii_index_related
     * @example
     * // Get one Chii_index_related
     * const chii_index_related = await prisma.chii_index_related.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_index_relatedFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_index_relatedFindFirstOrThrowArgs>
    ): Prisma__chii_index_relatedClient<chii_index_relatedGetPayload<T>>

    /**
     * Find zero or more Chii_index_relateds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_index_relatedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_index_relateds
     * const chii_index_relateds = await prisma.chii_index_related.findMany()
     * 
     * // Get first 10 Chii_index_relateds
     * const chii_index_relateds = await prisma.chii_index_related.findMany({ take: 10 })
     * 
     * // Only select the `idx_rlt_id`
     * const chii_index_relatedWithIdx_rlt_idOnly = await prisma.chii_index_related.findMany({ select: { idx_rlt_id: true } })
     * 
    **/
    findMany<T extends chii_index_relatedFindManyArgs>(
      args?: SelectSubset<T, chii_index_relatedFindManyArgs>
    ): PrismaPromise<Array<chii_index_relatedGetPayload<T>>>

    /**
     * Create a Chii_index_related.
     * @param {chii_index_relatedCreateArgs} args - Arguments to create a Chii_index_related.
     * @example
     * // Create one Chii_index_related
     * const Chii_index_related = await prisma.chii_index_related.create({
     *   data: {
     *     // ... data to create a Chii_index_related
     *   }
     * })
     * 
    **/
    create<T extends chii_index_relatedCreateArgs>(
      args: SelectSubset<T, chii_index_relatedCreateArgs>
    ): Prisma__chii_index_relatedClient<chii_index_relatedGetPayload<T>>

    /**
     * Create many Chii_index_relateds.
     *     @param {chii_index_relatedCreateManyArgs} args - Arguments to create many Chii_index_relateds.
     *     @example
     *     // Create many Chii_index_relateds
     *     const chii_index_related = await prisma.chii_index_related.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_index_relatedCreateManyArgs>(
      args?: SelectSubset<T, chii_index_relatedCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_index_related.
     * @param {chii_index_relatedDeleteArgs} args - Arguments to delete one Chii_index_related.
     * @example
     * // Delete one Chii_index_related
     * const Chii_index_related = await prisma.chii_index_related.delete({
     *   where: {
     *     // ... filter to delete one Chii_index_related
     *   }
     * })
     * 
    **/
    delete<T extends chii_index_relatedDeleteArgs>(
      args: SelectSubset<T, chii_index_relatedDeleteArgs>
    ): Prisma__chii_index_relatedClient<chii_index_relatedGetPayload<T>>

    /**
     * Update one Chii_index_related.
     * @param {chii_index_relatedUpdateArgs} args - Arguments to update one Chii_index_related.
     * @example
     * // Update one Chii_index_related
     * const chii_index_related = await prisma.chii_index_related.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_index_relatedUpdateArgs>(
      args: SelectSubset<T, chii_index_relatedUpdateArgs>
    ): Prisma__chii_index_relatedClient<chii_index_relatedGetPayload<T>>

    /**
     * Delete zero or more Chii_index_relateds.
     * @param {chii_index_relatedDeleteManyArgs} args - Arguments to filter Chii_index_relateds to delete.
     * @example
     * // Delete a few Chii_index_relateds
     * const { count } = await prisma.chii_index_related.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_index_relatedDeleteManyArgs>(
      args?: SelectSubset<T, chii_index_relatedDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_index_relateds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_index_relatedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_index_relateds
     * const chii_index_related = await prisma.chii_index_related.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_index_relatedUpdateManyArgs>(
      args: SelectSubset<T, chii_index_relatedUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_index_related.
     * @param {chii_index_relatedUpsertArgs} args - Arguments to update or create a Chii_index_related.
     * @example
     * // Update or create a Chii_index_related
     * const chii_index_related = await prisma.chii_index_related.upsert({
     *   create: {
     *     // ... data to create a Chii_index_related
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_index_related we want to update
     *   }
     * })
    **/
    upsert<T extends chii_index_relatedUpsertArgs>(
      args: SelectSubset<T, chii_index_relatedUpsertArgs>
    ): Prisma__chii_index_relatedClient<chii_index_relatedGetPayload<T>>

    /**
     * Count the number of Chii_index_relateds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_index_relatedCountArgs} args - Arguments to filter Chii_index_relateds to count.
     * @example
     * // Count the number of Chii_index_relateds
     * const count = await prisma.chii_index_related.count({
     *   where: {
     *     // ... the filter for the Chii_index_relateds we want to count
     *   }
     * })
    **/
    count<T extends chii_index_relatedCountArgs>(
      args?: Subset<T, chii_index_relatedCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_index_relatedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_index_related.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_index_relatedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_index_relatedAggregateArgs>(args: Subset<T, Chii_index_relatedAggregateArgs>): PrismaPromise<GetChii_index_relatedAggregateType<T>>

    /**
     * Group by Chii_index_related.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_index_relatedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_index_relatedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_index_relatedGroupByArgs['orderBy'] }
        : { orderBy?: Chii_index_relatedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_index_relatedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_index_relatedGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_index_related.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_index_relatedClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_index_related base type for findUnique actions
   */
  export type chii_index_relatedFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_index_related
     * 
    **/
    select?: chii_index_relatedSelect | null
    /**
     * Filter, which chii_index_related to fetch.
     * 
    **/
    where: chii_index_relatedWhereUniqueInput
  }

  /**
   * chii_index_related: findUnique
   */
  export interface chii_index_relatedFindUniqueArgs extends chii_index_relatedFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_index_related findUniqueOrThrow
   */
  export type chii_index_relatedFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_index_related
     * 
    **/
    select?: chii_index_relatedSelect | null
    /**
     * Filter, which chii_index_related to fetch.
     * 
    **/
    where: chii_index_relatedWhereUniqueInput
  }


  /**
   * chii_index_related base type for findFirst actions
   */
  export type chii_index_relatedFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_index_related
     * 
    **/
    select?: chii_index_relatedSelect | null
    /**
     * Filter, which chii_index_related to fetch.
     * 
    **/
    where?: chii_index_relatedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_index_relateds to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_index_relatedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_index_relateds.
     * 
    **/
    cursor?: chii_index_relatedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_index_relateds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_index_relateds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_index_relateds.
     * 
    **/
    distinct?: Enumerable<Chii_index_relatedScalarFieldEnum>
  }

  /**
   * chii_index_related: findFirst
   */
  export interface chii_index_relatedFindFirstArgs extends chii_index_relatedFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_index_related findFirstOrThrow
   */
  export type chii_index_relatedFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_index_related
     * 
    **/
    select?: chii_index_relatedSelect | null
    /**
     * Filter, which chii_index_related to fetch.
     * 
    **/
    where?: chii_index_relatedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_index_relateds to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_index_relatedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_index_relateds.
     * 
    **/
    cursor?: chii_index_relatedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_index_relateds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_index_relateds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_index_relateds.
     * 
    **/
    distinct?: Enumerable<Chii_index_relatedScalarFieldEnum>
  }


  /**
   * chii_index_related findMany
   */
  export type chii_index_relatedFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_index_related
     * 
    **/
    select?: chii_index_relatedSelect | null
    /**
     * Filter, which chii_index_relateds to fetch.
     * 
    **/
    where?: chii_index_relatedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_index_relateds to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_index_relatedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_index_relateds.
     * 
    **/
    cursor?: chii_index_relatedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_index_relateds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_index_relateds.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_index_relatedScalarFieldEnum>
  }


  /**
   * chii_index_related create
   */
  export type chii_index_relatedCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_index_related
     * 
    **/
    select?: chii_index_relatedSelect | null
    /**
     * The data needed to create a chii_index_related.
     * 
    **/
    data: XOR<chii_index_relatedCreateInput, chii_index_relatedUncheckedCreateInput>
  }


  /**
   * chii_index_related createMany
   */
  export type chii_index_relatedCreateManyArgs = {
    /**
     * The data used to create many chii_index_relateds.
     * 
    **/
    data: Enumerable<chii_index_relatedCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_index_related update
   */
  export type chii_index_relatedUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_index_related
     * 
    **/
    select?: chii_index_relatedSelect | null
    /**
     * The data needed to update a chii_index_related.
     * 
    **/
    data: XOR<chii_index_relatedUpdateInput, chii_index_relatedUncheckedUpdateInput>
    /**
     * Choose, which chii_index_related to update.
     * 
    **/
    where: chii_index_relatedWhereUniqueInput
  }


  /**
   * chii_index_related updateMany
   */
  export type chii_index_relatedUpdateManyArgs = {
    /**
     * The data used to update chii_index_relateds.
     * 
    **/
    data: XOR<chii_index_relatedUpdateManyMutationInput, chii_index_relatedUncheckedUpdateManyInput>
    /**
     * Filter which chii_index_relateds to update
     * 
    **/
    where?: chii_index_relatedWhereInput
  }


  /**
   * chii_index_related upsert
   */
  export type chii_index_relatedUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_index_related
     * 
    **/
    select?: chii_index_relatedSelect | null
    /**
     * The filter to search for the chii_index_related to update in case it exists.
     * 
    **/
    where: chii_index_relatedWhereUniqueInput
    /**
     * In case the chii_index_related found by the `where` argument doesn't exist, create a new chii_index_related with this data.
     * 
    **/
    create: XOR<chii_index_relatedCreateInput, chii_index_relatedUncheckedCreateInput>
    /**
     * In case the chii_index_related was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_index_relatedUpdateInput, chii_index_relatedUncheckedUpdateInput>
  }


  /**
   * chii_index_related delete
   */
  export type chii_index_relatedDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_index_related
     * 
    **/
    select?: chii_index_relatedSelect | null
    /**
     * Filter which chii_index_related to delete.
     * 
    **/
    where: chii_index_relatedWhereUniqueInput
  }


  /**
   * chii_index_related deleteMany
   */
  export type chii_index_relatedDeleteManyArgs = {
    /**
     * Filter which chii_index_relateds to delete
     * 
    **/
    where?: chii_index_relatedWhereInput
  }


  /**
   * chii_index_related without action
   */
  export type chii_index_relatedArgs = {
    /**
     * Select specific fields to fetch from the chii_index_related
     * 
    **/
    select?: chii_index_relatedSelect | null
  }



  /**
   * Model chii_memberfields
   */


  export type AggregateChii_memberfields = {
    _count: Chii_memberfieldsCountAggregateOutputType | null
    _avg: Chii_memberfieldsAvgAggregateOutputType | null
    _sum: Chii_memberfieldsSumAggregateOutputType | null
    _min: Chii_memberfieldsMinAggregateOutputType | null
    _max: Chii_memberfieldsMaxAggregateOutputType | null
  }

  export type Chii_memberfieldsAvgAggregateOutputType = {
    uid: number | null
  }

  export type Chii_memberfieldsSumAggregateOutputType = {
    uid: number | null
  }

  export type Chii_memberfieldsMinAggregateOutputType = {
    uid: number | null
    site: string | null
    location: string | null
    bio: string | null
    privacy: string | null
    blocklist: string | null
  }

  export type Chii_memberfieldsMaxAggregateOutputType = {
    uid: number | null
    site: string | null
    location: string | null
    bio: string | null
    privacy: string | null
    blocklist: string | null
  }

  export type Chii_memberfieldsCountAggregateOutputType = {
    uid: number
    site: number
    location: number
    bio: number
    privacy: number
    blocklist: number
    _all: number
  }


  export type Chii_memberfieldsAvgAggregateInputType = {
    uid?: true
  }

  export type Chii_memberfieldsSumAggregateInputType = {
    uid?: true
  }

  export type Chii_memberfieldsMinAggregateInputType = {
    uid?: true
    site?: true
    location?: true
    bio?: true
    privacy?: true
    blocklist?: true
  }

  export type Chii_memberfieldsMaxAggregateInputType = {
    uid?: true
    site?: true
    location?: true
    bio?: true
    privacy?: true
    blocklist?: true
  }

  export type Chii_memberfieldsCountAggregateInputType = {
    uid?: true
    site?: true
    location?: true
    bio?: true
    privacy?: true
    blocklist?: true
    _all?: true
  }

  export type Chii_memberfieldsAggregateArgs = {
    /**
     * Filter which chii_memberfields to aggregate.
     * 
    **/
    where?: chii_memberfieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_memberfields to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_memberfieldsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_memberfieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_memberfields from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_memberfields.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_memberfields
    **/
    _count?: true | Chii_memberfieldsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_memberfieldsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_memberfieldsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_memberfieldsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_memberfieldsMaxAggregateInputType
  }

  export type GetChii_memberfieldsAggregateType<T extends Chii_memberfieldsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_memberfields]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_memberfields[P]>
      : GetScalarType<T[P], AggregateChii_memberfields[P]>
  }




  export type Chii_memberfieldsGroupByArgs = {
    where?: chii_memberfieldsWhereInput
    orderBy?: Enumerable<chii_memberfieldsOrderByWithAggregationInput>
    by: Array<Chii_memberfieldsScalarFieldEnum>
    having?: chii_memberfieldsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_memberfieldsCountAggregateInputType | true
    _avg?: Chii_memberfieldsAvgAggregateInputType
    _sum?: Chii_memberfieldsSumAggregateInputType
    _min?: Chii_memberfieldsMinAggregateInputType
    _max?: Chii_memberfieldsMaxAggregateInputType
  }


  export type Chii_memberfieldsGroupByOutputType = {
    uid: number
    site: string
    location: string
    bio: string
    privacy: string
    blocklist: string
    _count: Chii_memberfieldsCountAggregateOutputType | null
    _avg: Chii_memberfieldsAvgAggregateOutputType | null
    _sum: Chii_memberfieldsSumAggregateOutputType | null
    _min: Chii_memberfieldsMinAggregateOutputType | null
    _max: Chii_memberfieldsMaxAggregateOutputType | null
  }

  type GetChii_memberfieldsGroupByPayload<T extends Chii_memberfieldsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_memberfieldsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_memberfieldsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_memberfieldsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_memberfieldsGroupByOutputType[P]>
        }
      >
    >


  export type chii_memberfieldsSelect = {
    uid?: boolean
    site?: boolean
    location?: boolean
    bio?: boolean
    privacy?: boolean
    blocklist?: boolean
  }


  export type chii_memberfieldsGetPayload<S extends boolean | null | undefined | chii_memberfieldsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_memberfields :
    S extends undefined ? never :
    S extends { include: any } & (chii_memberfieldsArgs | chii_memberfieldsFindManyArgs)
    ? chii_memberfields 
    : S extends { select: any } & (chii_memberfieldsArgs | chii_memberfieldsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_memberfields ? chii_memberfields[P] : never
  } 
      : chii_memberfields


  type chii_memberfieldsCountArgs = Merge<
    Omit<chii_memberfieldsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_memberfieldsCountAggregateInputType | true
    }
  >

  export interface chii_memberfieldsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_memberfields that matches the filter.
     * @param {chii_memberfieldsFindUniqueArgs} args - Arguments to find a Chii_memberfields
     * @example
     * // Get one Chii_memberfields
     * const chii_memberfields = await prisma.chii_memberfields.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_memberfieldsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_memberfieldsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_memberfields'> extends True ? Prisma__chii_memberfieldsClient<chii_memberfieldsGetPayload<T>> : Prisma__chii_memberfieldsClient<chii_memberfieldsGetPayload<T> | null, null>

    /**
     * Find one Chii_memberfields that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_memberfieldsFindUniqueOrThrowArgs} args - Arguments to find a Chii_memberfields
     * @example
     * // Get one Chii_memberfields
     * const chii_memberfields = await prisma.chii_memberfields.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_memberfieldsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_memberfieldsFindUniqueOrThrowArgs>
    ): Prisma__chii_memberfieldsClient<chii_memberfieldsGetPayload<T>>

    /**
     * Find the first Chii_memberfields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_memberfieldsFindFirstArgs} args - Arguments to find a Chii_memberfields
     * @example
     * // Get one Chii_memberfields
     * const chii_memberfields = await prisma.chii_memberfields.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_memberfieldsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_memberfieldsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_memberfields'> extends True ? Prisma__chii_memberfieldsClient<chii_memberfieldsGetPayload<T>> : Prisma__chii_memberfieldsClient<chii_memberfieldsGetPayload<T> | null, null>

    /**
     * Find the first Chii_memberfields that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_memberfieldsFindFirstOrThrowArgs} args - Arguments to find a Chii_memberfields
     * @example
     * // Get one Chii_memberfields
     * const chii_memberfields = await prisma.chii_memberfields.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_memberfieldsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_memberfieldsFindFirstOrThrowArgs>
    ): Prisma__chii_memberfieldsClient<chii_memberfieldsGetPayload<T>>

    /**
     * Find zero or more Chii_memberfields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_memberfieldsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_memberfields
     * const chii_memberfields = await prisma.chii_memberfields.findMany()
     * 
     * // Get first 10 Chii_memberfields
     * const chii_memberfields = await prisma.chii_memberfields.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const chii_memberfieldsWithUidOnly = await prisma.chii_memberfields.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends chii_memberfieldsFindManyArgs>(
      args?: SelectSubset<T, chii_memberfieldsFindManyArgs>
    ): PrismaPromise<Array<chii_memberfieldsGetPayload<T>>>

    /**
     * Create a Chii_memberfields.
     * @param {chii_memberfieldsCreateArgs} args - Arguments to create a Chii_memberfields.
     * @example
     * // Create one Chii_memberfields
     * const Chii_memberfields = await prisma.chii_memberfields.create({
     *   data: {
     *     // ... data to create a Chii_memberfields
     *   }
     * })
     * 
    **/
    create<T extends chii_memberfieldsCreateArgs>(
      args: SelectSubset<T, chii_memberfieldsCreateArgs>
    ): Prisma__chii_memberfieldsClient<chii_memberfieldsGetPayload<T>>

    /**
     * Create many Chii_memberfields.
     *     @param {chii_memberfieldsCreateManyArgs} args - Arguments to create many Chii_memberfields.
     *     @example
     *     // Create many Chii_memberfields
     *     const chii_memberfields = await prisma.chii_memberfields.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_memberfieldsCreateManyArgs>(
      args?: SelectSubset<T, chii_memberfieldsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_memberfields.
     * @param {chii_memberfieldsDeleteArgs} args - Arguments to delete one Chii_memberfields.
     * @example
     * // Delete one Chii_memberfields
     * const Chii_memberfields = await prisma.chii_memberfields.delete({
     *   where: {
     *     // ... filter to delete one Chii_memberfields
     *   }
     * })
     * 
    **/
    delete<T extends chii_memberfieldsDeleteArgs>(
      args: SelectSubset<T, chii_memberfieldsDeleteArgs>
    ): Prisma__chii_memberfieldsClient<chii_memberfieldsGetPayload<T>>

    /**
     * Update one Chii_memberfields.
     * @param {chii_memberfieldsUpdateArgs} args - Arguments to update one Chii_memberfields.
     * @example
     * // Update one Chii_memberfields
     * const chii_memberfields = await prisma.chii_memberfields.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_memberfieldsUpdateArgs>(
      args: SelectSubset<T, chii_memberfieldsUpdateArgs>
    ): Prisma__chii_memberfieldsClient<chii_memberfieldsGetPayload<T>>

    /**
     * Delete zero or more Chii_memberfields.
     * @param {chii_memberfieldsDeleteManyArgs} args - Arguments to filter Chii_memberfields to delete.
     * @example
     * // Delete a few Chii_memberfields
     * const { count } = await prisma.chii_memberfields.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_memberfieldsDeleteManyArgs>(
      args?: SelectSubset<T, chii_memberfieldsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_memberfields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_memberfieldsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_memberfields
     * const chii_memberfields = await prisma.chii_memberfields.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_memberfieldsUpdateManyArgs>(
      args: SelectSubset<T, chii_memberfieldsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_memberfields.
     * @param {chii_memberfieldsUpsertArgs} args - Arguments to update or create a Chii_memberfields.
     * @example
     * // Update or create a Chii_memberfields
     * const chii_memberfields = await prisma.chii_memberfields.upsert({
     *   create: {
     *     // ... data to create a Chii_memberfields
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_memberfields we want to update
     *   }
     * })
    **/
    upsert<T extends chii_memberfieldsUpsertArgs>(
      args: SelectSubset<T, chii_memberfieldsUpsertArgs>
    ): Prisma__chii_memberfieldsClient<chii_memberfieldsGetPayload<T>>

    /**
     * Count the number of Chii_memberfields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_memberfieldsCountArgs} args - Arguments to filter Chii_memberfields to count.
     * @example
     * // Count the number of Chii_memberfields
     * const count = await prisma.chii_memberfields.count({
     *   where: {
     *     // ... the filter for the Chii_memberfields we want to count
     *   }
     * })
    **/
    count<T extends chii_memberfieldsCountArgs>(
      args?: Subset<T, chii_memberfieldsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_memberfieldsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_memberfields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_memberfieldsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_memberfieldsAggregateArgs>(args: Subset<T, Chii_memberfieldsAggregateArgs>): PrismaPromise<GetChii_memberfieldsAggregateType<T>>

    /**
     * Group by Chii_memberfields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_memberfieldsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_memberfieldsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_memberfieldsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_memberfieldsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_memberfieldsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_memberfieldsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_memberfields.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_memberfieldsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_memberfields base type for findUnique actions
   */
  export type chii_memberfieldsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_memberfields
     * 
    **/
    select?: chii_memberfieldsSelect | null
    /**
     * Filter, which chii_memberfields to fetch.
     * 
    **/
    where: chii_memberfieldsWhereUniqueInput
  }

  /**
   * chii_memberfields: findUnique
   */
  export interface chii_memberfieldsFindUniqueArgs extends chii_memberfieldsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_memberfields findUniqueOrThrow
   */
  export type chii_memberfieldsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_memberfields
     * 
    **/
    select?: chii_memberfieldsSelect | null
    /**
     * Filter, which chii_memberfields to fetch.
     * 
    **/
    where: chii_memberfieldsWhereUniqueInput
  }


  /**
   * chii_memberfields base type for findFirst actions
   */
  export type chii_memberfieldsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_memberfields
     * 
    **/
    select?: chii_memberfieldsSelect | null
    /**
     * Filter, which chii_memberfields to fetch.
     * 
    **/
    where?: chii_memberfieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_memberfields to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_memberfieldsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_memberfields.
     * 
    **/
    cursor?: chii_memberfieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_memberfields from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_memberfields.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_memberfields.
     * 
    **/
    distinct?: Enumerable<Chii_memberfieldsScalarFieldEnum>
  }

  /**
   * chii_memberfields: findFirst
   */
  export interface chii_memberfieldsFindFirstArgs extends chii_memberfieldsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_memberfields findFirstOrThrow
   */
  export type chii_memberfieldsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_memberfields
     * 
    **/
    select?: chii_memberfieldsSelect | null
    /**
     * Filter, which chii_memberfields to fetch.
     * 
    **/
    where?: chii_memberfieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_memberfields to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_memberfieldsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_memberfields.
     * 
    **/
    cursor?: chii_memberfieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_memberfields from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_memberfields.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_memberfields.
     * 
    **/
    distinct?: Enumerable<Chii_memberfieldsScalarFieldEnum>
  }


  /**
   * chii_memberfields findMany
   */
  export type chii_memberfieldsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_memberfields
     * 
    **/
    select?: chii_memberfieldsSelect | null
    /**
     * Filter, which chii_memberfields to fetch.
     * 
    **/
    where?: chii_memberfieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_memberfields to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_memberfieldsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_memberfields.
     * 
    **/
    cursor?: chii_memberfieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_memberfields from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_memberfields.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_memberfieldsScalarFieldEnum>
  }


  /**
   * chii_memberfields create
   */
  export type chii_memberfieldsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_memberfields
     * 
    **/
    select?: chii_memberfieldsSelect | null
    /**
     * The data needed to create a chii_memberfields.
     * 
    **/
    data: XOR<chii_memberfieldsCreateInput, chii_memberfieldsUncheckedCreateInput>
  }


  /**
   * chii_memberfields createMany
   */
  export type chii_memberfieldsCreateManyArgs = {
    /**
     * The data used to create many chii_memberfields.
     * 
    **/
    data: Enumerable<chii_memberfieldsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_memberfields update
   */
  export type chii_memberfieldsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_memberfields
     * 
    **/
    select?: chii_memberfieldsSelect | null
    /**
     * The data needed to update a chii_memberfields.
     * 
    **/
    data: XOR<chii_memberfieldsUpdateInput, chii_memberfieldsUncheckedUpdateInput>
    /**
     * Choose, which chii_memberfields to update.
     * 
    **/
    where: chii_memberfieldsWhereUniqueInput
  }


  /**
   * chii_memberfields updateMany
   */
  export type chii_memberfieldsUpdateManyArgs = {
    /**
     * The data used to update chii_memberfields.
     * 
    **/
    data: XOR<chii_memberfieldsUpdateManyMutationInput, chii_memberfieldsUncheckedUpdateManyInput>
    /**
     * Filter which chii_memberfields to update
     * 
    **/
    where?: chii_memberfieldsWhereInput
  }


  /**
   * chii_memberfields upsert
   */
  export type chii_memberfieldsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_memberfields
     * 
    **/
    select?: chii_memberfieldsSelect | null
    /**
     * The filter to search for the chii_memberfields to update in case it exists.
     * 
    **/
    where: chii_memberfieldsWhereUniqueInput
    /**
     * In case the chii_memberfields found by the `where` argument doesn't exist, create a new chii_memberfields with this data.
     * 
    **/
    create: XOR<chii_memberfieldsCreateInput, chii_memberfieldsUncheckedCreateInput>
    /**
     * In case the chii_memberfields was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_memberfieldsUpdateInput, chii_memberfieldsUncheckedUpdateInput>
  }


  /**
   * chii_memberfields delete
   */
  export type chii_memberfieldsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_memberfields
     * 
    **/
    select?: chii_memberfieldsSelect | null
    /**
     * Filter which chii_memberfields to delete.
     * 
    **/
    where: chii_memberfieldsWhereUniqueInput
  }


  /**
   * chii_memberfields deleteMany
   */
  export type chii_memberfieldsDeleteManyArgs = {
    /**
     * Filter which chii_memberfields to delete
     * 
    **/
    where?: chii_memberfieldsWhereInput
  }


  /**
   * chii_memberfields without action
   */
  export type chii_memberfieldsArgs = {
    /**
     * Select specific fields to fetch from the chii_memberfields
     * 
    **/
    select?: chii_memberfieldsSelect | null
  }



  /**
   * Model chii_members
   */


  export type AggregateChii_members = {
    _count: Chii_membersCountAggregateOutputType | null
    _avg: Chii_membersAvgAggregateOutputType | null
    _sum: Chii_membersSumAggregateOutputType | null
    _min: Chii_membersMinAggregateOutputType | null
    _max: Chii_membersMaxAggregateOutputType | null
  }

  export type Chii_membersAvgAggregateOutputType = {
    uid: number | null
    groupid: number | null
    regdate: number | null
    lastvisit: number | null
    lastactivity: number | null
    lastpost: number | null
    new_notify: number | null
  }

  export type Chii_membersSumAggregateOutputType = {
    uid: number | null
    groupid: number | null
    regdate: number | null
    lastvisit: number | null
    lastactivity: number | null
    lastpost: number | null
    new_notify: number | null
  }

  export type Chii_membersMinAggregateOutputType = {
    uid: number | null
    username: string | null
    nickname: string | null
    avatar: string | null
    groupid: number | null
    regdate: number | null
    lastvisit: number | null
    lastactivity: number | null
    lastpost: number | null
    dateformat: string | null
    timeformat: boolean | null
    timeoffset: string | null
    newpm: boolean | null
    new_notify: number | null
    sign: string | null
    password_crypt: string | null
    email: string | null
  }

  export type Chii_membersMaxAggregateOutputType = {
    uid: number | null
    username: string | null
    nickname: string | null
    avatar: string | null
    groupid: number | null
    regdate: number | null
    lastvisit: number | null
    lastactivity: number | null
    lastpost: number | null
    dateformat: string | null
    timeformat: boolean | null
    timeoffset: string | null
    newpm: boolean | null
    new_notify: number | null
    sign: string | null
    password_crypt: string | null
    email: string | null
  }

  export type Chii_membersCountAggregateOutputType = {
    uid: number
    username: number
    nickname: number
    avatar: number
    groupid: number
    regdate: number
    lastvisit: number
    lastactivity: number
    lastpost: number
    dateformat: number
    timeformat: number
    timeoffset: number
    newpm: number
    new_notify: number
    sign: number
    password_crypt: number
    email: number
    _all: number
  }


  export type Chii_membersAvgAggregateInputType = {
    uid?: true
    groupid?: true
    regdate?: true
    lastvisit?: true
    lastactivity?: true
    lastpost?: true
    new_notify?: true
  }

  export type Chii_membersSumAggregateInputType = {
    uid?: true
    groupid?: true
    regdate?: true
    lastvisit?: true
    lastactivity?: true
    lastpost?: true
    new_notify?: true
  }

  export type Chii_membersMinAggregateInputType = {
    uid?: true
    username?: true
    nickname?: true
    avatar?: true
    groupid?: true
    regdate?: true
    lastvisit?: true
    lastactivity?: true
    lastpost?: true
    dateformat?: true
    timeformat?: true
    timeoffset?: true
    newpm?: true
    new_notify?: true
    sign?: true
    password_crypt?: true
    email?: true
  }

  export type Chii_membersMaxAggregateInputType = {
    uid?: true
    username?: true
    nickname?: true
    avatar?: true
    groupid?: true
    regdate?: true
    lastvisit?: true
    lastactivity?: true
    lastpost?: true
    dateformat?: true
    timeformat?: true
    timeoffset?: true
    newpm?: true
    new_notify?: true
    sign?: true
    password_crypt?: true
    email?: true
  }

  export type Chii_membersCountAggregateInputType = {
    uid?: true
    username?: true
    nickname?: true
    avatar?: true
    groupid?: true
    regdate?: true
    lastvisit?: true
    lastactivity?: true
    lastpost?: true
    dateformat?: true
    timeformat?: true
    timeoffset?: true
    newpm?: true
    new_notify?: true
    sign?: true
    password_crypt?: true
    email?: true
    _all?: true
  }

  export type Chii_membersAggregateArgs = {
    /**
     * Filter which chii_members to aggregate.
     * 
    **/
    where?: chii_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_members to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_membersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_members from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_members.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_members
    **/
    _count?: true | Chii_membersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_membersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_membersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_membersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_membersMaxAggregateInputType
  }

  export type GetChii_membersAggregateType<T extends Chii_membersAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_members]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_members[P]>
      : GetScalarType<T[P], AggregateChii_members[P]>
  }




  export type Chii_membersGroupByArgs = {
    where?: chii_membersWhereInput
    orderBy?: Enumerable<chii_membersOrderByWithAggregationInput>
    by: Array<Chii_membersScalarFieldEnum>
    having?: chii_membersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_membersCountAggregateInputType | true
    _avg?: Chii_membersAvgAggregateInputType
    _sum?: Chii_membersSumAggregateInputType
    _min?: Chii_membersMinAggregateInputType
    _max?: Chii_membersMaxAggregateInputType
  }


  export type Chii_membersGroupByOutputType = {
    uid: number
    username: string
    nickname: string
    avatar: string
    groupid: number
    regdate: number
    lastvisit: number
    lastactivity: number
    lastpost: number
    dateformat: string
    timeformat: boolean
    timeoffset: string
    newpm: boolean
    new_notify: number
    sign: string
    password_crypt: string
    email: string
    _count: Chii_membersCountAggregateOutputType | null
    _avg: Chii_membersAvgAggregateOutputType | null
    _sum: Chii_membersSumAggregateOutputType | null
    _min: Chii_membersMinAggregateOutputType | null
    _max: Chii_membersMaxAggregateOutputType | null
  }

  type GetChii_membersGroupByPayload<T extends Chii_membersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_membersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_membersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_membersGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_membersGroupByOutputType[P]>
        }
      >
    >


  export type chii_membersSelect = {
    uid?: boolean
    username?: boolean
    nickname?: boolean
    avatar?: boolean
    groupid?: boolean
    regdate?: boolean
    lastvisit?: boolean
    lastactivity?: boolean
    lastpost?: boolean
    dateformat?: boolean
    timeformat?: boolean
    timeoffset?: boolean
    newpm?: boolean
    new_notify?: boolean
    sign?: boolean
    password_crypt?: boolean
    email?: boolean
  }


  export type chii_membersGetPayload<S extends boolean | null | undefined | chii_membersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_members :
    S extends undefined ? never :
    S extends { include: any } & (chii_membersArgs | chii_membersFindManyArgs)
    ? chii_members 
    : S extends { select: any } & (chii_membersArgs | chii_membersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_members ? chii_members[P] : never
  } 
      : chii_members


  type chii_membersCountArgs = Merge<
    Omit<chii_membersFindManyArgs, 'select' | 'include'> & {
      select?: Chii_membersCountAggregateInputType | true
    }
  >

  export interface chii_membersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_members that matches the filter.
     * @param {chii_membersFindUniqueArgs} args - Arguments to find a Chii_members
     * @example
     * // Get one Chii_members
     * const chii_members = await prisma.chii_members.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_membersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_membersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_members'> extends True ? Prisma__chii_membersClient<chii_membersGetPayload<T>> : Prisma__chii_membersClient<chii_membersGetPayload<T> | null, null>

    /**
     * Find one Chii_members that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_membersFindUniqueOrThrowArgs} args - Arguments to find a Chii_members
     * @example
     * // Get one Chii_members
     * const chii_members = await prisma.chii_members.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_membersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_membersFindUniqueOrThrowArgs>
    ): Prisma__chii_membersClient<chii_membersGetPayload<T>>

    /**
     * Find the first Chii_members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_membersFindFirstArgs} args - Arguments to find a Chii_members
     * @example
     * // Get one Chii_members
     * const chii_members = await prisma.chii_members.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_membersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_membersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_members'> extends True ? Prisma__chii_membersClient<chii_membersGetPayload<T>> : Prisma__chii_membersClient<chii_membersGetPayload<T> | null, null>

    /**
     * Find the first Chii_members that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_membersFindFirstOrThrowArgs} args - Arguments to find a Chii_members
     * @example
     * // Get one Chii_members
     * const chii_members = await prisma.chii_members.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_membersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_membersFindFirstOrThrowArgs>
    ): Prisma__chii_membersClient<chii_membersGetPayload<T>>

    /**
     * Find zero or more Chii_members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_membersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_members
     * const chii_members = await prisma.chii_members.findMany()
     * 
     * // Get first 10 Chii_members
     * const chii_members = await prisma.chii_members.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const chii_membersWithUidOnly = await prisma.chii_members.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends chii_membersFindManyArgs>(
      args?: SelectSubset<T, chii_membersFindManyArgs>
    ): PrismaPromise<Array<chii_membersGetPayload<T>>>

    /**
     * Create a Chii_members.
     * @param {chii_membersCreateArgs} args - Arguments to create a Chii_members.
     * @example
     * // Create one Chii_members
     * const Chii_members = await prisma.chii_members.create({
     *   data: {
     *     // ... data to create a Chii_members
     *   }
     * })
     * 
    **/
    create<T extends chii_membersCreateArgs>(
      args: SelectSubset<T, chii_membersCreateArgs>
    ): Prisma__chii_membersClient<chii_membersGetPayload<T>>

    /**
     * Create many Chii_members.
     *     @param {chii_membersCreateManyArgs} args - Arguments to create many Chii_members.
     *     @example
     *     // Create many Chii_members
     *     const chii_members = await prisma.chii_members.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_membersCreateManyArgs>(
      args?: SelectSubset<T, chii_membersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_members.
     * @param {chii_membersDeleteArgs} args - Arguments to delete one Chii_members.
     * @example
     * // Delete one Chii_members
     * const Chii_members = await prisma.chii_members.delete({
     *   where: {
     *     // ... filter to delete one Chii_members
     *   }
     * })
     * 
    **/
    delete<T extends chii_membersDeleteArgs>(
      args: SelectSubset<T, chii_membersDeleteArgs>
    ): Prisma__chii_membersClient<chii_membersGetPayload<T>>

    /**
     * Update one Chii_members.
     * @param {chii_membersUpdateArgs} args - Arguments to update one Chii_members.
     * @example
     * // Update one Chii_members
     * const chii_members = await prisma.chii_members.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_membersUpdateArgs>(
      args: SelectSubset<T, chii_membersUpdateArgs>
    ): Prisma__chii_membersClient<chii_membersGetPayload<T>>

    /**
     * Delete zero or more Chii_members.
     * @param {chii_membersDeleteManyArgs} args - Arguments to filter Chii_members to delete.
     * @example
     * // Delete a few Chii_members
     * const { count } = await prisma.chii_members.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_membersDeleteManyArgs>(
      args?: SelectSubset<T, chii_membersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_membersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_members
     * const chii_members = await prisma.chii_members.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_membersUpdateManyArgs>(
      args: SelectSubset<T, chii_membersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_members.
     * @param {chii_membersUpsertArgs} args - Arguments to update or create a Chii_members.
     * @example
     * // Update or create a Chii_members
     * const chii_members = await prisma.chii_members.upsert({
     *   create: {
     *     // ... data to create a Chii_members
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_members we want to update
     *   }
     * })
    **/
    upsert<T extends chii_membersUpsertArgs>(
      args: SelectSubset<T, chii_membersUpsertArgs>
    ): Prisma__chii_membersClient<chii_membersGetPayload<T>>

    /**
     * Count the number of Chii_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_membersCountArgs} args - Arguments to filter Chii_members to count.
     * @example
     * // Count the number of Chii_members
     * const count = await prisma.chii_members.count({
     *   where: {
     *     // ... the filter for the Chii_members we want to count
     *   }
     * })
    **/
    count<T extends chii_membersCountArgs>(
      args?: Subset<T, chii_membersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_membersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_membersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_membersAggregateArgs>(args: Subset<T, Chii_membersAggregateArgs>): PrismaPromise<GetChii_membersAggregateType<T>>

    /**
     * Group by Chii_members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_membersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_membersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_membersGroupByArgs['orderBy'] }
        : { orderBy?: Chii_membersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_membersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_membersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_members.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_membersClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_members base type for findUnique actions
   */
  export type chii_membersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_members
     * 
    **/
    select?: chii_membersSelect | null
    /**
     * Filter, which chii_members to fetch.
     * 
    **/
    where: chii_membersWhereUniqueInput
  }

  /**
   * chii_members: findUnique
   */
  export interface chii_membersFindUniqueArgs extends chii_membersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_members findUniqueOrThrow
   */
  export type chii_membersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_members
     * 
    **/
    select?: chii_membersSelect | null
    /**
     * Filter, which chii_members to fetch.
     * 
    **/
    where: chii_membersWhereUniqueInput
  }


  /**
   * chii_members base type for findFirst actions
   */
  export type chii_membersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_members
     * 
    **/
    select?: chii_membersSelect | null
    /**
     * Filter, which chii_members to fetch.
     * 
    **/
    where?: chii_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_members to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_membersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_members.
     * 
    **/
    cursor?: chii_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_members from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_members.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_members.
     * 
    **/
    distinct?: Enumerable<Chii_membersScalarFieldEnum>
  }

  /**
   * chii_members: findFirst
   */
  export interface chii_membersFindFirstArgs extends chii_membersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_members findFirstOrThrow
   */
  export type chii_membersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_members
     * 
    **/
    select?: chii_membersSelect | null
    /**
     * Filter, which chii_members to fetch.
     * 
    **/
    where?: chii_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_members to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_membersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_members.
     * 
    **/
    cursor?: chii_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_members from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_members.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_members.
     * 
    **/
    distinct?: Enumerable<Chii_membersScalarFieldEnum>
  }


  /**
   * chii_members findMany
   */
  export type chii_membersFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_members
     * 
    **/
    select?: chii_membersSelect | null
    /**
     * Filter, which chii_members to fetch.
     * 
    **/
    where?: chii_membersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_members to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_membersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_members.
     * 
    **/
    cursor?: chii_membersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_members from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_members.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_membersScalarFieldEnum>
  }


  /**
   * chii_members create
   */
  export type chii_membersCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_members
     * 
    **/
    select?: chii_membersSelect | null
    /**
     * The data needed to create a chii_members.
     * 
    **/
    data: XOR<chii_membersCreateInput, chii_membersUncheckedCreateInput>
  }


  /**
   * chii_members createMany
   */
  export type chii_membersCreateManyArgs = {
    /**
     * The data used to create many chii_members.
     * 
    **/
    data: Enumerable<chii_membersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_members update
   */
  export type chii_membersUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_members
     * 
    **/
    select?: chii_membersSelect | null
    /**
     * The data needed to update a chii_members.
     * 
    **/
    data: XOR<chii_membersUpdateInput, chii_membersUncheckedUpdateInput>
    /**
     * Choose, which chii_members to update.
     * 
    **/
    where: chii_membersWhereUniqueInput
  }


  /**
   * chii_members updateMany
   */
  export type chii_membersUpdateManyArgs = {
    /**
     * The data used to update chii_members.
     * 
    **/
    data: XOR<chii_membersUpdateManyMutationInput, chii_membersUncheckedUpdateManyInput>
    /**
     * Filter which chii_members to update
     * 
    **/
    where?: chii_membersWhereInput
  }


  /**
   * chii_members upsert
   */
  export type chii_membersUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_members
     * 
    **/
    select?: chii_membersSelect | null
    /**
     * The filter to search for the chii_members to update in case it exists.
     * 
    **/
    where: chii_membersWhereUniqueInput
    /**
     * In case the chii_members found by the `where` argument doesn't exist, create a new chii_members with this data.
     * 
    **/
    create: XOR<chii_membersCreateInput, chii_membersUncheckedCreateInput>
    /**
     * In case the chii_members was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_membersUpdateInput, chii_membersUncheckedUpdateInput>
  }


  /**
   * chii_members delete
   */
  export type chii_membersDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_members
     * 
    **/
    select?: chii_membersSelect | null
    /**
     * Filter which chii_members to delete.
     * 
    **/
    where: chii_membersWhereUniqueInput
  }


  /**
   * chii_members deleteMany
   */
  export type chii_membersDeleteManyArgs = {
    /**
     * Filter which chii_members to delete
     * 
    **/
    where?: chii_membersWhereInput
  }


  /**
   * chii_members without action
   */
  export type chii_membersArgs = {
    /**
     * Select specific fields to fetch from the chii_members
     * 
    **/
    select?: chii_membersSelect | null
  }



  /**
   * Model chii_oauth_access_tokens
   */


  export type AggregateChii_oauth_access_tokens = {
    _count: Chii_oauth_access_tokensCountAggregateOutputType | null
    _avg: Chii_oauth_access_tokensAvgAggregateOutputType | null
    _sum: Chii_oauth_access_tokensSumAggregateOutputType | null
    _min: Chii_oauth_access_tokensMinAggregateOutputType | null
    _max: Chii_oauth_access_tokensMaxAggregateOutputType | null
  }

  export type Chii_oauth_access_tokensAvgAggregateOutputType = {
    id: number | null
  }

  export type Chii_oauth_access_tokensSumAggregateOutputType = {
    id: number | null
  }

  export type Chii_oauth_access_tokensMinAggregateOutputType = {
    id: number | null
    type: boolean | null
    access_token: string | null
    client_id: string | null
    user_id: string | null
    expires: Date | null
    scope: string | null
    info: string | null
  }

  export type Chii_oauth_access_tokensMaxAggregateOutputType = {
    id: number | null
    type: boolean | null
    access_token: string | null
    client_id: string | null
    user_id: string | null
    expires: Date | null
    scope: string | null
    info: string | null
  }

  export type Chii_oauth_access_tokensCountAggregateOutputType = {
    id: number
    type: number
    access_token: number
    client_id: number
    user_id: number
    expires: number
    scope: number
    info: number
    _all: number
  }


  export type Chii_oauth_access_tokensAvgAggregateInputType = {
    id?: true
  }

  export type Chii_oauth_access_tokensSumAggregateInputType = {
    id?: true
  }

  export type Chii_oauth_access_tokensMinAggregateInputType = {
    id?: true
    type?: true
    access_token?: true
    client_id?: true
    user_id?: true
    expires?: true
    scope?: true
    info?: true
  }

  export type Chii_oauth_access_tokensMaxAggregateInputType = {
    id?: true
    type?: true
    access_token?: true
    client_id?: true
    user_id?: true
    expires?: true
    scope?: true
    info?: true
  }

  export type Chii_oauth_access_tokensCountAggregateInputType = {
    id?: true
    type?: true
    access_token?: true
    client_id?: true
    user_id?: true
    expires?: true
    scope?: true
    info?: true
    _all?: true
  }

  export type Chii_oauth_access_tokensAggregateArgs = {
    /**
     * Filter which chii_oauth_access_tokens to aggregate.
     * 
    **/
    where?: chii_oauth_access_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_oauth_access_tokens to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_oauth_access_tokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_oauth_access_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_oauth_access_tokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_oauth_access_tokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_oauth_access_tokens
    **/
    _count?: true | Chii_oauth_access_tokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_oauth_access_tokensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_oauth_access_tokensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_oauth_access_tokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_oauth_access_tokensMaxAggregateInputType
  }

  export type GetChii_oauth_access_tokensAggregateType<T extends Chii_oauth_access_tokensAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_oauth_access_tokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_oauth_access_tokens[P]>
      : GetScalarType<T[P], AggregateChii_oauth_access_tokens[P]>
  }




  export type Chii_oauth_access_tokensGroupByArgs = {
    where?: chii_oauth_access_tokensWhereInput
    orderBy?: Enumerable<chii_oauth_access_tokensOrderByWithAggregationInput>
    by: Array<Chii_oauth_access_tokensScalarFieldEnum>
    having?: chii_oauth_access_tokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_oauth_access_tokensCountAggregateInputType | true
    _avg?: Chii_oauth_access_tokensAvgAggregateInputType
    _sum?: Chii_oauth_access_tokensSumAggregateInputType
    _min?: Chii_oauth_access_tokensMinAggregateInputType
    _max?: Chii_oauth_access_tokensMaxAggregateInputType
  }


  export type Chii_oauth_access_tokensGroupByOutputType = {
    id: number
    type: boolean
    access_token: string
    client_id: string
    user_id: string | null
    expires: Date
    scope: string | null
    info: string
    _count: Chii_oauth_access_tokensCountAggregateOutputType | null
    _avg: Chii_oauth_access_tokensAvgAggregateOutputType | null
    _sum: Chii_oauth_access_tokensSumAggregateOutputType | null
    _min: Chii_oauth_access_tokensMinAggregateOutputType | null
    _max: Chii_oauth_access_tokensMaxAggregateOutputType | null
  }

  type GetChii_oauth_access_tokensGroupByPayload<T extends Chii_oauth_access_tokensGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_oauth_access_tokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_oauth_access_tokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_oauth_access_tokensGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_oauth_access_tokensGroupByOutputType[P]>
        }
      >
    >


  export type chii_oauth_access_tokensSelect = {
    id?: boolean
    type?: boolean
    access_token?: boolean
    client_id?: boolean
    user_id?: boolean
    expires?: boolean
    scope?: boolean
    info?: boolean
  }


  export type chii_oauth_access_tokensGetPayload<S extends boolean | null | undefined | chii_oauth_access_tokensArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_oauth_access_tokens :
    S extends undefined ? never :
    S extends { include: any } & (chii_oauth_access_tokensArgs | chii_oauth_access_tokensFindManyArgs)
    ? chii_oauth_access_tokens 
    : S extends { select: any } & (chii_oauth_access_tokensArgs | chii_oauth_access_tokensFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_oauth_access_tokens ? chii_oauth_access_tokens[P] : never
  } 
      : chii_oauth_access_tokens


  type chii_oauth_access_tokensCountArgs = Merge<
    Omit<chii_oauth_access_tokensFindManyArgs, 'select' | 'include'> & {
      select?: Chii_oauth_access_tokensCountAggregateInputType | true
    }
  >

  export interface chii_oauth_access_tokensDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_oauth_access_tokens that matches the filter.
     * @param {chii_oauth_access_tokensFindUniqueArgs} args - Arguments to find a Chii_oauth_access_tokens
     * @example
     * // Get one Chii_oauth_access_tokens
     * const chii_oauth_access_tokens = await prisma.chii_oauth_access_tokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_oauth_access_tokensFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_oauth_access_tokensFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_oauth_access_tokens'> extends True ? Prisma__chii_oauth_access_tokensClient<chii_oauth_access_tokensGetPayload<T>> : Prisma__chii_oauth_access_tokensClient<chii_oauth_access_tokensGetPayload<T> | null, null>

    /**
     * Find one Chii_oauth_access_tokens that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_oauth_access_tokensFindUniqueOrThrowArgs} args - Arguments to find a Chii_oauth_access_tokens
     * @example
     * // Get one Chii_oauth_access_tokens
     * const chii_oauth_access_tokens = await prisma.chii_oauth_access_tokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_oauth_access_tokensFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_oauth_access_tokensFindUniqueOrThrowArgs>
    ): Prisma__chii_oauth_access_tokensClient<chii_oauth_access_tokensGetPayload<T>>

    /**
     * Find the first Chii_oauth_access_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_oauth_access_tokensFindFirstArgs} args - Arguments to find a Chii_oauth_access_tokens
     * @example
     * // Get one Chii_oauth_access_tokens
     * const chii_oauth_access_tokens = await prisma.chii_oauth_access_tokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_oauth_access_tokensFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_oauth_access_tokensFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_oauth_access_tokens'> extends True ? Prisma__chii_oauth_access_tokensClient<chii_oauth_access_tokensGetPayload<T>> : Prisma__chii_oauth_access_tokensClient<chii_oauth_access_tokensGetPayload<T> | null, null>

    /**
     * Find the first Chii_oauth_access_tokens that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_oauth_access_tokensFindFirstOrThrowArgs} args - Arguments to find a Chii_oauth_access_tokens
     * @example
     * // Get one Chii_oauth_access_tokens
     * const chii_oauth_access_tokens = await prisma.chii_oauth_access_tokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_oauth_access_tokensFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_oauth_access_tokensFindFirstOrThrowArgs>
    ): Prisma__chii_oauth_access_tokensClient<chii_oauth_access_tokensGetPayload<T>>

    /**
     * Find zero or more Chii_oauth_access_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_oauth_access_tokensFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_oauth_access_tokens
     * const chii_oauth_access_tokens = await prisma.chii_oauth_access_tokens.findMany()
     * 
     * // Get first 10 Chii_oauth_access_tokens
     * const chii_oauth_access_tokens = await prisma.chii_oauth_access_tokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chii_oauth_access_tokensWithIdOnly = await prisma.chii_oauth_access_tokens.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends chii_oauth_access_tokensFindManyArgs>(
      args?: SelectSubset<T, chii_oauth_access_tokensFindManyArgs>
    ): PrismaPromise<Array<chii_oauth_access_tokensGetPayload<T>>>

    /**
     * Create a Chii_oauth_access_tokens.
     * @param {chii_oauth_access_tokensCreateArgs} args - Arguments to create a Chii_oauth_access_tokens.
     * @example
     * // Create one Chii_oauth_access_tokens
     * const Chii_oauth_access_tokens = await prisma.chii_oauth_access_tokens.create({
     *   data: {
     *     // ... data to create a Chii_oauth_access_tokens
     *   }
     * })
     * 
    **/
    create<T extends chii_oauth_access_tokensCreateArgs>(
      args: SelectSubset<T, chii_oauth_access_tokensCreateArgs>
    ): Prisma__chii_oauth_access_tokensClient<chii_oauth_access_tokensGetPayload<T>>

    /**
     * Create many Chii_oauth_access_tokens.
     *     @param {chii_oauth_access_tokensCreateManyArgs} args - Arguments to create many Chii_oauth_access_tokens.
     *     @example
     *     // Create many Chii_oauth_access_tokens
     *     const chii_oauth_access_tokens = await prisma.chii_oauth_access_tokens.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_oauth_access_tokensCreateManyArgs>(
      args?: SelectSubset<T, chii_oauth_access_tokensCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_oauth_access_tokens.
     * @param {chii_oauth_access_tokensDeleteArgs} args - Arguments to delete one Chii_oauth_access_tokens.
     * @example
     * // Delete one Chii_oauth_access_tokens
     * const Chii_oauth_access_tokens = await prisma.chii_oauth_access_tokens.delete({
     *   where: {
     *     // ... filter to delete one Chii_oauth_access_tokens
     *   }
     * })
     * 
    **/
    delete<T extends chii_oauth_access_tokensDeleteArgs>(
      args: SelectSubset<T, chii_oauth_access_tokensDeleteArgs>
    ): Prisma__chii_oauth_access_tokensClient<chii_oauth_access_tokensGetPayload<T>>

    /**
     * Update one Chii_oauth_access_tokens.
     * @param {chii_oauth_access_tokensUpdateArgs} args - Arguments to update one Chii_oauth_access_tokens.
     * @example
     * // Update one Chii_oauth_access_tokens
     * const chii_oauth_access_tokens = await prisma.chii_oauth_access_tokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_oauth_access_tokensUpdateArgs>(
      args: SelectSubset<T, chii_oauth_access_tokensUpdateArgs>
    ): Prisma__chii_oauth_access_tokensClient<chii_oauth_access_tokensGetPayload<T>>

    /**
     * Delete zero or more Chii_oauth_access_tokens.
     * @param {chii_oauth_access_tokensDeleteManyArgs} args - Arguments to filter Chii_oauth_access_tokens to delete.
     * @example
     * // Delete a few Chii_oauth_access_tokens
     * const { count } = await prisma.chii_oauth_access_tokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_oauth_access_tokensDeleteManyArgs>(
      args?: SelectSubset<T, chii_oauth_access_tokensDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_oauth_access_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_oauth_access_tokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_oauth_access_tokens
     * const chii_oauth_access_tokens = await prisma.chii_oauth_access_tokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_oauth_access_tokensUpdateManyArgs>(
      args: SelectSubset<T, chii_oauth_access_tokensUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_oauth_access_tokens.
     * @param {chii_oauth_access_tokensUpsertArgs} args - Arguments to update or create a Chii_oauth_access_tokens.
     * @example
     * // Update or create a Chii_oauth_access_tokens
     * const chii_oauth_access_tokens = await prisma.chii_oauth_access_tokens.upsert({
     *   create: {
     *     // ... data to create a Chii_oauth_access_tokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_oauth_access_tokens we want to update
     *   }
     * })
    **/
    upsert<T extends chii_oauth_access_tokensUpsertArgs>(
      args: SelectSubset<T, chii_oauth_access_tokensUpsertArgs>
    ): Prisma__chii_oauth_access_tokensClient<chii_oauth_access_tokensGetPayload<T>>

    /**
     * Count the number of Chii_oauth_access_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_oauth_access_tokensCountArgs} args - Arguments to filter Chii_oauth_access_tokens to count.
     * @example
     * // Count the number of Chii_oauth_access_tokens
     * const count = await prisma.chii_oauth_access_tokens.count({
     *   where: {
     *     // ... the filter for the Chii_oauth_access_tokens we want to count
     *   }
     * })
    **/
    count<T extends chii_oauth_access_tokensCountArgs>(
      args?: Subset<T, chii_oauth_access_tokensCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_oauth_access_tokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_oauth_access_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_oauth_access_tokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_oauth_access_tokensAggregateArgs>(args: Subset<T, Chii_oauth_access_tokensAggregateArgs>): PrismaPromise<GetChii_oauth_access_tokensAggregateType<T>>

    /**
     * Group by Chii_oauth_access_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_oauth_access_tokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_oauth_access_tokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_oauth_access_tokensGroupByArgs['orderBy'] }
        : { orderBy?: Chii_oauth_access_tokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_oauth_access_tokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_oauth_access_tokensGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_oauth_access_tokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_oauth_access_tokensClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_oauth_access_tokens base type for findUnique actions
   */
  export type chii_oauth_access_tokensFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_oauth_access_tokens
     * 
    **/
    select?: chii_oauth_access_tokensSelect | null
    /**
     * Filter, which chii_oauth_access_tokens to fetch.
     * 
    **/
    where: chii_oauth_access_tokensWhereUniqueInput
  }

  /**
   * chii_oauth_access_tokens: findUnique
   */
  export interface chii_oauth_access_tokensFindUniqueArgs extends chii_oauth_access_tokensFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_oauth_access_tokens findUniqueOrThrow
   */
  export type chii_oauth_access_tokensFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_oauth_access_tokens
     * 
    **/
    select?: chii_oauth_access_tokensSelect | null
    /**
     * Filter, which chii_oauth_access_tokens to fetch.
     * 
    **/
    where: chii_oauth_access_tokensWhereUniqueInput
  }


  /**
   * chii_oauth_access_tokens base type for findFirst actions
   */
  export type chii_oauth_access_tokensFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_oauth_access_tokens
     * 
    **/
    select?: chii_oauth_access_tokensSelect | null
    /**
     * Filter, which chii_oauth_access_tokens to fetch.
     * 
    **/
    where?: chii_oauth_access_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_oauth_access_tokens to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_oauth_access_tokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_oauth_access_tokens.
     * 
    **/
    cursor?: chii_oauth_access_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_oauth_access_tokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_oauth_access_tokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_oauth_access_tokens.
     * 
    **/
    distinct?: Enumerable<Chii_oauth_access_tokensScalarFieldEnum>
  }

  /**
   * chii_oauth_access_tokens: findFirst
   */
  export interface chii_oauth_access_tokensFindFirstArgs extends chii_oauth_access_tokensFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_oauth_access_tokens findFirstOrThrow
   */
  export type chii_oauth_access_tokensFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_oauth_access_tokens
     * 
    **/
    select?: chii_oauth_access_tokensSelect | null
    /**
     * Filter, which chii_oauth_access_tokens to fetch.
     * 
    **/
    where?: chii_oauth_access_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_oauth_access_tokens to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_oauth_access_tokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_oauth_access_tokens.
     * 
    **/
    cursor?: chii_oauth_access_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_oauth_access_tokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_oauth_access_tokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_oauth_access_tokens.
     * 
    **/
    distinct?: Enumerable<Chii_oauth_access_tokensScalarFieldEnum>
  }


  /**
   * chii_oauth_access_tokens findMany
   */
  export type chii_oauth_access_tokensFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_oauth_access_tokens
     * 
    **/
    select?: chii_oauth_access_tokensSelect | null
    /**
     * Filter, which chii_oauth_access_tokens to fetch.
     * 
    **/
    where?: chii_oauth_access_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_oauth_access_tokens to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_oauth_access_tokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_oauth_access_tokens.
     * 
    **/
    cursor?: chii_oauth_access_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_oauth_access_tokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_oauth_access_tokens.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_oauth_access_tokensScalarFieldEnum>
  }


  /**
   * chii_oauth_access_tokens create
   */
  export type chii_oauth_access_tokensCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_oauth_access_tokens
     * 
    **/
    select?: chii_oauth_access_tokensSelect | null
    /**
     * The data needed to create a chii_oauth_access_tokens.
     * 
    **/
    data: XOR<chii_oauth_access_tokensCreateInput, chii_oauth_access_tokensUncheckedCreateInput>
  }


  /**
   * chii_oauth_access_tokens createMany
   */
  export type chii_oauth_access_tokensCreateManyArgs = {
    /**
     * The data used to create many chii_oauth_access_tokens.
     * 
    **/
    data: Enumerable<chii_oauth_access_tokensCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_oauth_access_tokens update
   */
  export type chii_oauth_access_tokensUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_oauth_access_tokens
     * 
    **/
    select?: chii_oauth_access_tokensSelect | null
    /**
     * The data needed to update a chii_oauth_access_tokens.
     * 
    **/
    data: XOR<chii_oauth_access_tokensUpdateInput, chii_oauth_access_tokensUncheckedUpdateInput>
    /**
     * Choose, which chii_oauth_access_tokens to update.
     * 
    **/
    where: chii_oauth_access_tokensWhereUniqueInput
  }


  /**
   * chii_oauth_access_tokens updateMany
   */
  export type chii_oauth_access_tokensUpdateManyArgs = {
    /**
     * The data used to update chii_oauth_access_tokens.
     * 
    **/
    data: XOR<chii_oauth_access_tokensUpdateManyMutationInput, chii_oauth_access_tokensUncheckedUpdateManyInput>
    /**
     * Filter which chii_oauth_access_tokens to update
     * 
    **/
    where?: chii_oauth_access_tokensWhereInput
  }


  /**
   * chii_oauth_access_tokens upsert
   */
  export type chii_oauth_access_tokensUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_oauth_access_tokens
     * 
    **/
    select?: chii_oauth_access_tokensSelect | null
    /**
     * The filter to search for the chii_oauth_access_tokens to update in case it exists.
     * 
    **/
    where: chii_oauth_access_tokensWhereUniqueInput
    /**
     * In case the chii_oauth_access_tokens found by the `where` argument doesn't exist, create a new chii_oauth_access_tokens with this data.
     * 
    **/
    create: XOR<chii_oauth_access_tokensCreateInput, chii_oauth_access_tokensUncheckedCreateInput>
    /**
     * In case the chii_oauth_access_tokens was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_oauth_access_tokensUpdateInput, chii_oauth_access_tokensUncheckedUpdateInput>
  }


  /**
   * chii_oauth_access_tokens delete
   */
  export type chii_oauth_access_tokensDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_oauth_access_tokens
     * 
    **/
    select?: chii_oauth_access_tokensSelect | null
    /**
     * Filter which chii_oauth_access_tokens to delete.
     * 
    **/
    where: chii_oauth_access_tokensWhereUniqueInput
  }


  /**
   * chii_oauth_access_tokens deleteMany
   */
  export type chii_oauth_access_tokensDeleteManyArgs = {
    /**
     * Filter which chii_oauth_access_tokens to delete
     * 
    **/
    where?: chii_oauth_access_tokensWhereInput
  }


  /**
   * chii_oauth_access_tokens without action
   */
  export type chii_oauth_access_tokensArgs = {
    /**
     * Select specific fields to fetch from the chii_oauth_access_tokens
     * 
    **/
    select?: chii_oauth_access_tokensSelect | null
  }



  /**
   * Model chii_oauth_clients
   */


  export type AggregateChii_oauth_clients = {
    _count: Chii_oauth_clientsCountAggregateOutputType | null
    _avg: Chii_oauth_clientsAvgAggregateOutputType | null
    _sum: Chii_oauth_clientsSumAggregateOutputType | null
    _min: Chii_oauth_clientsMinAggregateOutputType | null
    _max: Chii_oauth_clientsMaxAggregateOutputType | null
  }

  export type Chii_oauth_clientsAvgAggregateOutputType = {
    app_id: number | null
  }

  export type Chii_oauth_clientsSumAggregateOutputType = {
    app_id: number | null
  }

  export type Chii_oauth_clientsMinAggregateOutputType = {
    app_id: number | null
    client_id: string | null
    client_secret: string | null
    redirect_uri: string | null
    grant_types: string | null
    scope: string | null
    user_id: string | null
  }

  export type Chii_oauth_clientsMaxAggregateOutputType = {
    app_id: number | null
    client_id: string | null
    client_secret: string | null
    redirect_uri: string | null
    grant_types: string | null
    scope: string | null
    user_id: string | null
  }

  export type Chii_oauth_clientsCountAggregateOutputType = {
    app_id: number
    client_id: number
    client_secret: number
    redirect_uri: number
    grant_types: number
    scope: number
    user_id: number
    _all: number
  }


  export type Chii_oauth_clientsAvgAggregateInputType = {
    app_id?: true
  }

  export type Chii_oauth_clientsSumAggregateInputType = {
    app_id?: true
  }

  export type Chii_oauth_clientsMinAggregateInputType = {
    app_id?: true
    client_id?: true
    client_secret?: true
    redirect_uri?: true
    grant_types?: true
    scope?: true
    user_id?: true
  }

  export type Chii_oauth_clientsMaxAggregateInputType = {
    app_id?: true
    client_id?: true
    client_secret?: true
    redirect_uri?: true
    grant_types?: true
    scope?: true
    user_id?: true
  }

  export type Chii_oauth_clientsCountAggregateInputType = {
    app_id?: true
    client_id?: true
    client_secret?: true
    redirect_uri?: true
    grant_types?: true
    scope?: true
    user_id?: true
    _all?: true
  }

  export type Chii_oauth_clientsAggregateArgs = {
    /**
     * Filter which chii_oauth_clients to aggregate.
     * 
    **/
    where?: chii_oauth_clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_oauth_clients to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_oauth_clientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_oauth_clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_oauth_clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_oauth_clients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_oauth_clients
    **/
    _count?: true | Chii_oauth_clientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_oauth_clientsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_oauth_clientsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_oauth_clientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_oauth_clientsMaxAggregateInputType
  }

  export type GetChii_oauth_clientsAggregateType<T extends Chii_oauth_clientsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_oauth_clients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_oauth_clients[P]>
      : GetScalarType<T[P], AggregateChii_oauth_clients[P]>
  }




  export type Chii_oauth_clientsGroupByArgs = {
    where?: chii_oauth_clientsWhereInput
    orderBy?: Enumerable<chii_oauth_clientsOrderByWithAggregationInput>
    by: Array<Chii_oauth_clientsScalarFieldEnum>
    having?: chii_oauth_clientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_oauth_clientsCountAggregateInputType | true
    _avg?: Chii_oauth_clientsAvgAggregateInputType
    _sum?: Chii_oauth_clientsSumAggregateInputType
    _min?: Chii_oauth_clientsMinAggregateInputType
    _max?: Chii_oauth_clientsMaxAggregateInputType
  }


  export type Chii_oauth_clientsGroupByOutputType = {
    app_id: number
    client_id: string
    client_secret: string | null
    redirect_uri: string | null
    grant_types: string | null
    scope: string | null
    user_id: string | null
    _count: Chii_oauth_clientsCountAggregateOutputType | null
    _avg: Chii_oauth_clientsAvgAggregateOutputType | null
    _sum: Chii_oauth_clientsSumAggregateOutputType | null
    _min: Chii_oauth_clientsMinAggregateOutputType | null
    _max: Chii_oauth_clientsMaxAggregateOutputType | null
  }

  type GetChii_oauth_clientsGroupByPayload<T extends Chii_oauth_clientsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_oauth_clientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_oauth_clientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_oauth_clientsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_oauth_clientsGroupByOutputType[P]>
        }
      >
    >


  export type chii_oauth_clientsSelect = {
    app_id?: boolean
    client_id?: boolean
    client_secret?: boolean
    redirect_uri?: boolean
    grant_types?: boolean
    scope?: boolean
    user_id?: boolean
  }


  export type chii_oauth_clientsGetPayload<S extends boolean | null | undefined | chii_oauth_clientsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_oauth_clients :
    S extends undefined ? never :
    S extends { include: any } & (chii_oauth_clientsArgs | chii_oauth_clientsFindManyArgs)
    ? chii_oauth_clients 
    : S extends { select: any } & (chii_oauth_clientsArgs | chii_oauth_clientsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_oauth_clients ? chii_oauth_clients[P] : never
  } 
      : chii_oauth_clients


  type chii_oauth_clientsCountArgs = Merge<
    Omit<chii_oauth_clientsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_oauth_clientsCountAggregateInputType | true
    }
  >

  export interface chii_oauth_clientsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_oauth_clients that matches the filter.
     * @param {chii_oauth_clientsFindUniqueArgs} args - Arguments to find a Chii_oauth_clients
     * @example
     * // Get one Chii_oauth_clients
     * const chii_oauth_clients = await prisma.chii_oauth_clients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_oauth_clientsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_oauth_clientsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_oauth_clients'> extends True ? Prisma__chii_oauth_clientsClient<chii_oauth_clientsGetPayload<T>> : Prisma__chii_oauth_clientsClient<chii_oauth_clientsGetPayload<T> | null, null>

    /**
     * Find one Chii_oauth_clients that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_oauth_clientsFindUniqueOrThrowArgs} args - Arguments to find a Chii_oauth_clients
     * @example
     * // Get one Chii_oauth_clients
     * const chii_oauth_clients = await prisma.chii_oauth_clients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_oauth_clientsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_oauth_clientsFindUniqueOrThrowArgs>
    ): Prisma__chii_oauth_clientsClient<chii_oauth_clientsGetPayload<T>>

    /**
     * Find the first Chii_oauth_clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_oauth_clientsFindFirstArgs} args - Arguments to find a Chii_oauth_clients
     * @example
     * // Get one Chii_oauth_clients
     * const chii_oauth_clients = await prisma.chii_oauth_clients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_oauth_clientsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_oauth_clientsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_oauth_clients'> extends True ? Prisma__chii_oauth_clientsClient<chii_oauth_clientsGetPayload<T>> : Prisma__chii_oauth_clientsClient<chii_oauth_clientsGetPayload<T> | null, null>

    /**
     * Find the first Chii_oauth_clients that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_oauth_clientsFindFirstOrThrowArgs} args - Arguments to find a Chii_oauth_clients
     * @example
     * // Get one Chii_oauth_clients
     * const chii_oauth_clients = await prisma.chii_oauth_clients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_oauth_clientsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_oauth_clientsFindFirstOrThrowArgs>
    ): Prisma__chii_oauth_clientsClient<chii_oauth_clientsGetPayload<T>>

    /**
     * Find zero or more Chii_oauth_clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_oauth_clientsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_oauth_clients
     * const chii_oauth_clients = await prisma.chii_oauth_clients.findMany()
     * 
     * // Get first 10 Chii_oauth_clients
     * const chii_oauth_clients = await prisma.chii_oauth_clients.findMany({ take: 10 })
     * 
     * // Only select the `app_id`
     * const chii_oauth_clientsWithApp_idOnly = await prisma.chii_oauth_clients.findMany({ select: { app_id: true } })
     * 
    **/
    findMany<T extends chii_oauth_clientsFindManyArgs>(
      args?: SelectSubset<T, chii_oauth_clientsFindManyArgs>
    ): PrismaPromise<Array<chii_oauth_clientsGetPayload<T>>>

    /**
     * Create a Chii_oauth_clients.
     * @param {chii_oauth_clientsCreateArgs} args - Arguments to create a Chii_oauth_clients.
     * @example
     * // Create one Chii_oauth_clients
     * const Chii_oauth_clients = await prisma.chii_oauth_clients.create({
     *   data: {
     *     // ... data to create a Chii_oauth_clients
     *   }
     * })
     * 
    **/
    create<T extends chii_oauth_clientsCreateArgs>(
      args: SelectSubset<T, chii_oauth_clientsCreateArgs>
    ): Prisma__chii_oauth_clientsClient<chii_oauth_clientsGetPayload<T>>

    /**
     * Create many Chii_oauth_clients.
     *     @param {chii_oauth_clientsCreateManyArgs} args - Arguments to create many Chii_oauth_clients.
     *     @example
     *     // Create many Chii_oauth_clients
     *     const chii_oauth_clients = await prisma.chii_oauth_clients.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_oauth_clientsCreateManyArgs>(
      args?: SelectSubset<T, chii_oauth_clientsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_oauth_clients.
     * @param {chii_oauth_clientsDeleteArgs} args - Arguments to delete one Chii_oauth_clients.
     * @example
     * // Delete one Chii_oauth_clients
     * const Chii_oauth_clients = await prisma.chii_oauth_clients.delete({
     *   where: {
     *     // ... filter to delete one Chii_oauth_clients
     *   }
     * })
     * 
    **/
    delete<T extends chii_oauth_clientsDeleteArgs>(
      args: SelectSubset<T, chii_oauth_clientsDeleteArgs>
    ): Prisma__chii_oauth_clientsClient<chii_oauth_clientsGetPayload<T>>

    /**
     * Update one Chii_oauth_clients.
     * @param {chii_oauth_clientsUpdateArgs} args - Arguments to update one Chii_oauth_clients.
     * @example
     * // Update one Chii_oauth_clients
     * const chii_oauth_clients = await prisma.chii_oauth_clients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_oauth_clientsUpdateArgs>(
      args: SelectSubset<T, chii_oauth_clientsUpdateArgs>
    ): Prisma__chii_oauth_clientsClient<chii_oauth_clientsGetPayload<T>>

    /**
     * Delete zero or more Chii_oauth_clients.
     * @param {chii_oauth_clientsDeleteManyArgs} args - Arguments to filter Chii_oauth_clients to delete.
     * @example
     * // Delete a few Chii_oauth_clients
     * const { count } = await prisma.chii_oauth_clients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_oauth_clientsDeleteManyArgs>(
      args?: SelectSubset<T, chii_oauth_clientsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_oauth_clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_oauth_clientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_oauth_clients
     * const chii_oauth_clients = await prisma.chii_oauth_clients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_oauth_clientsUpdateManyArgs>(
      args: SelectSubset<T, chii_oauth_clientsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_oauth_clients.
     * @param {chii_oauth_clientsUpsertArgs} args - Arguments to update or create a Chii_oauth_clients.
     * @example
     * // Update or create a Chii_oauth_clients
     * const chii_oauth_clients = await prisma.chii_oauth_clients.upsert({
     *   create: {
     *     // ... data to create a Chii_oauth_clients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_oauth_clients we want to update
     *   }
     * })
    **/
    upsert<T extends chii_oauth_clientsUpsertArgs>(
      args: SelectSubset<T, chii_oauth_clientsUpsertArgs>
    ): Prisma__chii_oauth_clientsClient<chii_oauth_clientsGetPayload<T>>

    /**
     * Count the number of Chii_oauth_clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_oauth_clientsCountArgs} args - Arguments to filter Chii_oauth_clients to count.
     * @example
     * // Count the number of Chii_oauth_clients
     * const count = await prisma.chii_oauth_clients.count({
     *   where: {
     *     // ... the filter for the Chii_oauth_clients we want to count
     *   }
     * })
    **/
    count<T extends chii_oauth_clientsCountArgs>(
      args?: Subset<T, chii_oauth_clientsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_oauth_clientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_oauth_clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_oauth_clientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_oauth_clientsAggregateArgs>(args: Subset<T, Chii_oauth_clientsAggregateArgs>): PrismaPromise<GetChii_oauth_clientsAggregateType<T>>

    /**
     * Group by Chii_oauth_clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_oauth_clientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_oauth_clientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_oauth_clientsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_oauth_clientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_oauth_clientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_oauth_clientsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_oauth_clients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_oauth_clientsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_oauth_clients base type for findUnique actions
   */
  export type chii_oauth_clientsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_oauth_clients
     * 
    **/
    select?: chii_oauth_clientsSelect | null
    /**
     * Filter, which chii_oauth_clients to fetch.
     * 
    **/
    where: chii_oauth_clientsWhereUniqueInput
  }

  /**
   * chii_oauth_clients: findUnique
   */
  export interface chii_oauth_clientsFindUniqueArgs extends chii_oauth_clientsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_oauth_clients findUniqueOrThrow
   */
  export type chii_oauth_clientsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_oauth_clients
     * 
    **/
    select?: chii_oauth_clientsSelect | null
    /**
     * Filter, which chii_oauth_clients to fetch.
     * 
    **/
    where: chii_oauth_clientsWhereUniqueInput
  }


  /**
   * chii_oauth_clients base type for findFirst actions
   */
  export type chii_oauth_clientsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_oauth_clients
     * 
    **/
    select?: chii_oauth_clientsSelect | null
    /**
     * Filter, which chii_oauth_clients to fetch.
     * 
    **/
    where?: chii_oauth_clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_oauth_clients to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_oauth_clientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_oauth_clients.
     * 
    **/
    cursor?: chii_oauth_clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_oauth_clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_oauth_clients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_oauth_clients.
     * 
    **/
    distinct?: Enumerable<Chii_oauth_clientsScalarFieldEnum>
  }

  /**
   * chii_oauth_clients: findFirst
   */
  export interface chii_oauth_clientsFindFirstArgs extends chii_oauth_clientsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_oauth_clients findFirstOrThrow
   */
  export type chii_oauth_clientsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_oauth_clients
     * 
    **/
    select?: chii_oauth_clientsSelect | null
    /**
     * Filter, which chii_oauth_clients to fetch.
     * 
    **/
    where?: chii_oauth_clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_oauth_clients to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_oauth_clientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_oauth_clients.
     * 
    **/
    cursor?: chii_oauth_clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_oauth_clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_oauth_clients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_oauth_clients.
     * 
    **/
    distinct?: Enumerable<Chii_oauth_clientsScalarFieldEnum>
  }


  /**
   * chii_oauth_clients findMany
   */
  export type chii_oauth_clientsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_oauth_clients
     * 
    **/
    select?: chii_oauth_clientsSelect | null
    /**
     * Filter, which chii_oauth_clients to fetch.
     * 
    **/
    where?: chii_oauth_clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_oauth_clients to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_oauth_clientsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_oauth_clients.
     * 
    **/
    cursor?: chii_oauth_clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_oauth_clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_oauth_clients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_oauth_clientsScalarFieldEnum>
  }


  /**
   * chii_oauth_clients create
   */
  export type chii_oauth_clientsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_oauth_clients
     * 
    **/
    select?: chii_oauth_clientsSelect | null
    /**
     * The data needed to create a chii_oauth_clients.
     * 
    **/
    data: XOR<chii_oauth_clientsCreateInput, chii_oauth_clientsUncheckedCreateInput>
  }


  /**
   * chii_oauth_clients createMany
   */
  export type chii_oauth_clientsCreateManyArgs = {
    /**
     * The data used to create many chii_oauth_clients.
     * 
    **/
    data: Enumerable<chii_oauth_clientsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_oauth_clients update
   */
  export type chii_oauth_clientsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_oauth_clients
     * 
    **/
    select?: chii_oauth_clientsSelect | null
    /**
     * The data needed to update a chii_oauth_clients.
     * 
    **/
    data: XOR<chii_oauth_clientsUpdateInput, chii_oauth_clientsUncheckedUpdateInput>
    /**
     * Choose, which chii_oauth_clients to update.
     * 
    **/
    where: chii_oauth_clientsWhereUniqueInput
  }


  /**
   * chii_oauth_clients updateMany
   */
  export type chii_oauth_clientsUpdateManyArgs = {
    /**
     * The data used to update chii_oauth_clients.
     * 
    **/
    data: XOR<chii_oauth_clientsUpdateManyMutationInput, chii_oauth_clientsUncheckedUpdateManyInput>
    /**
     * Filter which chii_oauth_clients to update
     * 
    **/
    where?: chii_oauth_clientsWhereInput
  }


  /**
   * chii_oauth_clients upsert
   */
  export type chii_oauth_clientsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_oauth_clients
     * 
    **/
    select?: chii_oauth_clientsSelect | null
    /**
     * The filter to search for the chii_oauth_clients to update in case it exists.
     * 
    **/
    where: chii_oauth_clientsWhereUniqueInput
    /**
     * In case the chii_oauth_clients found by the `where` argument doesn't exist, create a new chii_oauth_clients with this data.
     * 
    **/
    create: XOR<chii_oauth_clientsCreateInput, chii_oauth_clientsUncheckedCreateInput>
    /**
     * In case the chii_oauth_clients was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_oauth_clientsUpdateInput, chii_oauth_clientsUncheckedUpdateInput>
  }


  /**
   * chii_oauth_clients delete
   */
  export type chii_oauth_clientsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_oauth_clients
     * 
    **/
    select?: chii_oauth_clientsSelect | null
    /**
     * Filter which chii_oauth_clients to delete.
     * 
    **/
    where: chii_oauth_clientsWhereUniqueInput
  }


  /**
   * chii_oauth_clients deleteMany
   */
  export type chii_oauth_clientsDeleteManyArgs = {
    /**
     * Filter which chii_oauth_clients to delete
     * 
    **/
    where?: chii_oauth_clientsWhereInput
  }


  /**
   * chii_oauth_clients without action
   */
  export type chii_oauth_clientsArgs = {
    /**
     * Select specific fields to fetch from the chii_oauth_clients
     * 
    **/
    select?: chii_oauth_clientsSelect | null
  }



  /**
   * Model chii_os_web_sessions
   */


  export type AggregateChii_os_web_sessions = {
    _count: Chii_os_web_sessionsCountAggregateOutputType | null
    _avg: Chii_os_web_sessionsAvgAggregateOutputType | null
    _sum: Chii_os_web_sessionsSumAggregateOutputType | null
    _min: Chii_os_web_sessionsMinAggregateOutputType | null
    _max: Chii_os_web_sessionsMaxAggregateOutputType | null
  }

  export type Chii_os_web_sessionsAvgAggregateOutputType = {
    user_id: number | null
    created_at: number | null
    expired_at: number | null
  }

  export type Chii_os_web_sessionsSumAggregateOutputType = {
    user_id: number | null
    created_at: bigint | null
    expired_at: bigint | null
  }

  export type Chii_os_web_sessionsMinAggregateOutputType = {
    key: string | null
    user_id: number | null
    value: Buffer | null
    created_at: bigint | null
    expired_at: bigint | null
  }

  export type Chii_os_web_sessionsMaxAggregateOutputType = {
    key: string | null
    user_id: number | null
    value: Buffer | null
    created_at: bigint | null
    expired_at: bigint | null
  }

  export type Chii_os_web_sessionsCountAggregateOutputType = {
    key: number
    user_id: number
    value: number
    created_at: number
    expired_at: number
    _all: number
  }


  export type Chii_os_web_sessionsAvgAggregateInputType = {
    user_id?: true
    created_at?: true
    expired_at?: true
  }

  export type Chii_os_web_sessionsSumAggregateInputType = {
    user_id?: true
    created_at?: true
    expired_at?: true
  }

  export type Chii_os_web_sessionsMinAggregateInputType = {
    key?: true
    user_id?: true
    value?: true
    created_at?: true
    expired_at?: true
  }

  export type Chii_os_web_sessionsMaxAggregateInputType = {
    key?: true
    user_id?: true
    value?: true
    created_at?: true
    expired_at?: true
  }

  export type Chii_os_web_sessionsCountAggregateInputType = {
    key?: true
    user_id?: true
    value?: true
    created_at?: true
    expired_at?: true
    _all?: true
  }

  export type Chii_os_web_sessionsAggregateArgs = {
    /**
     * Filter which chii_os_web_sessions to aggregate.
     * 
    **/
    where?: chii_os_web_sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_os_web_sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_os_web_sessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_os_web_sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_os_web_sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_os_web_sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_os_web_sessions
    **/
    _count?: true | Chii_os_web_sessionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_os_web_sessionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_os_web_sessionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_os_web_sessionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_os_web_sessionsMaxAggregateInputType
  }

  export type GetChii_os_web_sessionsAggregateType<T extends Chii_os_web_sessionsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_os_web_sessions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_os_web_sessions[P]>
      : GetScalarType<T[P], AggregateChii_os_web_sessions[P]>
  }




  export type Chii_os_web_sessionsGroupByArgs = {
    where?: chii_os_web_sessionsWhereInput
    orderBy?: Enumerable<chii_os_web_sessionsOrderByWithAggregationInput>
    by: Array<Chii_os_web_sessionsScalarFieldEnum>
    having?: chii_os_web_sessionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_os_web_sessionsCountAggregateInputType | true
    _avg?: Chii_os_web_sessionsAvgAggregateInputType
    _sum?: Chii_os_web_sessionsSumAggregateInputType
    _min?: Chii_os_web_sessionsMinAggregateInputType
    _max?: Chii_os_web_sessionsMaxAggregateInputType
  }


  export type Chii_os_web_sessionsGroupByOutputType = {
    key: string
    user_id: number
    value: Buffer
    created_at: bigint
    expired_at: bigint
    _count: Chii_os_web_sessionsCountAggregateOutputType | null
    _avg: Chii_os_web_sessionsAvgAggregateOutputType | null
    _sum: Chii_os_web_sessionsSumAggregateOutputType | null
    _min: Chii_os_web_sessionsMinAggregateOutputType | null
    _max: Chii_os_web_sessionsMaxAggregateOutputType | null
  }

  type GetChii_os_web_sessionsGroupByPayload<T extends Chii_os_web_sessionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_os_web_sessionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_os_web_sessionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_os_web_sessionsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_os_web_sessionsGroupByOutputType[P]>
        }
      >
    >


  export type chii_os_web_sessionsSelect = {
    key?: boolean
    user_id?: boolean
    value?: boolean
    created_at?: boolean
    expired_at?: boolean
  }


  export type chii_os_web_sessionsGetPayload<S extends boolean | null | undefined | chii_os_web_sessionsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_os_web_sessions :
    S extends undefined ? never :
    S extends { include: any } & (chii_os_web_sessionsArgs | chii_os_web_sessionsFindManyArgs)
    ? chii_os_web_sessions 
    : S extends { select: any } & (chii_os_web_sessionsArgs | chii_os_web_sessionsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_os_web_sessions ? chii_os_web_sessions[P] : never
  } 
      : chii_os_web_sessions


  type chii_os_web_sessionsCountArgs = Merge<
    Omit<chii_os_web_sessionsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_os_web_sessionsCountAggregateInputType | true
    }
  >

  export interface chii_os_web_sessionsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_os_web_sessions that matches the filter.
     * @param {chii_os_web_sessionsFindUniqueArgs} args - Arguments to find a Chii_os_web_sessions
     * @example
     * // Get one Chii_os_web_sessions
     * const chii_os_web_sessions = await prisma.chii_os_web_sessions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_os_web_sessionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_os_web_sessionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_os_web_sessions'> extends True ? Prisma__chii_os_web_sessionsClient<chii_os_web_sessionsGetPayload<T>> : Prisma__chii_os_web_sessionsClient<chii_os_web_sessionsGetPayload<T> | null, null>

    /**
     * Find one Chii_os_web_sessions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_os_web_sessionsFindUniqueOrThrowArgs} args - Arguments to find a Chii_os_web_sessions
     * @example
     * // Get one Chii_os_web_sessions
     * const chii_os_web_sessions = await prisma.chii_os_web_sessions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_os_web_sessionsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_os_web_sessionsFindUniqueOrThrowArgs>
    ): Prisma__chii_os_web_sessionsClient<chii_os_web_sessionsGetPayload<T>>

    /**
     * Find the first Chii_os_web_sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_os_web_sessionsFindFirstArgs} args - Arguments to find a Chii_os_web_sessions
     * @example
     * // Get one Chii_os_web_sessions
     * const chii_os_web_sessions = await prisma.chii_os_web_sessions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_os_web_sessionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_os_web_sessionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_os_web_sessions'> extends True ? Prisma__chii_os_web_sessionsClient<chii_os_web_sessionsGetPayload<T>> : Prisma__chii_os_web_sessionsClient<chii_os_web_sessionsGetPayload<T> | null, null>

    /**
     * Find the first Chii_os_web_sessions that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_os_web_sessionsFindFirstOrThrowArgs} args - Arguments to find a Chii_os_web_sessions
     * @example
     * // Get one Chii_os_web_sessions
     * const chii_os_web_sessions = await prisma.chii_os_web_sessions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_os_web_sessionsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_os_web_sessionsFindFirstOrThrowArgs>
    ): Prisma__chii_os_web_sessionsClient<chii_os_web_sessionsGetPayload<T>>

    /**
     * Find zero or more Chii_os_web_sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_os_web_sessionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_os_web_sessions
     * const chii_os_web_sessions = await prisma.chii_os_web_sessions.findMany()
     * 
     * // Get first 10 Chii_os_web_sessions
     * const chii_os_web_sessions = await prisma.chii_os_web_sessions.findMany({ take: 10 })
     * 
     * // Only select the `key`
     * const chii_os_web_sessionsWithKeyOnly = await prisma.chii_os_web_sessions.findMany({ select: { key: true } })
     * 
    **/
    findMany<T extends chii_os_web_sessionsFindManyArgs>(
      args?: SelectSubset<T, chii_os_web_sessionsFindManyArgs>
    ): PrismaPromise<Array<chii_os_web_sessionsGetPayload<T>>>

    /**
     * Create a Chii_os_web_sessions.
     * @param {chii_os_web_sessionsCreateArgs} args - Arguments to create a Chii_os_web_sessions.
     * @example
     * // Create one Chii_os_web_sessions
     * const Chii_os_web_sessions = await prisma.chii_os_web_sessions.create({
     *   data: {
     *     // ... data to create a Chii_os_web_sessions
     *   }
     * })
     * 
    **/
    create<T extends chii_os_web_sessionsCreateArgs>(
      args: SelectSubset<T, chii_os_web_sessionsCreateArgs>
    ): Prisma__chii_os_web_sessionsClient<chii_os_web_sessionsGetPayload<T>>

    /**
     * Create many Chii_os_web_sessions.
     *     @param {chii_os_web_sessionsCreateManyArgs} args - Arguments to create many Chii_os_web_sessions.
     *     @example
     *     // Create many Chii_os_web_sessions
     *     const chii_os_web_sessions = await prisma.chii_os_web_sessions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_os_web_sessionsCreateManyArgs>(
      args?: SelectSubset<T, chii_os_web_sessionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_os_web_sessions.
     * @param {chii_os_web_sessionsDeleteArgs} args - Arguments to delete one Chii_os_web_sessions.
     * @example
     * // Delete one Chii_os_web_sessions
     * const Chii_os_web_sessions = await prisma.chii_os_web_sessions.delete({
     *   where: {
     *     // ... filter to delete one Chii_os_web_sessions
     *   }
     * })
     * 
    **/
    delete<T extends chii_os_web_sessionsDeleteArgs>(
      args: SelectSubset<T, chii_os_web_sessionsDeleteArgs>
    ): Prisma__chii_os_web_sessionsClient<chii_os_web_sessionsGetPayload<T>>

    /**
     * Update one Chii_os_web_sessions.
     * @param {chii_os_web_sessionsUpdateArgs} args - Arguments to update one Chii_os_web_sessions.
     * @example
     * // Update one Chii_os_web_sessions
     * const chii_os_web_sessions = await prisma.chii_os_web_sessions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_os_web_sessionsUpdateArgs>(
      args: SelectSubset<T, chii_os_web_sessionsUpdateArgs>
    ): Prisma__chii_os_web_sessionsClient<chii_os_web_sessionsGetPayload<T>>

    /**
     * Delete zero or more Chii_os_web_sessions.
     * @param {chii_os_web_sessionsDeleteManyArgs} args - Arguments to filter Chii_os_web_sessions to delete.
     * @example
     * // Delete a few Chii_os_web_sessions
     * const { count } = await prisma.chii_os_web_sessions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_os_web_sessionsDeleteManyArgs>(
      args?: SelectSubset<T, chii_os_web_sessionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_os_web_sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_os_web_sessionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_os_web_sessions
     * const chii_os_web_sessions = await prisma.chii_os_web_sessions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_os_web_sessionsUpdateManyArgs>(
      args: SelectSubset<T, chii_os_web_sessionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_os_web_sessions.
     * @param {chii_os_web_sessionsUpsertArgs} args - Arguments to update or create a Chii_os_web_sessions.
     * @example
     * // Update or create a Chii_os_web_sessions
     * const chii_os_web_sessions = await prisma.chii_os_web_sessions.upsert({
     *   create: {
     *     // ... data to create a Chii_os_web_sessions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_os_web_sessions we want to update
     *   }
     * })
    **/
    upsert<T extends chii_os_web_sessionsUpsertArgs>(
      args: SelectSubset<T, chii_os_web_sessionsUpsertArgs>
    ): Prisma__chii_os_web_sessionsClient<chii_os_web_sessionsGetPayload<T>>

    /**
     * Count the number of Chii_os_web_sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_os_web_sessionsCountArgs} args - Arguments to filter Chii_os_web_sessions to count.
     * @example
     * // Count the number of Chii_os_web_sessions
     * const count = await prisma.chii_os_web_sessions.count({
     *   where: {
     *     // ... the filter for the Chii_os_web_sessions we want to count
     *   }
     * })
    **/
    count<T extends chii_os_web_sessionsCountArgs>(
      args?: Subset<T, chii_os_web_sessionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_os_web_sessionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_os_web_sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_os_web_sessionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_os_web_sessionsAggregateArgs>(args: Subset<T, Chii_os_web_sessionsAggregateArgs>): PrismaPromise<GetChii_os_web_sessionsAggregateType<T>>

    /**
     * Group by Chii_os_web_sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_os_web_sessionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_os_web_sessionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_os_web_sessionsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_os_web_sessionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_os_web_sessionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_os_web_sessionsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_os_web_sessions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_os_web_sessionsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_os_web_sessions base type for findUnique actions
   */
  export type chii_os_web_sessionsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_os_web_sessions
     * 
    **/
    select?: chii_os_web_sessionsSelect | null
    /**
     * Filter, which chii_os_web_sessions to fetch.
     * 
    **/
    where: chii_os_web_sessionsWhereUniqueInput
  }

  /**
   * chii_os_web_sessions: findUnique
   */
  export interface chii_os_web_sessionsFindUniqueArgs extends chii_os_web_sessionsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_os_web_sessions findUniqueOrThrow
   */
  export type chii_os_web_sessionsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_os_web_sessions
     * 
    **/
    select?: chii_os_web_sessionsSelect | null
    /**
     * Filter, which chii_os_web_sessions to fetch.
     * 
    **/
    where: chii_os_web_sessionsWhereUniqueInput
  }


  /**
   * chii_os_web_sessions base type for findFirst actions
   */
  export type chii_os_web_sessionsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_os_web_sessions
     * 
    **/
    select?: chii_os_web_sessionsSelect | null
    /**
     * Filter, which chii_os_web_sessions to fetch.
     * 
    **/
    where?: chii_os_web_sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_os_web_sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_os_web_sessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_os_web_sessions.
     * 
    **/
    cursor?: chii_os_web_sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_os_web_sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_os_web_sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_os_web_sessions.
     * 
    **/
    distinct?: Enumerable<Chii_os_web_sessionsScalarFieldEnum>
  }

  /**
   * chii_os_web_sessions: findFirst
   */
  export interface chii_os_web_sessionsFindFirstArgs extends chii_os_web_sessionsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_os_web_sessions findFirstOrThrow
   */
  export type chii_os_web_sessionsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_os_web_sessions
     * 
    **/
    select?: chii_os_web_sessionsSelect | null
    /**
     * Filter, which chii_os_web_sessions to fetch.
     * 
    **/
    where?: chii_os_web_sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_os_web_sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_os_web_sessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_os_web_sessions.
     * 
    **/
    cursor?: chii_os_web_sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_os_web_sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_os_web_sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_os_web_sessions.
     * 
    **/
    distinct?: Enumerable<Chii_os_web_sessionsScalarFieldEnum>
  }


  /**
   * chii_os_web_sessions findMany
   */
  export type chii_os_web_sessionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_os_web_sessions
     * 
    **/
    select?: chii_os_web_sessionsSelect | null
    /**
     * Filter, which chii_os_web_sessions to fetch.
     * 
    **/
    where?: chii_os_web_sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_os_web_sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_os_web_sessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_os_web_sessions.
     * 
    **/
    cursor?: chii_os_web_sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_os_web_sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_os_web_sessions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_os_web_sessionsScalarFieldEnum>
  }


  /**
   * chii_os_web_sessions create
   */
  export type chii_os_web_sessionsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_os_web_sessions
     * 
    **/
    select?: chii_os_web_sessionsSelect | null
    /**
     * The data needed to create a chii_os_web_sessions.
     * 
    **/
    data: XOR<chii_os_web_sessionsCreateInput, chii_os_web_sessionsUncheckedCreateInput>
  }


  /**
   * chii_os_web_sessions createMany
   */
  export type chii_os_web_sessionsCreateManyArgs = {
    /**
     * The data used to create many chii_os_web_sessions.
     * 
    **/
    data: Enumerable<chii_os_web_sessionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_os_web_sessions update
   */
  export type chii_os_web_sessionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_os_web_sessions
     * 
    **/
    select?: chii_os_web_sessionsSelect | null
    /**
     * The data needed to update a chii_os_web_sessions.
     * 
    **/
    data: XOR<chii_os_web_sessionsUpdateInput, chii_os_web_sessionsUncheckedUpdateInput>
    /**
     * Choose, which chii_os_web_sessions to update.
     * 
    **/
    where: chii_os_web_sessionsWhereUniqueInput
  }


  /**
   * chii_os_web_sessions updateMany
   */
  export type chii_os_web_sessionsUpdateManyArgs = {
    /**
     * The data used to update chii_os_web_sessions.
     * 
    **/
    data: XOR<chii_os_web_sessionsUpdateManyMutationInput, chii_os_web_sessionsUncheckedUpdateManyInput>
    /**
     * Filter which chii_os_web_sessions to update
     * 
    **/
    where?: chii_os_web_sessionsWhereInput
  }


  /**
   * chii_os_web_sessions upsert
   */
  export type chii_os_web_sessionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_os_web_sessions
     * 
    **/
    select?: chii_os_web_sessionsSelect | null
    /**
     * The filter to search for the chii_os_web_sessions to update in case it exists.
     * 
    **/
    where: chii_os_web_sessionsWhereUniqueInput
    /**
     * In case the chii_os_web_sessions found by the `where` argument doesn't exist, create a new chii_os_web_sessions with this data.
     * 
    **/
    create: XOR<chii_os_web_sessionsCreateInput, chii_os_web_sessionsUncheckedCreateInput>
    /**
     * In case the chii_os_web_sessions was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_os_web_sessionsUpdateInput, chii_os_web_sessionsUncheckedUpdateInput>
  }


  /**
   * chii_os_web_sessions delete
   */
  export type chii_os_web_sessionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_os_web_sessions
     * 
    **/
    select?: chii_os_web_sessionsSelect | null
    /**
     * Filter which chii_os_web_sessions to delete.
     * 
    **/
    where: chii_os_web_sessionsWhereUniqueInput
  }


  /**
   * chii_os_web_sessions deleteMany
   */
  export type chii_os_web_sessionsDeleteManyArgs = {
    /**
     * Filter which chii_os_web_sessions to delete
     * 
    **/
    where?: chii_os_web_sessionsWhereInput
  }


  /**
   * chii_os_web_sessions without action
   */
  export type chii_os_web_sessionsArgs = {
    /**
     * Select specific fields to fetch from the chii_os_web_sessions
     * 
    **/
    select?: chii_os_web_sessionsSelect | null
  }



  /**
   * Model chii_person_collects
   */


  export type AggregateChii_person_collects = {
    _count: Chii_person_collectsCountAggregateOutputType | null
    _avg: Chii_person_collectsAvgAggregateOutputType | null
    _sum: Chii_person_collectsSumAggregateOutputType | null
    _min: Chii_person_collectsMinAggregateOutputType | null
    _max: Chii_person_collectsMaxAggregateOutputType | null
  }

  export type Chii_person_collectsAvgAggregateOutputType = {
    prsn_clt_id: number | null
    prsn_clt_mid: number | null
    prsn_clt_uid: number | null
    prsn_clt_dateline: number | null
  }

  export type Chii_person_collectsSumAggregateOutputType = {
    prsn_clt_id: number | null
    prsn_clt_mid: number | null
    prsn_clt_uid: number | null
    prsn_clt_dateline: number | null
  }

  export type Chii_person_collectsMinAggregateOutputType = {
    prsn_clt_id: number | null
    prsn_clt_cat: chii_person_collects_prsn_clt_cat | null
    prsn_clt_mid: number | null
    prsn_clt_uid: number | null
    prsn_clt_dateline: number | null
  }

  export type Chii_person_collectsMaxAggregateOutputType = {
    prsn_clt_id: number | null
    prsn_clt_cat: chii_person_collects_prsn_clt_cat | null
    prsn_clt_mid: number | null
    prsn_clt_uid: number | null
    prsn_clt_dateline: number | null
  }

  export type Chii_person_collectsCountAggregateOutputType = {
    prsn_clt_id: number
    prsn_clt_cat: number
    prsn_clt_mid: number
    prsn_clt_uid: number
    prsn_clt_dateline: number
    _all: number
  }


  export type Chii_person_collectsAvgAggregateInputType = {
    prsn_clt_id?: true
    prsn_clt_mid?: true
    prsn_clt_uid?: true
    prsn_clt_dateline?: true
  }

  export type Chii_person_collectsSumAggregateInputType = {
    prsn_clt_id?: true
    prsn_clt_mid?: true
    prsn_clt_uid?: true
    prsn_clt_dateline?: true
  }

  export type Chii_person_collectsMinAggregateInputType = {
    prsn_clt_id?: true
    prsn_clt_cat?: true
    prsn_clt_mid?: true
    prsn_clt_uid?: true
    prsn_clt_dateline?: true
  }

  export type Chii_person_collectsMaxAggregateInputType = {
    prsn_clt_id?: true
    prsn_clt_cat?: true
    prsn_clt_mid?: true
    prsn_clt_uid?: true
    prsn_clt_dateline?: true
  }

  export type Chii_person_collectsCountAggregateInputType = {
    prsn_clt_id?: true
    prsn_clt_cat?: true
    prsn_clt_mid?: true
    prsn_clt_uid?: true
    prsn_clt_dateline?: true
    _all?: true
  }

  export type Chii_person_collectsAggregateArgs = {
    /**
     * Filter which chii_person_collects to aggregate.
     * 
    **/
    where?: chii_person_collectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_person_collects to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_person_collectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_person_collectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_person_collects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_person_collects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_person_collects
    **/
    _count?: true | Chii_person_collectsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_person_collectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_person_collectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_person_collectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_person_collectsMaxAggregateInputType
  }

  export type GetChii_person_collectsAggregateType<T extends Chii_person_collectsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_person_collects]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_person_collects[P]>
      : GetScalarType<T[P], AggregateChii_person_collects[P]>
  }




  export type Chii_person_collectsGroupByArgs = {
    where?: chii_person_collectsWhereInput
    orderBy?: Enumerable<chii_person_collectsOrderByWithAggregationInput>
    by: Array<Chii_person_collectsScalarFieldEnum>
    having?: chii_person_collectsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_person_collectsCountAggregateInputType | true
    _avg?: Chii_person_collectsAvgAggregateInputType
    _sum?: Chii_person_collectsSumAggregateInputType
    _min?: Chii_person_collectsMinAggregateInputType
    _max?: Chii_person_collectsMaxAggregateInputType
  }


  export type Chii_person_collectsGroupByOutputType = {
    prsn_clt_id: number
    prsn_clt_cat: chii_person_collects_prsn_clt_cat
    prsn_clt_mid: number
    prsn_clt_uid: number
    prsn_clt_dateline: number
    _count: Chii_person_collectsCountAggregateOutputType | null
    _avg: Chii_person_collectsAvgAggregateOutputType | null
    _sum: Chii_person_collectsSumAggregateOutputType | null
    _min: Chii_person_collectsMinAggregateOutputType | null
    _max: Chii_person_collectsMaxAggregateOutputType | null
  }

  type GetChii_person_collectsGroupByPayload<T extends Chii_person_collectsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_person_collectsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_person_collectsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_person_collectsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_person_collectsGroupByOutputType[P]>
        }
      >
    >


  export type chii_person_collectsSelect = {
    prsn_clt_id?: boolean
    prsn_clt_cat?: boolean
    prsn_clt_mid?: boolean
    prsn_clt_uid?: boolean
    prsn_clt_dateline?: boolean
  }


  export type chii_person_collectsGetPayload<S extends boolean | null | undefined | chii_person_collectsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_person_collects :
    S extends undefined ? never :
    S extends { include: any } & (chii_person_collectsArgs | chii_person_collectsFindManyArgs)
    ? chii_person_collects 
    : S extends { select: any } & (chii_person_collectsArgs | chii_person_collectsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_person_collects ? chii_person_collects[P] : never
  } 
      : chii_person_collects


  type chii_person_collectsCountArgs = Merge<
    Omit<chii_person_collectsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_person_collectsCountAggregateInputType | true
    }
  >

  export interface chii_person_collectsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_person_collects that matches the filter.
     * @param {chii_person_collectsFindUniqueArgs} args - Arguments to find a Chii_person_collects
     * @example
     * // Get one Chii_person_collects
     * const chii_person_collects = await prisma.chii_person_collects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_person_collectsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_person_collectsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_person_collects'> extends True ? Prisma__chii_person_collectsClient<chii_person_collectsGetPayload<T>> : Prisma__chii_person_collectsClient<chii_person_collectsGetPayload<T> | null, null>

    /**
     * Find one Chii_person_collects that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_person_collectsFindUniqueOrThrowArgs} args - Arguments to find a Chii_person_collects
     * @example
     * // Get one Chii_person_collects
     * const chii_person_collects = await prisma.chii_person_collects.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_person_collectsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_person_collectsFindUniqueOrThrowArgs>
    ): Prisma__chii_person_collectsClient<chii_person_collectsGetPayload<T>>

    /**
     * Find the first Chii_person_collects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_person_collectsFindFirstArgs} args - Arguments to find a Chii_person_collects
     * @example
     * // Get one Chii_person_collects
     * const chii_person_collects = await prisma.chii_person_collects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_person_collectsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_person_collectsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_person_collects'> extends True ? Prisma__chii_person_collectsClient<chii_person_collectsGetPayload<T>> : Prisma__chii_person_collectsClient<chii_person_collectsGetPayload<T> | null, null>

    /**
     * Find the first Chii_person_collects that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_person_collectsFindFirstOrThrowArgs} args - Arguments to find a Chii_person_collects
     * @example
     * // Get one Chii_person_collects
     * const chii_person_collects = await prisma.chii_person_collects.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_person_collectsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_person_collectsFindFirstOrThrowArgs>
    ): Prisma__chii_person_collectsClient<chii_person_collectsGetPayload<T>>

    /**
     * Find zero or more Chii_person_collects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_person_collectsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_person_collects
     * const chii_person_collects = await prisma.chii_person_collects.findMany()
     * 
     * // Get first 10 Chii_person_collects
     * const chii_person_collects = await prisma.chii_person_collects.findMany({ take: 10 })
     * 
     * // Only select the `prsn_clt_id`
     * const chii_person_collectsWithPrsn_clt_idOnly = await prisma.chii_person_collects.findMany({ select: { prsn_clt_id: true } })
     * 
    **/
    findMany<T extends chii_person_collectsFindManyArgs>(
      args?: SelectSubset<T, chii_person_collectsFindManyArgs>
    ): PrismaPromise<Array<chii_person_collectsGetPayload<T>>>

    /**
     * Create a Chii_person_collects.
     * @param {chii_person_collectsCreateArgs} args - Arguments to create a Chii_person_collects.
     * @example
     * // Create one Chii_person_collects
     * const Chii_person_collects = await prisma.chii_person_collects.create({
     *   data: {
     *     // ... data to create a Chii_person_collects
     *   }
     * })
     * 
    **/
    create<T extends chii_person_collectsCreateArgs>(
      args: SelectSubset<T, chii_person_collectsCreateArgs>
    ): Prisma__chii_person_collectsClient<chii_person_collectsGetPayload<T>>

    /**
     * Create many Chii_person_collects.
     *     @param {chii_person_collectsCreateManyArgs} args - Arguments to create many Chii_person_collects.
     *     @example
     *     // Create many Chii_person_collects
     *     const chii_person_collects = await prisma.chii_person_collects.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_person_collectsCreateManyArgs>(
      args?: SelectSubset<T, chii_person_collectsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_person_collects.
     * @param {chii_person_collectsDeleteArgs} args - Arguments to delete one Chii_person_collects.
     * @example
     * // Delete one Chii_person_collects
     * const Chii_person_collects = await prisma.chii_person_collects.delete({
     *   where: {
     *     // ... filter to delete one Chii_person_collects
     *   }
     * })
     * 
    **/
    delete<T extends chii_person_collectsDeleteArgs>(
      args: SelectSubset<T, chii_person_collectsDeleteArgs>
    ): Prisma__chii_person_collectsClient<chii_person_collectsGetPayload<T>>

    /**
     * Update one Chii_person_collects.
     * @param {chii_person_collectsUpdateArgs} args - Arguments to update one Chii_person_collects.
     * @example
     * // Update one Chii_person_collects
     * const chii_person_collects = await prisma.chii_person_collects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_person_collectsUpdateArgs>(
      args: SelectSubset<T, chii_person_collectsUpdateArgs>
    ): Prisma__chii_person_collectsClient<chii_person_collectsGetPayload<T>>

    /**
     * Delete zero or more Chii_person_collects.
     * @param {chii_person_collectsDeleteManyArgs} args - Arguments to filter Chii_person_collects to delete.
     * @example
     * // Delete a few Chii_person_collects
     * const { count } = await prisma.chii_person_collects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_person_collectsDeleteManyArgs>(
      args?: SelectSubset<T, chii_person_collectsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_person_collects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_person_collectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_person_collects
     * const chii_person_collects = await prisma.chii_person_collects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_person_collectsUpdateManyArgs>(
      args: SelectSubset<T, chii_person_collectsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_person_collects.
     * @param {chii_person_collectsUpsertArgs} args - Arguments to update or create a Chii_person_collects.
     * @example
     * // Update or create a Chii_person_collects
     * const chii_person_collects = await prisma.chii_person_collects.upsert({
     *   create: {
     *     // ... data to create a Chii_person_collects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_person_collects we want to update
     *   }
     * })
    **/
    upsert<T extends chii_person_collectsUpsertArgs>(
      args: SelectSubset<T, chii_person_collectsUpsertArgs>
    ): Prisma__chii_person_collectsClient<chii_person_collectsGetPayload<T>>

    /**
     * Count the number of Chii_person_collects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_person_collectsCountArgs} args - Arguments to filter Chii_person_collects to count.
     * @example
     * // Count the number of Chii_person_collects
     * const count = await prisma.chii_person_collects.count({
     *   where: {
     *     // ... the filter for the Chii_person_collects we want to count
     *   }
     * })
    **/
    count<T extends chii_person_collectsCountArgs>(
      args?: Subset<T, chii_person_collectsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_person_collectsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_person_collects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_person_collectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_person_collectsAggregateArgs>(args: Subset<T, Chii_person_collectsAggregateArgs>): PrismaPromise<GetChii_person_collectsAggregateType<T>>

    /**
     * Group by Chii_person_collects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_person_collectsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_person_collectsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_person_collectsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_person_collectsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_person_collectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_person_collectsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_person_collects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_person_collectsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_person_collects base type for findUnique actions
   */
  export type chii_person_collectsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_person_collects
     * 
    **/
    select?: chii_person_collectsSelect | null
    /**
     * Filter, which chii_person_collects to fetch.
     * 
    **/
    where: chii_person_collectsWhereUniqueInput
  }

  /**
   * chii_person_collects: findUnique
   */
  export interface chii_person_collectsFindUniqueArgs extends chii_person_collectsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_person_collects findUniqueOrThrow
   */
  export type chii_person_collectsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_person_collects
     * 
    **/
    select?: chii_person_collectsSelect | null
    /**
     * Filter, which chii_person_collects to fetch.
     * 
    **/
    where: chii_person_collectsWhereUniqueInput
  }


  /**
   * chii_person_collects base type for findFirst actions
   */
  export type chii_person_collectsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_person_collects
     * 
    **/
    select?: chii_person_collectsSelect | null
    /**
     * Filter, which chii_person_collects to fetch.
     * 
    **/
    where?: chii_person_collectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_person_collects to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_person_collectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_person_collects.
     * 
    **/
    cursor?: chii_person_collectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_person_collects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_person_collects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_person_collects.
     * 
    **/
    distinct?: Enumerable<Chii_person_collectsScalarFieldEnum>
  }

  /**
   * chii_person_collects: findFirst
   */
  export interface chii_person_collectsFindFirstArgs extends chii_person_collectsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_person_collects findFirstOrThrow
   */
  export type chii_person_collectsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_person_collects
     * 
    **/
    select?: chii_person_collectsSelect | null
    /**
     * Filter, which chii_person_collects to fetch.
     * 
    **/
    where?: chii_person_collectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_person_collects to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_person_collectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_person_collects.
     * 
    **/
    cursor?: chii_person_collectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_person_collects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_person_collects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_person_collects.
     * 
    **/
    distinct?: Enumerable<Chii_person_collectsScalarFieldEnum>
  }


  /**
   * chii_person_collects findMany
   */
  export type chii_person_collectsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_person_collects
     * 
    **/
    select?: chii_person_collectsSelect | null
    /**
     * Filter, which chii_person_collects to fetch.
     * 
    **/
    where?: chii_person_collectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_person_collects to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_person_collectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_person_collects.
     * 
    **/
    cursor?: chii_person_collectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_person_collects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_person_collects.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_person_collectsScalarFieldEnum>
  }


  /**
   * chii_person_collects create
   */
  export type chii_person_collectsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_person_collects
     * 
    **/
    select?: chii_person_collectsSelect | null
    /**
     * The data needed to create a chii_person_collects.
     * 
    **/
    data: XOR<chii_person_collectsCreateInput, chii_person_collectsUncheckedCreateInput>
  }


  /**
   * chii_person_collects createMany
   */
  export type chii_person_collectsCreateManyArgs = {
    /**
     * The data used to create many chii_person_collects.
     * 
    **/
    data: Enumerable<chii_person_collectsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_person_collects update
   */
  export type chii_person_collectsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_person_collects
     * 
    **/
    select?: chii_person_collectsSelect | null
    /**
     * The data needed to update a chii_person_collects.
     * 
    **/
    data: XOR<chii_person_collectsUpdateInput, chii_person_collectsUncheckedUpdateInput>
    /**
     * Choose, which chii_person_collects to update.
     * 
    **/
    where: chii_person_collectsWhereUniqueInput
  }


  /**
   * chii_person_collects updateMany
   */
  export type chii_person_collectsUpdateManyArgs = {
    /**
     * The data used to update chii_person_collects.
     * 
    **/
    data: XOR<chii_person_collectsUpdateManyMutationInput, chii_person_collectsUncheckedUpdateManyInput>
    /**
     * Filter which chii_person_collects to update
     * 
    **/
    where?: chii_person_collectsWhereInput
  }


  /**
   * chii_person_collects upsert
   */
  export type chii_person_collectsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_person_collects
     * 
    **/
    select?: chii_person_collectsSelect | null
    /**
     * The filter to search for the chii_person_collects to update in case it exists.
     * 
    **/
    where: chii_person_collectsWhereUniqueInput
    /**
     * In case the chii_person_collects found by the `where` argument doesn't exist, create a new chii_person_collects with this data.
     * 
    **/
    create: XOR<chii_person_collectsCreateInput, chii_person_collectsUncheckedCreateInput>
    /**
     * In case the chii_person_collects was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_person_collectsUpdateInput, chii_person_collectsUncheckedUpdateInput>
  }


  /**
   * chii_person_collects delete
   */
  export type chii_person_collectsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_person_collects
     * 
    **/
    select?: chii_person_collectsSelect | null
    /**
     * Filter which chii_person_collects to delete.
     * 
    **/
    where: chii_person_collectsWhereUniqueInput
  }


  /**
   * chii_person_collects deleteMany
   */
  export type chii_person_collectsDeleteManyArgs = {
    /**
     * Filter which chii_person_collects to delete
     * 
    **/
    where?: chii_person_collectsWhereInput
  }


  /**
   * chii_person_collects without action
   */
  export type chii_person_collectsArgs = {
    /**
     * Select specific fields to fetch from the chii_person_collects
     * 
    **/
    select?: chii_person_collectsSelect | null
  }



  /**
   * Model chii_person_cs_index
   */


  export type AggregateChii_person_cs_index = {
    _count: Chii_person_cs_indexCountAggregateOutputType | null
    _avg: Chii_person_cs_indexAvgAggregateOutputType | null
    _sum: Chii_person_cs_indexSumAggregateOutputType | null
    _min: Chii_person_cs_indexMinAggregateOutputType | null
    _max: Chii_person_cs_indexMaxAggregateOutputType | null
  }

  export type Chii_person_cs_indexAvgAggregateOutputType = {
    prsn_id: number | null
    prsn_position: number | null
    subject_id: number | null
    subject_type_id: number | null
  }

  export type Chii_person_cs_indexSumAggregateOutputType = {
    prsn_id: number | null
    prsn_position: number | null
    subject_id: number | null
    subject_type_id: number | null
  }

  export type Chii_person_cs_indexMinAggregateOutputType = {
    prsn_type: chii_person_cs_index_prsn_type | null
    prsn_id: number | null
    prsn_position: number | null
    subject_id: number | null
    subject_type_id: number | null
    summary: string | null
    prsn_appear_eps: string | null
  }

  export type Chii_person_cs_indexMaxAggregateOutputType = {
    prsn_type: chii_person_cs_index_prsn_type | null
    prsn_id: number | null
    prsn_position: number | null
    subject_id: number | null
    subject_type_id: number | null
    summary: string | null
    prsn_appear_eps: string | null
  }

  export type Chii_person_cs_indexCountAggregateOutputType = {
    prsn_type: number
    prsn_id: number
    prsn_position: number
    subject_id: number
    subject_type_id: number
    summary: number
    prsn_appear_eps: number
    _all: number
  }


  export type Chii_person_cs_indexAvgAggregateInputType = {
    prsn_id?: true
    prsn_position?: true
    subject_id?: true
    subject_type_id?: true
  }

  export type Chii_person_cs_indexSumAggregateInputType = {
    prsn_id?: true
    prsn_position?: true
    subject_id?: true
    subject_type_id?: true
  }

  export type Chii_person_cs_indexMinAggregateInputType = {
    prsn_type?: true
    prsn_id?: true
    prsn_position?: true
    subject_id?: true
    subject_type_id?: true
    summary?: true
    prsn_appear_eps?: true
  }

  export type Chii_person_cs_indexMaxAggregateInputType = {
    prsn_type?: true
    prsn_id?: true
    prsn_position?: true
    subject_id?: true
    subject_type_id?: true
    summary?: true
    prsn_appear_eps?: true
  }

  export type Chii_person_cs_indexCountAggregateInputType = {
    prsn_type?: true
    prsn_id?: true
    prsn_position?: true
    subject_id?: true
    subject_type_id?: true
    summary?: true
    prsn_appear_eps?: true
    _all?: true
  }

  export type Chii_person_cs_indexAggregateArgs = {
    /**
     * Filter which chii_person_cs_index to aggregate.
     * 
    **/
    where?: chii_person_cs_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_person_cs_indices to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_person_cs_indexOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_person_cs_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_person_cs_indices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_person_cs_indices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_person_cs_indices
    **/
    _count?: true | Chii_person_cs_indexCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_person_cs_indexAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_person_cs_indexSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_person_cs_indexMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_person_cs_indexMaxAggregateInputType
  }

  export type GetChii_person_cs_indexAggregateType<T extends Chii_person_cs_indexAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_person_cs_index]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_person_cs_index[P]>
      : GetScalarType<T[P], AggregateChii_person_cs_index[P]>
  }




  export type Chii_person_cs_indexGroupByArgs = {
    where?: chii_person_cs_indexWhereInput
    orderBy?: Enumerable<chii_person_cs_indexOrderByWithAggregationInput>
    by: Array<Chii_person_cs_indexScalarFieldEnum>
    having?: chii_person_cs_indexScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_person_cs_indexCountAggregateInputType | true
    _avg?: Chii_person_cs_indexAvgAggregateInputType
    _sum?: Chii_person_cs_indexSumAggregateInputType
    _min?: Chii_person_cs_indexMinAggregateInputType
    _max?: Chii_person_cs_indexMaxAggregateInputType
  }


  export type Chii_person_cs_indexGroupByOutputType = {
    prsn_type: chii_person_cs_index_prsn_type
    prsn_id: number
    prsn_position: number
    subject_id: number
    subject_type_id: number
    summary: string
    prsn_appear_eps: string
    _count: Chii_person_cs_indexCountAggregateOutputType | null
    _avg: Chii_person_cs_indexAvgAggregateOutputType | null
    _sum: Chii_person_cs_indexSumAggregateOutputType | null
    _min: Chii_person_cs_indexMinAggregateOutputType | null
    _max: Chii_person_cs_indexMaxAggregateOutputType | null
  }

  type GetChii_person_cs_indexGroupByPayload<T extends Chii_person_cs_indexGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_person_cs_indexGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_person_cs_indexGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_person_cs_indexGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_person_cs_indexGroupByOutputType[P]>
        }
      >
    >


  export type chii_person_cs_indexSelect = {
    prsn_type?: boolean
    prsn_id?: boolean
    prsn_position?: boolean
    subject_id?: boolean
    subject_type_id?: boolean
    summary?: boolean
    prsn_appear_eps?: boolean
  }


  export type chii_person_cs_indexGetPayload<S extends boolean | null | undefined | chii_person_cs_indexArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_person_cs_index :
    S extends undefined ? never :
    S extends { include: any } & (chii_person_cs_indexArgs | chii_person_cs_indexFindManyArgs)
    ? chii_person_cs_index 
    : S extends { select: any } & (chii_person_cs_indexArgs | chii_person_cs_indexFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_person_cs_index ? chii_person_cs_index[P] : never
  } 
      : chii_person_cs_index


  type chii_person_cs_indexCountArgs = Merge<
    Omit<chii_person_cs_indexFindManyArgs, 'select' | 'include'> & {
      select?: Chii_person_cs_indexCountAggregateInputType | true
    }
  >

  export interface chii_person_cs_indexDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_person_cs_index that matches the filter.
     * @param {chii_person_cs_indexFindUniqueArgs} args - Arguments to find a Chii_person_cs_index
     * @example
     * // Get one Chii_person_cs_index
     * const chii_person_cs_index = await prisma.chii_person_cs_index.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_person_cs_indexFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_person_cs_indexFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_person_cs_index'> extends True ? Prisma__chii_person_cs_indexClient<chii_person_cs_indexGetPayload<T>> : Prisma__chii_person_cs_indexClient<chii_person_cs_indexGetPayload<T> | null, null>

    /**
     * Find one Chii_person_cs_index that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_person_cs_indexFindUniqueOrThrowArgs} args - Arguments to find a Chii_person_cs_index
     * @example
     * // Get one Chii_person_cs_index
     * const chii_person_cs_index = await prisma.chii_person_cs_index.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_person_cs_indexFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_person_cs_indexFindUniqueOrThrowArgs>
    ): Prisma__chii_person_cs_indexClient<chii_person_cs_indexGetPayload<T>>

    /**
     * Find the first Chii_person_cs_index that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_person_cs_indexFindFirstArgs} args - Arguments to find a Chii_person_cs_index
     * @example
     * // Get one Chii_person_cs_index
     * const chii_person_cs_index = await prisma.chii_person_cs_index.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_person_cs_indexFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_person_cs_indexFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_person_cs_index'> extends True ? Prisma__chii_person_cs_indexClient<chii_person_cs_indexGetPayload<T>> : Prisma__chii_person_cs_indexClient<chii_person_cs_indexGetPayload<T> | null, null>

    /**
     * Find the first Chii_person_cs_index that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_person_cs_indexFindFirstOrThrowArgs} args - Arguments to find a Chii_person_cs_index
     * @example
     * // Get one Chii_person_cs_index
     * const chii_person_cs_index = await prisma.chii_person_cs_index.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_person_cs_indexFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_person_cs_indexFindFirstOrThrowArgs>
    ): Prisma__chii_person_cs_indexClient<chii_person_cs_indexGetPayload<T>>

    /**
     * Find zero or more Chii_person_cs_indices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_person_cs_indexFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_person_cs_indices
     * const chii_person_cs_indices = await prisma.chii_person_cs_index.findMany()
     * 
     * // Get first 10 Chii_person_cs_indices
     * const chii_person_cs_indices = await prisma.chii_person_cs_index.findMany({ take: 10 })
     * 
     * // Only select the `prsn_id`
     * const chii_person_cs_indexWithPrsn_idOnly = await prisma.chii_person_cs_index.findMany({ select: { prsn_id: true } })
     * 
    **/
    findMany<T extends chii_person_cs_indexFindManyArgs>(
      args?: SelectSubset<T, chii_person_cs_indexFindManyArgs>
    ): PrismaPromise<Array<chii_person_cs_indexGetPayload<T>>>

    /**
     * Create a Chii_person_cs_index.
     * @param {chii_person_cs_indexCreateArgs} args - Arguments to create a Chii_person_cs_index.
     * @example
     * // Create one Chii_person_cs_index
     * const Chii_person_cs_index = await prisma.chii_person_cs_index.create({
     *   data: {
     *     // ... data to create a Chii_person_cs_index
     *   }
     * })
     * 
    **/
    create<T extends chii_person_cs_indexCreateArgs>(
      args: SelectSubset<T, chii_person_cs_indexCreateArgs>
    ): Prisma__chii_person_cs_indexClient<chii_person_cs_indexGetPayload<T>>

    /**
     * Create many Chii_person_cs_indices.
     *     @param {chii_person_cs_indexCreateManyArgs} args - Arguments to create many Chii_person_cs_indices.
     *     @example
     *     // Create many Chii_person_cs_indices
     *     const chii_person_cs_index = await prisma.chii_person_cs_index.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_person_cs_indexCreateManyArgs>(
      args?: SelectSubset<T, chii_person_cs_indexCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_person_cs_index.
     * @param {chii_person_cs_indexDeleteArgs} args - Arguments to delete one Chii_person_cs_index.
     * @example
     * // Delete one Chii_person_cs_index
     * const Chii_person_cs_index = await prisma.chii_person_cs_index.delete({
     *   where: {
     *     // ... filter to delete one Chii_person_cs_index
     *   }
     * })
     * 
    **/
    delete<T extends chii_person_cs_indexDeleteArgs>(
      args: SelectSubset<T, chii_person_cs_indexDeleteArgs>
    ): Prisma__chii_person_cs_indexClient<chii_person_cs_indexGetPayload<T>>

    /**
     * Update one Chii_person_cs_index.
     * @param {chii_person_cs_indexUpdateArgs} args - Arguments to update one Chii_person_cs_index.
     * @example
     * // Update one Chii_person_cs_index
     * const chii_person_cs_index = await prisma.chii_person_cs_index.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_person_cs_indexUpdateArgs>(
      args: SelectSubset<T, chii_person_cs_indexUpdateArgs>
    ): Prisma__chii_person_cs_indexClient<chii_person_cs_indexGetPayload<T>>

    /**
     * Delete zero or more Chii_person_cs_indices.
     * @param {chii_person_cs_indexDeleteManyArgs} args - Arguments to filter Chii_person_cs_indices to delete.
     * @example
     * // Delete a few Chii_person_cs_indices
     * const { count } = await prisma.chii_person_cs_index.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_person_cs_indexDeleteManyArgs>(
      args?: SelectSubset<T, chii_person_cs_indexDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_person_cs_indices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_person_cs_indexUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_person_cs_indices
     * const chii_person_cs_index = await prisma.chii_person_cs_index.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_person_cs_indexUpdateManyArgs>(
      args: SelectSubset<T, chii_person_cs_indexUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_person_cs_index.
     * @param {chii_person_cs_indexUpsertArgs} args - Arguments to update or create a Chii_person_cs_index.
     * @example
     * // Update or create a Chii_person_cs_index
     * const chii_person_cs_index = await prisma.chii_person_cs_index.upsert({
     *   create: {
     *     // ... data to create a Chii_person_cs_index
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_person_cs_index we want to update
     *   }
     * })
    **/
    upsert<T extends chii_person_cs_indexUpsertArgs>(
      args: SelectSubset<T, chii_person_cs_indexUpsertArgs>
    ): Prisma__chii_person_cs_indexClient<chii_person_cs_indexGetPayload<T>>

    /**
     * Count the number of Chii_person_cs_indices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_person_cs_indexCountArgs} args - Arguments to filter Chii_person_cs_indices to count.
     * @example
     * // Count the number of Chii_person_cs_indices
     * const count = await prisma.chii_person_cs_index.count({
     *   where: {
     *     // ... the filter for the Chii_person_cs_indices we want to count
     *   }
     * })
    **/
    count<T extends chii_person_cs_indexCountArgs>(
      args?: Subset<T, chii_person_cs_indexCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_person_cs_indexCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_person_cs_index.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_person_cs_indexAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_person_cs_indexAggregateArgs>(args: Subset<T, Chii_person_cs_indexAggregateArgs>): PrismaPromise<GetChii_person_cs_indexAggregateType<T>>

    /**
     * Group by Chii_person_cs_index.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_person_cs_indexGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_person_cs_indexGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_person_cs_indexGroupByArgs['orderBy'] }
        : { orderBy?: Chii_person_cs_indexGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_person_cs_indexGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_person_cs_indexGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_person_cs_index.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_person_cs_indexClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_person_cs_index base type for findUnique actions
   */
  export type chii_person_cs_indexFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_person_cs_index
     * 
    **/
    select?: chii_person_cs_indexSelect | null
    /**
     * Filter, which chii_person_cs_index to fetch.
     * 
    **/
    where: chii_person_cs_indexWhereUniqueInput
  }

  /**
   * chii_person_cs_index: findUnique
   */
  export interface chii_person_cs_indexFindUniqueArgs extends chii_person_cs_indexFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_person_cs_index findUniqueOrThrow
   */
  export type chii_person_cs_indexFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_person_cs_index
     * 
    **/
    select?: chii_person_cs_indexSelect | null
    /**
     * Filter, which chii_person_cs_index to fetch.
     * 
    **/
    where: chii_person_cs_indexWhereUniqueInput
  }


  /**
   * chii_person_cs_index base type for findFirst actions
   */
  export type chii_person_cs_indexFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_person_cs_index
     * 
    **/
    select?: chii_person_cs_indexSelect | null
    /**
     * Filter, which chii_person_cs_index to fetch.
     * 
    **/
    where?: chii_person_cs_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_person_cs_indices to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_person_cs_indexOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_person_cs_indices.
     * 
    **/
    cursor?: chii_person_cs_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_person_cs_indices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_person_cs_indices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_person_cs_indices.
     * 
    **/
    distinct?: Enumerable<Chii_person_cs_indexScalarFieldEnum>
  }

  /**
   * chii_person_cs_index: findFirst
   */
  export interface chii_person_cs_indexFindFirstArgs extends chii_person_cs_indexFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_person_cs_index findFirstOrThrow
   */
  export type chii_person_cs_indexFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_person_cs_index
     * 
    **/
    select?: chii_person_cs_indexSelect | null
    /**
     * Filter, which chii_person_cs_index to fetch.
     * 
    **/
    where?: chii_person_cs_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_person_cs_indices to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_person_cs_indexOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_person_cs_indices.
     * 
    **/
    cursor?: chii_person_cs_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_person_cs_indices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_person_cs_indices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_person_cs_indices.
     * 
    **/
    distinct?: Enumerable<Chii_person_cs_indexScalarFieldEnum>
  }


  /**
   * chii_person_cs_index findMany
   */
  export type chii_person_cs_indexFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_person_cs_index
     * 
    **/
    select?: chii_person_cs_indexSelect | null
    /**
     * Filter, which chii_person_cs_indices to fetch.
     * 
    **/
    where?: chii_person_cs_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_person_cs_indices to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_person_cs_indexOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_person_cs_indices.
     * 
    **/
    cursor?: chii_person_cs_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_person_cs_indices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_person_cs_indices.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_person_cs_indexScalarFieldEnum>
  }


  /**
   * chii_person_cs_index create
   */
  export type chii_person_cs_indexCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_person_cs_index
     * 
    **/
    select?: chii_person_cs_indexSelect | null
    /**
     * The data needed to create a chii_person_cs_index.
     * 
    **/
    data: XOR<chii_person_cs_indexCreateInput, chii_person_cs_indexUncheckedCreateInput>
  }


  /**
   * chii_person_cs_index createMany
   */
  export type chii_person_cs_indexCreateManyArgs = {
    /**
     * The data used to create many chii_person_cs_indices.
     * 
    **/
    data: Enumerable<chii_person_cs_indexCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_person_cs_index update
   */
  export type chii_person_cs_indexUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_person_cs_index
     * 
    **/
    select?: chii_person_cs_indexSelect | null
    /**
     * The data needed to update a chii_person_cs_index.
     * 
    **/
    data: XOR<chii_person_cs_indexUpdateInput, chii_person_cs_indexUncheckedUpdateInput>
    /**
     * Choose, which chii_person_cs_index to update.
     * 
    **/
    where: chii_person_cs_indexWhereUniqueInput
  }


  /**
   * chii_person_cs_index updateMany
   */
  export type chii_person_cs_indexUpdateManyArgs = {
    /**
     * The data used to update chii_person_cs_indices.
     * 
    **/
    data: XOR<chii_person_cs_indexUpdateManyMutationInput, chii_person_cs_indexUncheckedUpdateManyInput>
    /**
     * Filter which chii_person_cs_indices to update
     * 
    **/
    where?: chii_person_cs_indexWhereInput
  }


  /**
   * chii_person_cs_index upsert
   */
  export type chii_person_cs_indexUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_person_cs_index
     * 
    **/
    select?: chii_person_cs_indexSelect | null
    /**
     * The filter to search for the chii_person_cs_index to update in case it exists.
     * 
    **/
    where: chii_person_cs_indexWhereUniqueInput
    /**
     * In case the chii_person_cs_index found by the `where` argument doesn't exist, create a new chii_person_cs_index with this data.
     * 
    **/
    create: XOR<chii_person_cs_indexCreateInput, chii_person_cs_indexUncheckedCreateInput>
    /**
     * In case the chii_person_cs_index was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_person_cs_indexUpdateInput, chii_person_cs_indexUncheckedUpdateInput>
  }


  /**
   * chii_person_cs_index delete
   */
  export type chii_person_cs_indexDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_person_cs_index
     * 
    **/
    select?: chii_person_cs_indexSelect | null
    /**
     * Filter which chii_person_cs_index to delete.
     * 
    **/
    where: chii_person_cs_indexWhereUniqueInput
  }


  /**
   * chii_person_cs_index deleteMany
   */
  export type chii_person_cs_indexDeleteManyArgs = {
    /**
     * Filter which chii_person_cs_indices to delete
     * 
    **/
    where?: chii_person_cs_indexWhereInput
  }


  /**
   * chii_person_cs_index without action
   */
  export type chii_person_cs_indexArgs = {
    /**
     * Select specific fields to fetch from the chii_person_cs_index
     * 
    **/
    select?: chii_person_cs_indexSelect | null
  }



  /**
   * Model chii_person_fields
   */


  export type AggregateChii_person_fields = {
    _count: Chii_person_fieldsCountAggregateOutputType | null
    _avg: Chii_person_fieldsAvgAggregateOutputType | null
    _sum: Chii_person_fieldsSumAggregateOutputType | null
    _min: Chii_person_fieldsMinAggregateOutputType | null
    _max: Chii_person_fieldsMaxAggregateOutputType | null
  }

  export type Chii_person_fieldsAvgAggregateOutputType = {
    prsn_id: number | null
    gender: number | null
    bloodtype: number | null
    birth_year: number | null
    birth_mon: number | null
    birth_day: number | null
  }

  export type Chii_person_fieldsSumAggregateOutputType = {
    prsn_id: number | null
    gender: number | null
    bloodtype: number | null
    birth_year: number | null
    birth_mon: number | null
    birth_day: number | null
  }

  export type Chii_person_fieldsMinAggregateOutputType = {
    prsn_cat: chii_person_fields_prsn_cat | null
    prsn_id: number | null
    gender: number | null
    bloodtype: number | null
    birth_year: number | null
    birth_mon: number | null
    birth_day: number | null
  }

  export type Chii_person_fieldsMaxAggregateOutputType = {
    prsn_cat: chii_person_fields_prsn_cat | null
    prsn_id: number | null
    gender: number | null
    bloodtype: number | null
    birth_year: number | null
    birth_mon: number | null
    birth_day: number | null
  }

  export type Chii_person_fieldsCountAggregateOutputType = {
    prsn_cat: number
    prsn_id: number
    gender: number
    bloodtype: number
    birth_year: number
    birth_mon: number
    birth_day: number
    _all: number
  }


  export type Chii_person_fieldsAvgAggregateInputType = {
    prsn_id?: true
    gender?: true
    bloodtype?: true
    birth_year?: true
    birth_mon?: true
    birth_day?: true
  }

  export type Chii_person_fieldsSumAggregateInputType = {
    prsn_id?: true
    gender?: true
    bloodtype?: true
    birth_year?: true
    birth_mon?: true
    birth_day?: true
  }

  export type Chii_person_fieldsMinAggregateInputType = {
    prsn_cat?: true
    prsn_id?: true
    gender?: true
    bloodtype?: true
    birth_year?: true
    birth_mon?: true
    birth_day?: true
  }

  export type Chii_person_fieldsMaxAggregateInputType = {
    prsn_cat?: true
    prsn_id?: true
    gender?: true
    bloodtype?: true
    birth_year?: true
    birth_mon?: true
    birth_day?: true
  }

  export type Chii_person_fieldsCountAggregateInputType = {
    prsn_cat?: true
    prsn_id?: true
    gender?: true
    bloodtype?: true
    birth_year?: true
    birth_mon?: true
    birth_day?: true
    _all?: true
  }

  export type Chii_person_fieldsAggregateArgs = {
    /**
     * Filter which chii_person_fields to aggregate.
     * 
    **/
    where?: chii_person_fieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_person_fields to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_person_fieldsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_person_fieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_person_fields from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_person_fields.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_person_fields
    **/
    _count?: true | Chii_person_fieldsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_person_fieldsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_person_fieldsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_person_fieldsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_person_fieldsMaxAggregateInputType
  }

  export type GetChii_person_fieldsAggregateType<T extends Chii_person_fieldsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_person_fields]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_person_fields[P]>
      : GetScalarType<T[P], AggregateChii_person_fields[P]>
  }




  export type Chii_person_fieldsGroupByArgs = {
    where?: chii_person_fieldsWhereInput
    orderBy?: Enumerable<chii_person_fieldsOrderByWithAggregationInput>
    by: Array<Chii_person_fieldsScalarFieldEnum>
    having?: chii_person_fieldsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_person_fieldsCountAggregateInputType | true
    _avg?: Chii_person_fieldsAvgAggregateInputType
    _sum?: Chii_person_fieldsSumAggregateInputType
    _min?: Chii_person_fieldsMinAggregateInputType
    _max?: Chii_person_fieldsMaxAggregateInputType
  }


  export type Chii_person_fieldsGroupByOutputType = {
    prsn_cat: chii_person_fields_prsn_cat
    prsn_id: number
    gender: number
    bloodtype: number
    birth_year: number
    birth_mon: number
    birth_day: number
    _count: Chii_person_fieldsCountAggregateOutputType | null
    _avg: Chii_person_fieldsAvgAggregateOutputType | null
    _sum: Chii_person_fieldsSumAggregateOutputType | null
    _min: Chii_person_fieldsMinAggregateOutputType | null
    _max: Chii_person_fieldsMaxAggregateOutputType | null
  }

  type GetChii_person_fieldsGroupByPayload<T extends Chii_person_fieldsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_person_fieldsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_person_fieldsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_person_fieldsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_person_fieldsGroupByOutputType[P]>
        }
      >
    >


  export type chii_person_fieldsSelect = {
    prsn_cat?: boolean
    prsn_id?: boolean
    gender?: boolean
    bloodtype?: boolean
    birth_year?: boolean
    birth_mon?: boolean
    birth_day?: boolean
  }


  export type chii_person_fieldsGetPayload<S extends boolean | null | undefined | chii_person_fieldsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_person_fields :
    S extends undefined ? never :
    S extends { include: any } & (chii_person_fieldsArgs | chii_person_fieldsFindManyArgs)
    ? chii_person_fields 
    : S extends { select: any } & (chii_person_fieldsArgs | chii_person_fieldsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_person_fields ? chii_person_fields[P] : never
  } 
      : chii_person_fields


  type chii_person_fieldsCountArgs = Merge<
    Omit<chii_person_fieldsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_person_fieldsCountAggregateInputType | true
    }
  >

  export interface chii_person_fieldsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_person_fields that matches the filter.
     * @param {chii_person_fieldsFindUniqueArgs} args - Arguments to find a Chii_person_fields
     * @example
     * // Get one Chii_person_fields
     * const chii_person_fields = await prisma.chii_person_fields.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_person_fieldsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_person_fieldsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_person_fields'> extends True ? Prisma__chii_person_fieldsClient<chii_person_fieldsGetPayload<T>> : Prisma__chii_person_fieldsClient<chii_person_fieldsGetPayload<T> | null, null>

    /**
     * Find one Chii_person_fields that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_person_fieldsFindUniqueOrThrowArgs} args - Arguments to find a Chii_person_fields
     * @example
     * // Get one Chii_person_fields
     * const chii_person_fields = await prisma.chii_person_fields.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_person_fieldsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_person_fieldsFindUniqueOrThrowArgs>
    ): Prisma__chii_person_fieldsClient<chii_person_fieldsGetPayload<T>>

    /**
     * Find the first Chii_person_fields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_person_fieldsFindFirstArgs} args - Arguments to find a Chii_person_fields
     * @example
     * // Get one Chii_person_fields
     * const chii_person_fields = await prisma.chii_person_fields.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_person_fieldsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_person_fieldsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_person_fields'> extends True ? Prisma__chii_person_fieldsClient<chii_person_fieldsGetPayload<T>> : Prisma__chii_person_fieldsClient<chii_person_fieldsGetPayload<T> | null, null>

    /**
     * Find the first Chii_person_fields that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_person_fieldsFindFirstOrThrowArgs} args - Arguments to find a Chii_person_fields
     * @example
     * // Get one Chii_person_fields
     * const chii_person_fields = await prisma.chii_person_fields.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_person_fieldsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_person_fieldsFindFirstOrThrowArgs>
    ): Prisma__chii_person_fieldsClient<chii_person_fieldsGetPayload<T>>

    /**
     * Find zero or more Chii_person_fields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_person_fieldsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_person_fields
     * const chii_person_fields = await prisma.chii_person_fields.findMany()
     * 
     * // Get first 10 Chii_person_fields
     * const chii_person_fields = await prisma.chii_person_fields.findMany({ take: 10 })
     * 
     * // Only select the `prsn_id`
     * const chii_person_fieldsWithPrsn_idOnly = await prisma.chii_person_fields.findMany({ select: { prsn_id: true } })
     * 
    **/
    findMany<T extends chii_person_fieldsFindManyArgs>(
      args?: SelectSubset<T, chii_person_fieldsFindManyArgs>
    ): PrismaPromise<Array<chii_person_fieldsGetPayload<T>>>

    /**
     * Create a Chii_person_fields.
     * @param {chii_person_fieldsCreateArgs} args - Arguments to create a Chii_person_fields.
     * @example
     * // Create one Chii_person_fields
     * const Chii_person_fields = await prisma.chii_person_fields.create({
     *   data: {
     *     // ... data to create a Chii_person_fields
     *   }
     * })
     * 
    **/
    create<T extends chii_person_fieldsCreateArgs>(
      args: SelectSubset<T, chii_person_fieldsCreateArgs>
    ): Prisma__chii_person_fieldsClient<chii_person_fieldsGetPayload<T>>

    /**
     * Create many Chii_person_fields.
     *     @param {chii_person_fieldsCreateManyArgs} args - Arguments to create many Chii_person_fields.
     *     @example
     *     // Create many Chii_person_fields
     *     const chii_person_fields = await prisma.chii_person_fields.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_person_fieldsCreateManyArgs>(
      args?: SelectSubset<T, chii_person_fieldsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_person_fields.
     * @param {chii_person_fieldsDeleteArgs} args - Arguments to delete one Chii_person_fields.
     * @example
     * // Delete one Chii_person_fields
     * const Chii_person_fields = await prisma.chii_person_fields.delete({
     *   where: {
     *     // ... filter to delete one Chii_person_fields
     *   }
     * })
     * 
    **/
    delete<T extends chii_person_fieldsDeleteArgs>(
      args: SelectSubset<T, chii_person_fieldsDeleteArgs>
    ): Prisma__chii_person_fieldsClient<chii_person_fieldsGetPayload<T>>

    /**
     * Update one Chii_person_fields.
     * @param {chii_person_fieldsUpdateArgs} args - Arguments to update one Chii_person_fields.
     * @example
     * // Update one Chii_person_fields
     * const chii_person_fields = await prisma.chii_person_fields.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_person_fieldsUpdateArgs>(
      args: SelectSubset<T, chii_person_fieldsUpdateArgs>
    ): Prisma__chii_person_fieldsClient<chii_person_fieldsGetPayload<T>>

    /**
     * Delete zero or more Chii_person_fields.
     * @param {chii_person_fieldsDeleteManyArgs} args - Arguments to filter Chii_person_fields to delete.
     * @example
     * // Delete a few Chii_person_fields
     * const { count } = await prisma.chii_person_fields.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_person_fieldsDeleteManyArgs>(
      args?: SelectSubset<T, chii_person_fieldsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_person_fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_person_fieldsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_person_fields
     * const chii_person_fields = await prisma.chii_person_fields.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_person_fieldsUpdateManyArgs>(
      args: SelectSubset<T, chii_person_fieldsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_person_fields.
     * @param {chii_person_fieldsUpsertArgs} args - Arguments to update or create a Chii_person_fields.
     * @example
     * // Update or create a Chii_person_fields
     * const chii_person_fields = await prisma.chii_person_fields.upsert({
     *   create: {
     *     // ... data to create a Chii_person_fields
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_person_fields we want to update
     *   }
     * })
    **/
    upsert<T extends chii_person_fieldsUpsertArgs>(
      args: SelectSubset<T, chii_person_fieldsUpsertArgs>
    ): Prisma__chii_person_fieldsClient<chii_person_fieldsGetPayload<T>>

    /**
     * Count the number of Chii_person_fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_person_fieldsCountArgs} args - Arguments to filter Chii_person_fields to count.
     * @example
     * // Count the number of Chii_person_fields
     * const count = await prisma.chii_person_fields.count({
     *   where: {
     *     // ... the filter for the Chii_person_fields we want to count
     *   }
     * })
    **/
    count<T extends chii_person_fieldsCountArgs>(
      args?: Subset<T, chii_person_fieldsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_person_fieldsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_person_fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_person_fieldsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_person_fieldsAggregateArgs>(args: Subset<T, Chii_person_fieldsAggregateArgs>): PrismaPromise<GetChii_person_fieldsAggregateType<T>>

    /**
     * Group by Chii_person_fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_person_fieldsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_person_fieldsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_person_fieldsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_person_fieldsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_person_fieldsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_person_fieldsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_person_fields.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_person_fieldsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_person_fields base type for findUnique actions
   */
  export type chii_person_fieldsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_person_fields
     * 
    **/
    select?: chii_person_fieldsSelect | null
    /**
     * Filter, which chii_person_fields to fetch.
     * 
    **/
    where: chii_person_fieldsWhereUniqueInput
  }

  /**
   * chii_person_fields: findUnique
   */
  export interface chii_person_fieldsFindUniqueArgs extends chii_person_fieldsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_person_fields findUniqueOrThrow
   */
  export type chii_person_fieldsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_person_fields
     * 
    **/
    select?: chii_person_fieldsSelect | null
    /**
     * Filter, which chii_person_fields to fetch.
     * 
    **/
    where: chii_person_fieldsWhereUniqueInput
  }


  /**
   * chii_person_fields base type for findFirst actions
   */
  export type chii_person_fieldsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_person_fields
     * 
    **/
    select?: chii_person_fieldsSelect | null
    /**
     * Filter, which chii_person_fields to fetch.
     * 
    **/
    where?: chii_person_fieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_person_fields to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_person_fieldsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_person_fields.
     * 
    **/
    cursor?: chii_person_fieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_person_fields from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_person_fields.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_person_fields.
     * 
    **/
    distinct?: Enumerable<Chii_person_fieldsScalarFieldEnum>
  }

  /**
   * chii_person_fields: findFirst
   */
  export interface chii_person_fieldsFindFirstArgs extends chii_person_fieldsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_person_fields findFirstOrThrow
   */
  export type chii_person_fieldsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_person_fields
     * 
    **/
    select?: chii_person_fieldsSelect | null
    /**
     * Filter, which chii_person_fields to fetch.
     * 
    **/
    where?: chii_person_fieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_person_fields to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_person_fieldsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_person_fields.
     * 
    **/
    cursor?: chii_person_fieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_person_fields from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_person_fields.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_person_fields.
     * 
    **/
    distinct?: Enumerable<Chii_person_fieldsScalarFieldEnum>
  }


  /**
   * chii_person_fields findMany
   */
  export type chii_person_fieldsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_person_fields
     * 
    **/
    select?: chii_person_fieldsSelect | null
    /**
     * Filter, which chii_person_fields to fetch.
     * 
    **/
    where?: chii_person_fieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_person_fields to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_person_fieldsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_person_fields.
     * 
    **/
    cursor?: chii_person_fieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_person_fields from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_person_fields.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_person_fieldsScalarFieldEnum>
  }


  /**
   * chii_person_fields create
   */
  export type chii_person_fieldsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_person_fields
     * 
    **/
    select?: chii_person_fieldsSelect | null
    /**
     * The data needed to create a chii_person_fields.
     * 
    **/
    data: XOR<chii_person_fieldsCreateInput, chii_person_fieldsUncheckedCreateInput>
  }


  /**
   * chii_person_fields createMany
   */
  export type chii_person_fieldsCreateManyArgs = {
    /**
     * The data used to create many chii_person_fields.
     * 
    **/
    data: Enumerable<chii_person_fieldsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_person_fields update
   */
  export type chii_person_fieldsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_person_fields
     * 
    **/
    select?: chii_person_fieldsSelect | null
    /**
     * The data needed to update a chii_person_fields.
     * 
    **/
    data: XOR<chii_person_fieldsUpdateInput, chii_person_fieldsUncheckedUpdateInput>
    /**
     * Choose, which chii_person_fields to update.
     * 
    **/
    where: chii_person_fieldsWhereUniqueInput
  }


  /**
   * chii_person_fields updateMany
   */
  export type chii_person_fieldsUpdateManyArgs = {
    /**
     * The data used to update chii_person_fields.
     * 
    **/
    data: XOR<chii_person_fieldsUpdateManyMutationInput, chii_person_fieldsUncheckedUpdateManyInput>
    /**
     * Filter which chii_person_fields to update
     * 
    **/
    where?: chii_person_fieldsWhereInput
  }


  /**
   * chii_person_fields upsert
   */
  export type chii_person_fieldsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_person_fields
     * 
    **/
    select?: chii_person_fieldsSelect | null
    /**
     * The filter to search for the chii_person_fields to update in case it exists.
     * 
    **/
    where: chii_person_fieldsWhereUniqueInput
    /**
     * In case the chii_person_fields found by the `where` argument doesn't exist, create a new chii_person_fields with this data.
     * 
    **/
    create: XOR<chii_person_fieldsCreateInput, chii_person_fieldsUncheckedCreateInput>
    /**
     * In case the chii_person_fields was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_person_fieldsUpdateInput, chii_person_fieldsUncheckedUpdateInput>
  }


  /**
   * chii_person_fields delete
   */
  export type chii_person_fieldsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_person_fields
     * 
    **/
    select?: chii_person_fieldsSelect | null
    /**
     * Filter which chii_person_fields to delete.
     * 
    **/
    where: chii_person_fieldsWhereUniqueInput
  }


  /**
   * chii_person_fields deleteMany
   */
  export type chii_person_fieldsDeleteManyArgs = {
    /**
     * Filter which chii_person_fields to delete
     * 
    **/
    where?: chii_person_fieldsWhereInput
  }


  /**
   * chii_person_fields without action
   */
  export type chii_person_fieldsArgs = {
    /**
     * Select specific fields to fetch from the chii_person_fields
     * 
    **/
    select?: chii_person_fieldsSelect | null
  }



  /**
   * Model chii_persons
   */


  export type AggregateChii_persons = {
    _count: Chii_personsCountAggregateOutputType | null
    _avg: Chii_personsAvgAggregateOutputType | null
    _sum: Chii_personsSumAggregateOutputType | null
    _min: Chii_personsMinAggregateOutputType | null
    _max: Chii_personsMaxAggregateOutputType | null
  }

  export type Chii_personsAvgAggregateOutputType = {
    prsn_id: number | null
    prsn_type: number | null
    prsn_writer: number | null
    prsn_illustrator: number | null
    prsn_comment: number | null
    prsn_collects: number | null
    prsn_dateline: number | null
    prsn_lastpost: number | null
    prsn_lock: number | null
    prsn_anidb_id: number | null
    prsn_ban: number | null
    prsn_redirect: number | null
  }

  export type Chii_personsSumAggregateOutputType = {
    prsn_id: number | null
    prsn_type: number | null
    prsn_writer: number | null
    prsn_illustrator: number | null
    prsn_comment: number | null
    prsn_collects: number | null
    prsn_dateline: number | null
    prsn_lastpost: number | null
    prsn_lock: number | null
    prsn_anidb_id: number | null
    prsn_ban: number | null
    prsn_redirect: number | null
  }

  export type Chii_personsMinAggregateOutputType = {
    prsn_id: number | null
    prsn_name: string | null
    prsn_type: number | null
    prsn_infobox: string | null
    prsn_producer: boolean | null
    prsn_mangaka: boolean | null
    prsn_artist: boolean | null
    prsn_seiyu: boolean | null
    prsn_writer: number | null
    prsn_illustrator: number | null
    prsn_actor: boolean | null
    prsn_summary: string | null
    prsn_img: string | null
    prsn_img_anidb: string | null
    prsn_comment: number | null
    prsn_collects: number | null
    prsn_dateline: number | null
    prsn_lastpost: number | null
    prsn_lock: number | null
    prsn_anidb_id: number | null
    prsn_ban: number | null
    prsn_redirect: number | null
    prsn_nsfw: boolean | null
  }

  export type Chii_personsMaxAggregateOutputType = {
    prsn_id: number | null
    prsn_name: string | null
    prsn_type: number | null
    prsn_infobox: string | null
    prsn_producer: boolean | null
    prsn_mangaka: boolean | null
    prsn_artist: boolean | null
    prsn_seiyu: boolean | null
    prsn_writer: number | null
    prsn_illustrator: number | null
    prsn_actor: boolean | null
    prsn_summary: string | null
    prsn_img: string | null
    prsn_img_anidb: string | null
    prsn_comment: number | null
    prsn_collects: number | null
    prsn_dateline: number | null
    prsn_lastpost: number | null
    prsn_lock: number | null
    prsn_anidb_id: number | null
    prsn_ban: number | null
    prsn_redirect: number | null
    prsn_nsfw: boolean | null
  }

  export type Chii_personsCountAggregateOutputType = {
    prsn_id: number
    prsn_name: number
    prsn_type: number
    prsn_infobox: number
    prsn_producer: number
    prsn_mangaka: number
    prsn_artist: number
    prsn_seiyu: number
    prsn_writer: number
    prsn_illustrator: number
    prsn_actor: number
    prsn_summary: number
    prsn_img: number
    prsn_img_anidb: number
    prsn_comment: number
    prsn_collects: number
    prsn_dateline: number
    prsn_lastpost: number
    prsn_lock: number
    prsn_anidb_id: number
    prsn_ban: number
    prsn_redirect: number
    prsn_nsfw: number
    _all: number
  }


  export type Chii_personsAvgAggregateInputType = {
    prsn_id?: true
    prsn_type?: true
    prsn_writer?: true
    prsn_illustrator?: true
    prsn_comment?: true
    prsn_collects?: true
    prsn_dateline?: true
    prsn_lastpost?: true
    prsn_lock?: true
    prsn_anidb_id?: true
    prsn_ban?: true
    prsn_redirect?: true
  }

  export type Chii_personsSumAggregateInputType = {
    prsn_id?: true
    prsn_type?: true
    prsn_writer?: true
    prsn_illustrator?: true
    prsn_comment?: true
    prsn_collects?: true
    prsn_dateline?: true
    prsn_lastpost?: true
    prsn_lock?: true
    prsn_anidb_id?: true
    prsn_ban?: true
    prsn_redirect?: true
  }

  export type Chii_personsMinAggregateInputType = {
    prsn_id?: true
    prsn_name?: true
    prsn_type?: true
    prsn_infobox?: true
    prsn_producer?: true
    prsn_mangaka?: true
    prsn_artist?: true
    prsn_seiyu?: true
    prsn_writer?: true
    prsn_illustrator?: true
    prsn_actor?: true
    prsn_summary?: true
    prsn_img?: true
    prsn_img_anidb?: true
    prsn_comment?: true
    prsn_collects?: true
    prsn_dateline?: true
    prsn_lastpost?: true
    prsn_lock?: true
    prsn_anidb_id?: true
    prsn_ban?: true
    prsn_redirect?: true
    prsn_nsfw?: true
  }

  export type Chii_personsMaxAggregateInputType = {
    prsn_id?: true
    prsn_name?: true
    prsn_type?: true
    prsn_infobox?: true
    prsn_producer?: true
    prsn_mangaka?: true
    prsn_artist?: true
    prsn_seiyu?: true
    prsn_writer?: true
    prsn_illustrator?: true
    prsn_actor?: true
    prsn_summary?: true
    prsn_img?: true
    prsn_img_anidb?: true
    prsn_comment?: true
    prsn_collects?: true
    prsn_dateline?: true
    prsn_lastpost?: true
    prsn_lock?: true
    prsn_anidb_id?: true
    prsn_ban?: true
    prsn_redirect?: true
    prsn_nsfw?: true
  }

  export type Chii_personsCountAggregateInputType = {
    prsn_id?: true
    prsn_name?: true
    prsn_type?: true
    prsn_infobox?: true
    prsn_producer?: true
    prsn_mangaka?: true
    prsn_artist?: true
    prsn_seiyu?: true
    prsn_writer?: true
    prsn_illustrator?: true
    prsn_actor?: true
    prsn_summary?: true
    prsn_img?: true
    prsn_img_anidb?: true
    prsn_comment?: true
    prsn_collects?: true
    prsn_dateline?: true
    prsn_lastpost?: true
    prsn_lock?: true
    prsn_anidb_id?: true
    prsn_ban?: true
    prsn_redirect?: true
    prsn_nsfw?: true
    _all?: true
  }

  export type Chii_personsAggregateArgs = {
    /**
     * Filter which chii_persons to aggregate.
     * 
    **/
    where?: chii_personsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_persons to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_personsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_personsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_persons from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_persons.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_persons
    **/
    _count?: true | Chii_personsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_personsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_personsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_personsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_personsMaxAggregateInputType
  }

  export type GetChii_personsAggregateType<T extends Chii_personsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_persons]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_persons[P]>
      : GetScalarType<T[P], AggregateChii_persons[P]>
  }




  export type Chii_personsGroupByArgs = {
    where?: chii_personsWhereInput
    orderBy?: Enumerable<chii_personsOrderByWithAggregationInput>
    by: Array<Chii_personsScalarFieldEnum>
    having?: chii_personsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_personsCountAggregateInputType | true
    _avg?: Chii_personsAvgAggregateInputType
    _sum?: Chii_personsSumAggregateInputType
    _min?: Chii_personsMinAggregateInputType
    _max?: Chii_personsMaxAggregateInputType
  }


  export type Chii_personsGroupByOutputType = {
    prsn_id: number
    prsn_name: string
    prsn_type: number
    prsn_infobox: string
    prsn_producer: boolean
    prsn_mangaka: boolean
    prsn_artist: boolean
    prsn_seiyu: boolean
    prsn_writer: number
    prsn_illustrator: number
    prsn_actor: boolean
    prsn_summary: string
    prsn_img: string
    prsn_img_anidb: string
    prsn_comment: number
    prsn_collects: number
    prsn_dateline: number
    prsn_lastpost: number
    prsn_lock: number
    prsn_anidb_id: number
    prsn_ban: number
    prsn_redirect: number
    prsn_nsfw: boolean
    _count: Chii_personsCountAggregateOutputType | null
    _avg: Chii_personsAvgAggregateOutputType | null
    _sum: Chii_personsSumAggregateOutputType | null
    _min: Chii_personsMinAggregateOutputType | null
    _max: Chii_personsMaxAggregateOutputType | null
  }

  type GetChii_personsGroupByPayload<T extends Chii_personsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_personsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_personsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_personsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_personsGroupByOutputType[P]>
        }
      >
    >


  export type chii_personsSelect = {
    prsn_id?: boolean
    prsn_name?: boolean
    prsn_type?: boolean
    prsn_infobox?: boolean
    prsn_producer?: boolean
    prsn_mangaka?: boolean
    prsn_artist?: boolean
    prsn_seiyu?: boolean
    prsn_writer?: boolean
    prsn_illustrator?: boolean
    prsn_actor?: boolean
    prsn_summary?: boolean
    prsn_img?: boolean
    prsn_img_anidb?: boolean
    prsn_comment?: boolean
    prsn_collects?: boolean
    prsn_dateline?: boolean
    prsn_lastpost?: boolean
    prsn_lock?: boolean
    prsn_anidb_id?: boolean
    prsn_ban?: boolean
    prsn_redirect?: boolean
    prsn_nsfw?: boolean
  }


  export type chii_personsGetPayload<S extends boolean | null | undefined | chii_personsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_persons :
    S extends undefined ? never :
    S extends { include: any } & (chii_personsArgs | chii_personsFindManyArgs)
    ? chii_persons 
    : S extends { select: any } & (chii_personsArgs | chii_personsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_persons ? chii_persons[P] : never
  } 
      : chii_persons


  type chii_personsCountArgs = Merge<
    Omit<chii_personsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_personsCountAggregateInputType | true
    }
  >

  export interface chii_personsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_persons that matches the filter.
     * @param {chii_personsFindUniqueArgs} args - Arguments to find a Chii_persons
     * @example
     * // Get one Chii_persons
     * const chii_persons = await prisma.chii_persons.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_personsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_personsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_persons'> extends True ? Prisma__chii_personsClient<chii_personsGetPayload<T>> : Prisma__chii_personsClient<chii_personsGetPayload<T> | null, null>

    /**
     * Find one Chii_persons that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_personsFindUniqueOrThrowArgs} args - Arguments to find a Chii_persons
     * @example
     * // Get one Chii_persons
     * const chii_persons = await prisma.chii_persons.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_personsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_personsFindUniqueOrThrowArgs>
    ): Prisma__chii_personsClient<chii_personsGetPayload<T>>

    /**
     * Find the first Chii_persons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_personsFindFirstArgs} args - Arguments to find a Chii_persons
     * @example
     * // Get one Chii_persons
     * const chii_persons = await prisma.chii_persons.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_personsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_personsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_persons'> extends True ? Prisma__chii_personsClient<chii_personsGetPayload<T>> : Prisma__chii_personsClient<chii_personsGetPayload<T> | null, null>

    /**
     * Find the first Chii_persons that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_personsFindFirstOrThrowArgs} args - Arguments to find a Chii_persons
     * @example
     * // Get one Chii_persons
     * const chii_persons = await prisma.chii_persons.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_personsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_personsFindFirstOrThrowArgs>
    ): Prisma__chii_personsClient<chii_personsGetPayload<T>>

    /**
     * Find zero or more Chii_persons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_personsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_persons
     * const chii_persons = await prisma.chii_persons.findMany()
     * 
     * // Get first 10 Chii_persons
     * const chii_persons = await prisma.chii_persons.findMany({ take: 10 })
     * 
     * // Only select the `prsn_id`
     * const chii_personsWithPrsn_idOnly = await prisma.chii_persons.findMany({ select: { prsn_id: true } })
     * 
    **/
    findMany<T extends chii_personsFindManyArgs>(
      args?: SelectSubset<T, chii_personsFindManyArgs>
    ): PrismaPromise<Array<chii_personsGetPayload<T>>>

    /**
     * Create a Chii_persons.
     * @param {chii_personsCreateArgs} args - Arguments to create a Chii_persons.
     * @example
     * // Create one Chii_persons
     * const Chii_persons = await prisma.chii_persons.create({
     *   data: {
     *     // ... data to create a Chii_persons
     *   }
     * })
     * 
    **/
    create<T extends chii_personsCreateArgs>(
      args: SelectSubset<T, chii_personsCreateArgs>
    ): Prisma__chii_personsClient<chii_personsGetPayload<T>>

    /**
     * Create many Chii_persons.
     *     @param {chii_personsCreateManyArgs} args - Arguments to create many Chii_persons.
     *     @example
     *     // Create many Chii_persons
     *     const chii_persons = await prisma.chii_persons.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_personsCreateManyArgs>(
      args?: SelectSubset<T, chii_personsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_persons.
     * @param {chii_personsDeleteArgs} args - Arguments to delete one Chii_persons.
     * @example
     * // Delete one Chii_persons
     * const Chii_persons = await prisma.chii_persons.delete({
     *   where: {
     *     // ... filter to delete one Chii_persons
     *   }
     * })
     * 
    **/
    delete<T extends chii_personsDeleteArgs>(
      args: SelectSubset<T, chii_personsDeleteArgs>
    ): Prisma__chii_personsClient<chii_personsGetPayload<T>>

    /**
     * Update one Chii_persons.
     * @param {chii_personsUpdateArgs} args - Arguments to update one Chii_persons.
     * @example
     * // Update one Chii_persons
     * const chii_persons = await prisma.chii_persons.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_personsUpdateArgs>(
      args: SelectSubset<T, chii_personsUpdateArgs>
    ): Prisma__chii_personsClient<chii_personsGetPayload<T>>

    /**
     * Delete zero or more Chii_persons.
     * @param {chii_personsDeleteManyArgs} args - Arguments to filter Chii_persons to delete.
     * @example
     * // Delete a few Chii_persons
     * const { count } = await prisma.chii_persons.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_personsDeleteManyArgs>(
      args?: SelectSubset<T, chii_personsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_persons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_personsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_persons
     * const chii_persons = await prisma.chii_persons.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_personsUpdateManyArgs>(
      args: SelectSubset<T, chii_personsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_persons.
     * @param {chii_personsUpsertArgs} args - Arguments to update or create a Chii_persons.
     * @example
     * // Update or create a Chii_persons
     * const chii_persons = await prisma.chii_persons.upsert({
     *   create: {
     *     // ... data to create a Chii_persons
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_persons we want to update
     *   }
     * })
    **/
    upsert<T extends chii_personsUpsertArgs>(
      args: SelectSubset<T, chii_personsUpsertArgs>
    ): Prisma__chii_personsClient<chii_personsGetPayload<T>>

    /**
     * Count the number of Chii_persons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_personsCountArgs} args - Arguments to filter Chii_persons to count.
     * @example
     * // Count the number of Chii_persons
     * const count = await prisma.chii_persons.count({
     *   where: {
     *     // ... the filter for the Chii_persons we want to count
     *   }
     * })
    **/
    count<T extends chii_personsCountArgs>(
      args?: Subset<T, chii_personsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_personsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_persons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_personsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_personsAggregateArgs>(args: Subset<T, Chii_personsAggregateArgs>): PrismaPromise<GetChii_personsAggregateType<T>>

    /**
     * Group by Chii_persons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_personsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_personsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_personsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_personsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_personsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_personsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_persons.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_personsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_persons base type for findUnique actions
   */
  export type chii_personsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_persons
     * 
    **/
    select?: chii_personsSelect | null
    /**
     * Filter, which chii_persons to fetch.
     * 
    **/
    where: chii_personsWhereUniqueInput
  }

  /**
   * chii_persons: findUnique
   */
  export interface chii_personsFindUniqueArgs extends chii_personsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_persons findUniqueOrThrow
   */
  export type chii_personsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_persons
     * 
    **/
    select?: chii_personsSelect | null
    /**
     * Filter, which chii_persons to fetch.
     * 
    **/
    where: chii_personsWhereUniqueInput
  }


  /**
   * chii_persons base type for findFirst actions
   */
  export type chii_personsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_persons
     * 
    **/
    select?: chii_personsSelect | null
    /**
     * Filter, which chii_persons to fetch.
     * 
    **/
    where?: chii_personsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_persons to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_personsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_persons.
     * 
    **/
    cursor?: chii_personsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_persons from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_persons.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_persons.
     * 
    **/
    distinct?: Enumerable<Chii_personsScalarFieldEnum>
  }

  /**
   * chii_persons: findFirst
   */
  export interface chii_personsFindFirstArgs extends chii_personsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_persons findFirstOrThrow
   */
  export type chii_personsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_persons
     * 
    **/
    select?: chii_personsSelect | null
    /**
     * Filter, which chii_persons to fetch.
     * 
    **/
    where?: chii_personsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_persons to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_personsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_persons.
     * 
    **/
    cursor?: chii_personsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_persons from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_persons.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_persons.
     * 
    **/
    distinct?: Enumerable<Chii_personsScalarFieldEnum>
  }


  /**
   * chii_persons findMany
   */
  export type chii_personsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_persons
     * 
    **/
    select?: chii_personsSelect | null
    /**
     * Filter, which chii_persons to fetch.
     * 
    **/
    where?: chii_personsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_persons to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_personsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_persons.
     * 
    **/
    cursor?: chii_personsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_persons from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_persons.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_personsScalarFieldEnum>
  }


  /**
   * chii_persons create
   */
  export type chii_personsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_persons
     * 
    **/
    select?: chii_personsSelect | null
    /**
     * The data needed to create a chii_persons.
     * 
    **/
    data: XOR<chii_personsCreateInput, chii_personsUncheckedCreateInput>
  }


  /**
   * chii_persons createMany
   */
  export type chii_personsCreateManyArgs = {
    /**
     * The data used to create many chii_persons.
     * 
    **/
    data: Enumerable<chii_personsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_persons update
   */
  export type chii_personsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_persons
     * 
    **/
    select?: chii_personsSelect | null
    /**
     * The data needed to update a chii_persons.
     * 
    **/
    data: XOR<chii_personsUpdateInput, chii_personsUncheckedUpdateInput>
    /**
     * Choose, which chii_persons to update.
     * 
    **/
    where: chii_personsWhereUniqueInput
  }


  /**
   * chii_persons updateMany
   */
  export type chii_personsUpdateManyArgs = {
    /**
     * The data used to update chii_persons.
     * 
    **/
    data: XOR<chii_personsUpdateManyMutationInput, chii_personsUncheckedUpdateManyInput>
    /**
     * Filter which chii_persons to update
     * 
    **/
    where?: chii_personsWhereInput
  }


  /**
   * chii_persons upsert
   */
  export type chii_personsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_persons
     * 
    **/
    select?: chii_personsSelect | null
    /**
     * The filter to search for the chii_persons to update in case it exists.
     * 
    **/
    where: chii_personsWhereUniqueInput
    /**
     * In case the chii_persons found by the `where` argument doesn't exist, create a new chii_persons with this data.
     * 
    **/
    create: XOR<chii_personsCreateInput, chii_personsUncheckedCreateInput>
    /**
     * In case the chii_persons was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_personsUpdateInput, chii_personsUncheckedUpdateInput>
  }


  /**
   * chii_persons delete
   */
  export type chii_personsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_persons
     * 
    **/
    select?: chii_personsSelect | null
    /**
     * Filter which chii_persons to delete.
     * 
    **/
    where: chii_personsWhereUniqueInput
  }


  /**
   * chii_persons deleteMany
   */
  export type chii_personsDeleteManyArgs = {
    /**
     * Filter which chii_persons to delete
     * 
    **/
    where?: chii_personsWhereInput
  }


  /**
   * chii_persons without action
   */
  export type chii_personsArgs = {
    /**
     * Select specific fields to fetch from the chii_persons
     * 
    **/
    select?: chii_personsSelect | null
  }



  /**
   * Model chii_prsn_comments
   */


  export type AggregateChii_prsn_comments = {
    _count: Chii_prsn_commentsCountAggregateOutputType | null
    _avg: Chii_prsn_commentsAvgAggregateOutputType | null
    _sum: Chii_prsn_commentsSumAggregateOutputType | null
    _min: Chii_prsn_commentsMinAggregateOutputType | null
    _max: Chii_prsn_commentsMaxAggregateOutputType | null
  }

  export type Chii_prsn_commentsAvgAggregateOutputType = {
    prsn_pst_id: number | null
    prsn_pst_mid: number | null
    prsn_pst_uid: number | null
    prsn_pst_related: number | null
    prsn_pst_dateline: number | null
  }

  export type Chii_prsn_commentsSumAggregateOutputType = {
    prsn_pst_id: number | null
    prsn_pst_mid: number | null
    prsn_pst_uid: number | null
    prsn_pst_related: number | null
    prsn_pst_dateline: number | null
  }

  export type Chii_prsn_commentsMinAggregateOutputType = {
    prsn_pst_id: number | null
    prsn_pst_mid: number | null
    prsn_pst_uid: number | null
    prsn_pst_related: number | null
    prsn_pst_dateline: number | null
    prsn_pst_content: string | null
  }

  export type Chii_prsn_commentsMaxAggregateOutputType = {
    prsn_pst_id: number | null
    prsn_pst_mid: number | null
    prsn_pst_uid: number | null
    prsn_pst_related: number | null
    prsn_pst_dateline: number | null
    prsn_pst_content: string | null
  }

  export type Chii_prsn_commentsCountAggregateOutputType = {
    prsn_pst_id: number
    prsn_pst_mid: number
    prsn_pst_uid: number
    prsn_pst_related: number
    prsn_pst_dateline: number
    prsn_pst_content: number
    _all: number
  }


  export type Chii_prsn_commentsAvgAggregateInputType = {
    prsn_pst_id?: true
    prsn_pst_mid?: true
    prsn_pst_uid?: true
    prsn_pst_related?: true
    prsn_pst_dateline?: true
  }

  export type Chii_prsn_commentsSumAggregateInputType = {
    prsn_pst_id?: true
    prsn_pst_mid?: true
    prsn_pst_uid?: true
    prsn_pst_related?: true
    prsn_pst_dateline?: true
  }

  export type Chii_prsn_commentsMinAggregateInputType = {
    prsn_pst_id?: true
    prsn_pst_mid?: true
    prsn_pst_uid?: true
    prsn_pst_related?: true
    prsn_pst_dateline?: true
    prsn_pst_content?: true
  }

  export type Chii_prsn_commentsMaxAggregateInputType = {
    prsn_pst_id?: true
    prsn_pst_mid?: true
    prsn_pst_uid?: true
    prsn_pst_related?: true
    prsn_pst_dateline?: true
    prsn_pst_content?: true
  }

  export type Chii_prsn_commentsCountAggregateInputType = {
    prsn_pst_id?: true
    prsn_pst_mid?: true
    prsn_pst_uid?: true
    prsn_pst_related?: true
    prsn_pst_dateline?: true
    prsn_pst_content?: true
    _all?: true
  }

  export type Chii_prsn_commentsAggregateArgs = {
    /**
     * Filter which chii_prsn_comments to aggregate.
     * 
    **/
    where?: chii_prsn_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_prsn_comments to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_prsn_commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_prsn_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_prsn_comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_prsn_comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_prsn_comments
    **/
    _count?: true | Chii_prsn_commentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_prsn_commentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_prsn_commentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_prsn_commentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_prsn_commentsMaxAggregateInputType
  }

  export type GetChii_prsn_commentsAggregateType<T extends Chii_prsn_commentsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_prsn_comments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_prsn_comments[P]>
      : GetScalarType<T[P], AggregateChii_prsn_comments[P]>
  }




  export type Chii_prsn_commentsGroupByArgs = {
    where?: chii_prsn_commentsWhereInput
    orderBy?: Enumerable<chii_prsn_commentsOrderByWithAggregationInput>
    by: Array<Chii_prsn_commentsScalarFieldEnum>
    having?: chii_prsn_commentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_prsn_commentsCountAggregateInputType | true
    _avg?: Chii_prsn_commentsAvgAggregateInputType
    _sum?: Chii_prsn_commentsSumAggregateInputType
    _min?: Chii_prsn_commentsMinAggregateInputType
    _max?: Chii_prsn_commentsMaxAggregateInputType
  }


  export type Chii_prsn_commentsGroupByOutputType = {
    prsn_pst_id: number
    prsn_pst_mid: number
    prsn_pst_uid: number
    prsn_pst_related: number
    prsn_pst_dateline: number
    prsn_pst_content: string
    _count: Chii_prsn_commentsCountAggregateOutputType | null
    _avg: Chii_prsn_commentsAvgAggregateOutputType | null
    _sum: Chii_prsn_commentsSumAggregateOutputType | null
    _min: Chii_prsn_commentsMinAggregateOutputType | null
    _max: Chii_prsn_commentsMaxAggregateOutputType | null
  }

  type GetChii_prsn_commentsGroupByPayload<T extends Chii_prsn_commentsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_prsn_commentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_prsn_commentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_prsn_commentsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_prsn_commentsGroupByOutputType[P]>
        }
      >
    >


  export type chii_prsn_commentsSelect = {
    prsn_pst_id?: boolean
    prsn_pst_mid?: boolean
    prsn_pst_uid?: boolean
    prsn_pst_related?: boolean
    prsn_pst_dateline?: boolean
    prsn_pst_content?: boolean
  }


  export type chii_prsn_commentsGetPayload<S extends boolean | null | undefined | chii_prsn_commentsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_prsn_comments :
    S extends undefined ? never :
    S extends { include: any } & (chii_prsn_commentsArgs | chii_prsn_commentsFindManyArgs)
    ? chii_prsn_comments 
    : S extends { select: any } & (chii_prsn_commentsArgs | chii_prsn_commentsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_prsn_comments ? chii_prsn_comments[P] : never
  } 
      : chii_prsn_comments


  type chii_prsn_commentsCountArgs = Merge<
    Omit<chii_prsn_commentsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_prsn_commentsCountAggregateInputType | true
    }
  >

  export interface chii_prsn_commentsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_prsn_comments that matches the filter.
     * @param {chii_prsn_commentsFindUniqueArgs} args - Arguments to find a Chii_prsn_comments
     * @example
     * // Get one Chii_prsn_comments
     * const chii_prsn_comments = await prisma.chii_prsn_comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_prsn_commentsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_prsn_commentsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_prsn_comments'> extends True ? Prisma__chii_prsn_commentsClient<chii_prsn_commentsGetPayload<T>> : Prisma__chii_prsn_commentsClient<chii_prsn_commentsGetPayload<T> | null, null>

    /**
     * Find one Chii_prsn_comments that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_prsn_commentsFindUniqueOrThrowArgs} args - Arguments to find a Chii_prsn_comments
     * @example
     * // Get one Chii_prsn_comments
     * const chii_prsn_comments = await prisma.chii_prsn_comments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_prsn_commentsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_prsn_commentsFindUniqueOrThrowArgs>
    ): Prisma__chii_prsn_commentsClient<chii_prsn_commentsGetPayload<T>>

    /**
     * Find the first Chii_prsn_comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_prsn_commentsFindFirstArgs} args - Arguments to find a Chii_prsn_comments
     * @example
     * // Get one Chii_prsn_comments
     * const chii_prsn_comments = await prisma.chii_prsn_comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_prsn_commentsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_prsn_commentsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_prsn_comments'> extends True ? Prisma__chii_prsn_commentsClient<chii_prsn_commentsGetPayload<T>> : Prisma__chii_prsn_commentsClient<chii_prsn_commentsGetPayload<T> | null, null>

    /**
     * Find the first Chii_prsn_comments that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_prsn_commentsFindFirstOrThrowArgs} args - Arguments to find a Chii_prsn_comments
     * @example
     * // Get one Chii_prsn_comments
     * const chii_prsn_comments = await prisma.chii_prsn_comments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_prsn_commentsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_prsn_commentsFindFirstOrThrowArgs>
    ): Prisma__chii_prsn_commentsClient<chii_prsn_commentsGetPayload<T>>

    /**
     * Find zero or more Chii_prsn_comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_prsn_commentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_prsn_comments
     * const chii_prsn_comments = await prisma.chii_prsn_comments.findMany()
     * 
     * // Get first 10 Chii_prsn_comments
     * const chii_prsn_comments = await prisma.chii_prsn_comments.findMany({ take: 10 })
     * 
     * // Only select the `prsn_pst_id`
     * const chii_prsn_commentsWithPrsn_pst_idOnly = await prisma.chii_prsn_comments.findMany({ select: { prsn_pst_id: true } })
     * 
    **/
    findMany<T extends chii_prsn_commentsFindManyArgs>(
      args?: SelectSubset<T, chii_prsn_commentsFindManyArgs>
    ): PrismaPromise<Array<chii_prsn_commentsGetPayload<T>>>

    /**
     * Create a Chii_prsn_comments.
     * @param {chii_prsn_commentsCreateArgs} args - Arguments to create a Chii_prsn_comments.
     * @example
     * // Create one Chii_prsn_comments
     * const Chii_prsn_comments = await prisma.chii_prsn_comments.create({
     *   data: {
     *     // ... data to create a Chii_prsn_comments
     *   }
     * })
     * 
    **/
    create<T extends chii_prsn_commentsCreateArgs>(
      args: SelectSubset<T, chii_prsn_commentsCreateArgs>
    ): Prisma__chii_prsn_commentsClient<chii_prsn_commentsGetPayload<T>>

    /**
     * Create many Chii_prsn_comments.
     *     @param {chii_prsn_commentsCreateManyArgs} args - Arguments to create many Chii_prsn_comments.
     *     @example
     *     // Create many Chii_prsn_comments
     *     const chii_prsn_comments = await prisma.chii_prsn_comments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_prsn_commentsCreateManyArgs>(
      args?: SelectSubset<T, chii_prsn_commentsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_prsn_comments.
     * @param {chii_prsn_commentsDeleteArgs} args - Arguments to delete one Chii_prsn_comments.
     * @example
     * // Delete one Chii_prsn_comments
     * const Chii_prsn_comments = await prisma.chii_prsn_comments.delete({
     *   where: {
     *     // ... filter to delete one Chii_prsn_comments
     *   }
     * })
     * 
    **/
    delete<T extends chii_prsn_commentsDeleteArgs>(
      args: SelectSubset<T, chii_prsn_commentsDeleteArgs>
    ): Prisma__chii_prsn_commentsClient<chii_prsn_commentsGetPayload<T>>

    /**
     * Update one Chii_prsn_comments.
     * @param {chii_prsn_commentsUpdateArgs} args - Arguments to update one Chii_prsn_comments.
     * @example
     * // Update one Chii_prsn_comments
     * const chii_prsn_comments = await prisma.chii_prsn_comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_prsn_commentsUpdateArgs>(
      args: SelectSubset<T, chii_prsn_commentsUpdateArgs>
    ): Prisma__chii_prsn_commentsClient<chii_prsn_commentsGetPayload<T>>

    /**
     * Delete zero or more Chii_prsn_comments.
     * @param {chii_prsn_commentsDeleteManyArgs} args - Arguments to filter Chii_prsn_comments to delete.
     * @example
     * // Delete a few Chii_prsn_comments
     * const { count } = await prisma.chii_prsn_comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_prsn_commentsDeleteManyArgs>(
      args?: SelectSubset<T, chii_prsn_commentsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_prsn_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_prsn_commentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_prsn_comments
     * const chii_prsn_comments = await prisma.chii_prsn_comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_prsn_commentsUpdateManyArgs>(
      args: SelectSubset<T, chii_prsn_commentsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_prsn_comments.
     * @param {chii_prsn_commentsUpsertArgs} args - Arguments to update or create a Chii_prsn_comments.
     * @example
     * // Update or create a Chii_prsn_comments
     * const chii_prsn_comments = await prisma.chii_prsn_comments.upsert({
     *   create: {
     *     // ... data to create a Chii_prsn_comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_prsn_comments we want to update
     *   }
     * })
    **/
    upsert<T extends chii_prsn_commentsUpsertArgs>(
      args: SelectSubset<T, chii_prsn_commentsUpsertArgs>
    ): Prisma__chii_prsn_commentsClient<chii_prsn_commentsGetPayload<T>>

    /**
     * Count the number of Chii_prsn_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_prsn_commentsCountArgs} args - Arguments to filter Chii_prsn_comments to count.
     * @example
     * // Count the number of Chii_prsn_comments
     * const count = await prisma.chii_prsn_comments.count({
     *   where: {
     *     // ... the filter for the Chii_prsn_comments we want to count
     *   }
     * })
    **/
    count<T extends chii_prsn_commentsCountArgs>(
      args?: Subset<T, chii_prsn_commentsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_prsn_commentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_prsn_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_prsn_commentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_prsn_commentsAggregateArgs>(args: Subset<T, Chii_prsn_commentsAggregateArgs>): PrismaPromise<GetChii_prsn_commentsAggregateType<T>>

    /**
     * Group by Chii_prsn_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_prsn_commentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_prsn_commentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_prsn_commentsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_prsn_commentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_prsn_commentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_prsn_commentsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_prsn_comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_prsn_commentsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_prsn_comments base type for findUnique actions
   */
  export type chii_prsn_commentsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_prsn_comments
     * 
    **/
    select?: chii_prsn_commentsSelect | null
    /**
     * Filter, which chii_prsn_comments to fetch.
     * 
    **/
    where: chii_prsn_commentsWhereUniqueInput
  }

  /**
   * chii_prsn_comments: findUnique
   */
  export interface chii_prsn_commentsFindUniqueArgs extends chii_prsn_commentsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_prsn_comments findUniqueOrThrow
   */
  export type chii_prsn_commentsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_prsn_comments
     * 
    **/
    select?: chii_prsn_commentsSelect | null
    /**
     * Filter, which chii_prsn_comments to fetch.
     * 
    **/
    where: chii_prsn_commentsWhereUniqueInput
  }


  /**
   * chii_prsn_comments base type for findFirst actions
   */
  export type chii_prsn_commentsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_prsn_comments
     * 
    **/
    select?: chii_prsn_commentsSelect | null
    /**
     * Filter, which chii_prsn_comments to fetch.
     * 
    **/
    where?: chii_prsn_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_prsn_comments to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_prsn_commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_prsn_comments.
     * 
    **/
    cursor?: chii_prsn_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_prsn_comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_prsn_comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_prsn_comments.
     * 
    **/
    distinct?: Enumerable<Chii_prsn_commentsScalarFieldEnum>
  }

  /**
   * chii_prsn_comments: findFirst
   */
  export interface chii_prsn_commentsFindFirstArgs extends chii_prsn_commentsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_prsn_comments findFirstOrThrow
   */
  export type chii_prsn_commentsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_prsn_comments
     * 
    **/
    select?: chii_prsn_commentsSelect | null
    /**
     * Filter, which chii_prsn_comments to fetch.
     * 
    **/
    where?: chii_prsn_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_prsn_comments to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_prsn_commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_prsn_comments.
     * 
    **/
    cursor?: chii_prsn_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_prsn_comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_prsn_comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_prsn_comments.
     * 
    **/
    distinct?: Enumerable<Chii_prsn_commentsScalarFieldEnum>
  }


  /**
   * chii_prsn_comments findMany
   */
  export type chii_prsn_commentsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_prsn_comments
     * 
    **/
    select?: chii_prsn_commentsSelect | null
    /**
     * Filter, which chii_prsn_comments to fetch.
     * 
    **/
    where?: chii_prsn_commentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_prsn_comments to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_prsn_commentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_prsn_comments.
     * 
    **/
    cursor?: chii_prsn_commentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_prsn_comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_prsn_comments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_prsn_commentsScalarFieldEnum>
  }


  /**
   * chii_prsn_comments create
   */
  export type chii_prsn_commentsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_prsn_comments
     * 
    **/
    select?: chii_prsn_commentsSelect | null
    /**
     * The data needed to create a chii_prsn_comments.
     * 
    **/
    data: XOR<chii_prsn_commentsCreateInput, chii_prsn_commentsUncheckedCreateInput>
  }


  /**
   * chii_prsn_comments createMany
   */
  export type chii_prsn_commentsCreateManyArgs = {
    /**
     * The data used to create many chii_prsn_comments.
     * 
    **/
    data: Enumerable<chii_prsn_commentsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_prsn_comments update
   */
  export type chii_prsn_commentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_prsn_comments
     * 
    **/
    select?: chii_prsn_commentsSelect | null
    /**
     * The data needed to update a chii_prsn_comments.
     * 
    **/
    data: XOR<chii_prsn_commentsUpdateInput, chii_prsn_commentsUncheckedUpdateInput>
    /**
     * Choose, which chii_prsn_comments to update.
     * 
    **/
    where: chii_prsn_commentsWhereUniqueInput
  }


  /**
   * chii_prsn_comments updateMany
   */
  export type chii_prsn_commentsUpdateManyArgs = {
    /**
     * The data used to update chii_prsn_comments.
     * 
    **/
    data: XOR<chii_prsn_commentsUpdateManyMutationInput, chii_prsn_commentsUncheckedUpdateManyInput>
    /**
     * Filter which chii_prsn_comments to update
     * 
    **/
    where?: chii_prsn_commentsWhereInput
  }


  /**
   * chii_prsn_comments upsert
   */
  export type chii_prsn_commentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_prsn_comments
     * 
    **/
    select?: chii_prsn_commentsSelect | null
    /**
     * The filter to search for the chii_prsn_comments to update in case it exists.
     * 
    **/
    where: chii_prsn_commentsWhereUniqueInput
    /**
     * In case the chii_prsn_comments found by the `where` argument doesn't exist, create a new chii_prsn_comments with this data.
     * 
    **/
    create: XOR<chii_prsn_commentsCreateInput, chii_prsn_commentsUncheckedCreateInput>
    /**
     * In case the chii_prsn_comments was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_prsn_commentsUpdateInput, chii_prsn_commentsUncheckedUpdateInput>
  }


  /**
   * chii_prsn_comments delete
   */
  export type chii_prsn_commentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_prsn_comments
     * 
    **/
    select?: chii_prsn_commentsSelect | null
    /**
     * Filter which chii_prsn_comments to delete.
     * 
    **/
    where: chii_prsn_commentsWhereUniqueInput
  }


  /**
   * chii_prsn_comments deleteMany
   */
  export type chii_prsn_commentsDeleteManyArgs = {
    /**
     * Filter which chii_prsn_comments to delete
     * 
    **/
    where?: chii_prsn_commentsWhereInput
  }


  /**
   * chii_prsn_comments without action
   */
  export type chii_prsn_commentsArgs = {
    /**
     * Select specific fields to fetch from the chii_prsn_comments
     * 
    **/
    select?: chii_prsn_commentsSelect | null
  }



  /**
   * Model chii_rev_history
   */


  export type AggregateChii_rev_history = {
    _count: Chii_rev_historyCountAggregateOutputType | null
    _avg: Chii_rev_historyAvgAggregateOutputType | null
    _sum: Chii_rev_historySumAggregateOutputType | null
    _min: Chii_rev_historyMinAggregateOutputType | null
    _max: Chii_rev_historyMaxAggregateOutputType | null
  }

  export type Chii_rev_historyAvgAggregateOutputType = {
    rev_id: number | null
    rev_type: number | null
    rev_mid: number | null
    rev_text_id: number | null
    rev_dateline: number | null
    rev_creator: number | null
  }

  export type Chii_rev_historySumAggregateOutputType = {
    rev_id: number | null
    rev_type: number | null
    rev_mid: number | null
    rev_text_id: number | null
    rev_dateline: number | null
    rev_creator: number | null
  }

  export type Chii_rev_historyMinAggregateOutputType = {
    rev_id: number | null
    rev_type: number | null
    rev_mid: number | null
    rev_text_id: number | null
    rev_dateline: number | null
    rev_creator: number | null
    rev_edit_summary: string | null
  }

  export type Chii_rev_historyMaxAggregateOutputType = {
    rev_id: number | null
    rev_type: number | null
    rev_mid: number | null
    rev_text_id: number | null
    rev_dateline: number | null
    rev_creator: number | null
    rev_edit_summary: string | null
  }

  export type Chii_rev_historyCountAggregateOutputType = {
    rev_id: number
    rev_type: number
    rev_mid: number
    rev_text_id: number
    rev_dateline: number
    rev_creator: number
    rev_edit_summary: number
    _all: number
  }


  export type Chii_rev_historyAvgAggregateInputType = {
    rev_id?: true
    rev_type?: true
    rev_mid?: true
    rev_text_id?: true
    rev_dateline?: true
    rev_creator?: true
  }

  export type Chii_rev_historySumAggregateInputType = {
    rev_id?: true
    rev_type?: true
    rev_mid?: true
    rev_text_id?: true
    rev_dateline?: true
    rev_creator?: true
  }

  export type Chii_rev_historyMinAggregateInputType = {
    rev_id?: true
    rev_type?: true
    rev_mid?: true
    rev_text_id?: true
    rev_dateline?: true
    rev_creator?: true
    rev_edit_summary?: true
  }

  export type Chii_rev_historyMaxAggregateInputType = {
    rev_id?: true
    rev_type?: true
    rev_mid?: true
    rev_text_id?: true
    rev_dateline?: true
    rev_creator?: true
    rev_edit_summary?: true
  }

  export type Chii_rev_historyCountAggregateInputType = {
    rev_id?: true
    rev_type?: true
    rev_mid?: true
    rev_text_id?: true
    rev_dateline?: true
    rev_creator?: true
    rev_edit_summary?: true
    _all?: true
  }

  export type Chii_rev_historyAggregateArgs = {
    /**
     * Filter which chii_rev_history to aggregate.
     * 
    **/
    where?: chii_rev_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_rev_histories to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_rev_historyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_rev_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_rev_histories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_rev_histories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_rev_histories
    **/
    _count?: true | Chii_rev_historyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_rev_historyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_rev_historySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_rev_historyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_rev_historyMaxAggregateInputType
  }

  export type GetChii_rev_historyAggregateType<T extends Chii_rev_historyAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_rev_history]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_rev_history[P]>
      : GetScalarType<T[P], AggregateChii_rev_history[P]>
  }




  export type Chii_rev_historyGroupByArgs = {
    where?: chii_rev_historyWhereInput
    orderBy?: Enumerable<chii_rev_historyOrderByWithAggregationInput>
    by: Array<Chii_rev_historyScalarFieldEnum>
    having?: chii_rev_historyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_rev_historyCountAggregateInputType | true
    _avg?: Chii_rev_historyAvgAggregateInputType
    _sum?: Chii_rev_historySumAggregateInputType
    _min?: Chii_rev_historyMinAggregateInputType
    _max?: Chii_rev_historyMaxAggregateInputType
  }


  export type Chii_rev_historyGroupByOutputType = {
    rev_id: number
    rev_type: number
    rev_mid: number
    rev_text_id: number
    rev_dateline: number
    rev_creator: number
    rev_edit_summary: string
    _count: Chii_rev_historyCountAggregateOutputType | null
    _avg: Chii_rev_historyAvgAggregateOutputType | null
    _sum: Chii_rev_historySumAggregateOutputType | null
    _min: Chii_rev_historyMinAggregateOutputType | null
    _max: Chii_rev_historyMaxAggregateOutputType | null
  }

  type GetChii_rev_historyGroupByPayload<T extends Chii_rev_historyGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_rev_historyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_rev_historyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_rev_historyGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_rev_historyGroupByOutputType[P]>
        }
      >
    >


  export type chii_rev_historySelect = {
    rev_id?: boolean
    rev_type?: boolean
    rev_mid?: boolean
    rev_text_id?: boolean
    rev_dateline?: boolean
    rev_creator?: boolean
    rev_edit_summary?: boolean
  }


  export type chii_rev_historyGetPayload<S extends boolean | null | undefined | chii_rev_historyArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_rev_history :
    S extends undefined ? never :
    S extends { include: any } & (chii_rev_historyArgs | chii_rev_historyFindManyArgs)
    ? chii_rev_history 
    : S extends { select: any } & (chii_rev_historyArgs | chii_rev_historyFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_rev_history ? chii_rev_history[P] : never
  } 
      : chii_rev_history


  type chii_rev_historyCountArgs = Merge<
    Omit<chii_rev_historyFindManyArgs, 'select' | 'include'> & {
      select?: Chii_rev_historyCountAggregateInputType | true
    }
  >

  export interface chii_rev_historyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_rev_history that matches the filter.
     * @param {chii_rev_historyFindUniqueArgs} args - Arguments to find a Chii_rev_history
     * @example
     * // Get one Chii_rev_history
     * const chii_rev_history = await prisma.chii_rev_history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_rev_historyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_rev_historyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_rev_history'> extends True ? Prisma__chii_rev_historyClient<chii_rev_historyGetPayload<T>> : Prisma__chii_rev_historyClient<chii_rev_historyGetPayload<T> | null, null>

    /**
     * Find one Chii_rev_history that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_rev_historyFindUniqueOrThrowArgs} args - Arguments to find a Chii_rev_history
     * @example
     * // Get one Chii_rev_history
     * const chii_rev_history = await prisma.chii_rev_history.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_rev_historyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_rev_historyFindUniqueOrThrowArgs>
    ): Prisma__chii_rev_historyClient<chii_rev_historyGetPayload<T>>

    /**
     * Find the first Chii_rev_history that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_rev_historyFindFirstArgs} args - Arguments to find a Chii_rev_history
     * @example
     * // Get one Chii_rev_history
     * const chii_rev_history = await prisma.chii_rev_history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_rev_historyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_rev_historyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_rev_history'> extends True ? Prisma__chii_rev_historyClient<chii_rev_historyGetPayload<T>> : Prisma__chii_rev_historyClient<chii_rev_historyGetPayload<T> | null, null>

    /**
     * Find the first Chii_rev_history that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_rev_historyFindFirstOrThrowArgs} args - Arguments to find a Chii_rev_history
     * @example
     * // Get one Chii_rev_history
     * const chii_rev_history = await prisma.chii_rev_history.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_rev_historyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_rev_historyFindFirstOrThrowArgs>
    ): Prisma__chii_rev_historyClient<chii_rev_historyGetPayload<T>>

    /**
     * Find zero or more Chii_rev_histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_rev_historyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_rev_histories
     * const chii_rev_histories = await prisma.chii_rev_history.findMany()
     * 
     * // Get first 10 Chii_rev_histories
     * const chii_rev_histories = await prisma.chii_rev_history.findMany({ take: 10 })
     * 
     * // Only select the `rev_id`
     * const chii_rev_historyWithRev_idOnly = await prisma.chii_rev_history.findMany({ select: { rev_id: true } })
     * 
    **/
    findMany<T extends chii_rev_historyFindManyArgs>(
      args?: SelectSubset<T, chii_rev_historyFindManyArgs>
    ): PrismaPromise<Array<chii_rev_historyGetPayload<T>>>

    /**
     * Create a Chii_rev_history.
     * @param {chii_rev_historyCreateArgs} args - Arguments to create a Chii_rev_history.
     * @example
     * // Create one Chii_rev_history
     * const Chii_rev_history = await prisma.chii_rev_history.create({
     *   data: {
     *     // ... data to create a Chii_rev_history
     *   }
     * })
     * 
    **/
    create<T extends chii_rev_historyCreateArgs>(
      args: SelectSubset<T, chii_rev_historyCreateArgs>
    ): Prisma__chii_rev_historyClient<chii_rev_historyGetPayload<T>>

    /**
     * Create many Chii_rev_histories.
     *     @param {chii_rev_historyCreateManyArgs} args - Arguments to create many Chii_rev_histories.
     *     @example
     *     // Create many Chii_rev_histories
     *     const chii_rev_history = await prisma.chii_rev_history.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_rev_historyCreateManyArgs>(
      args?: SelectSubset<T, chii_rev_historyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_rev_history.
     * @param {chii_rev_historyDeleteArgs} args - Arguments to delete one Chii_rev_history.
     * @example
     * // Delete one Chii_rev_history
     * const Chii_rev_history = await prisma.chii_rev_history.delete({
     *   where: {
     *     // ... filter to delete one Chii_rev_history
     *   }
     * })
     * 
    **/
    delete<T extends chii_rev_historyDeleteArgs>(
      args: SelectSubset<T, chii_rev_historyDeleteArgs>
    ): Prisma__chii_rev_historyClient<chii_rev_historyGetPayload<T>>

    /**
     * Update one Chii_rev_history.
     * @param {chii_rev_historyUpdateArgs} args - Arguments to update one Chii_rev_history.
     * @example
     * // Update one Chii_rev_history
     * const chii_rev_history = await prisma.chii_rev_history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_rev_historyUpdateArgs>(
      args: SelectSubset<T, chii_rev_historyUpdateArgs>
    ): Prisma__chii_rev_historyClient<chii_rev_historyGetPayload<T>>

    /**
     * Delete zero or more Chii_rev_histories.
     * @param {chii_rev_historyDeleteManyArgs} args - Arguments to filter Chii_rev_histories to delete.
     * @example
     * // Delete a few Chii_rev_histories
     * const { count } = await prisma.chii_rev_history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_rev_historyDeleteManyArgs>(
      args?: SelectSubset<T, chii_rev_historyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_rev_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_rev_historyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_rev_histories
     * const chii_rev_history = await prisma.chii_rev_history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_rev_historyUpdateManyArgs>(
      args: SelectSubset<T, chii_rev_historyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_rev_history.
     * @param {chii_rev_historyUpsertArgs} args - Arguments to update or create a Chii_rev_history.
     * @example
     * // Update or create a Chii_rev_history
     * const chii_rev_history = await prisma.chii_rev_history.upsert({
     *   create: {
     *     // ... data to create a Chii_rev_history
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_rev_history we want to update
     *   }
     * })
    **/
    upsert<T extends chii_rev_historyUpsertArgs>(
      args: SelectSubset<T, chii_rev_historyUpsertArgs>
    ): Prisma__chii_rev_historyClient<chii_rev_historyGetPayload<T>>

    /**
     * Count the number of Chii_rev_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_rev_historyCountArgs} args - Arguments to filter Chii_rev_histories to count.
     * @example
     * // Count the number of Chii_rev_histories
     * const count = await prisma.chii_rev_history.count({
     *   where: {
     *     // ... the filter for the Chii_rev_histories we want to count
     *   }
     * })
    **/
    count<T extends chii_rev_historyCountArgs>(
      args?: Subset<T, chii_rev_historyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_rev_historyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_rev_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_rev_historyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_rev_historyAggregateArgs>(args: Subset<T, Chii_rev_historyAggregateArgs>): PrismaPromise<GetChii_rev_historyAggregateType<T>>

    /**
     * Group by Chii_rev_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_rev_historyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_rev_historyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_rev_historyGroupByArgs['orderBy'] }
        : { orderBy?: Chii_rev_historyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_rev_historyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_rev_historyGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_rev_history.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_rev_historyClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_rev_history base type for findUnique actions
   */
  export type chii_rev_historyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_rev_history
     * 
    **/
    select?: chii_rev_historySelect | null
    /**
     * Filter, which chii_rev_history to fetch.
     * 
    **/
    where: chii_rev_historyWhereUniqueInput
  }

  /**
   * chii_rev_history: findUnique
   */
  export interface chii_rev_historyFindUniqueArgs extends chii_rev_historyFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_rev_history findUniqueOrThrow
   */
  export type chii_rev_historyFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_rev_history
     * 
    **/
    select?: chii_rev_historySelect | null
    /**
     * Filter, which chii_rev_history to fetch.
     * 
    **/
    where: chii_rev_historyWhereUniqueInput
  }


  /**
   * chii_rev_history base type for findFirst actions
   */
  export type chii_rev_historyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_rev_history
     * 
    **/
    select?: chii_rev_historySelect | null
    /**
     * Filter, which chii_rev_history to fetch.
     * 
    **/
    where?: chii_rev_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_rev_histories to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_rev_historyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_rev_histories.
     * 
    **/
    cursor?: chii_rev_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_rev_histories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_rev_histories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_rev_histories.
     * 
    **/
    distinct?: Enumerable<Chii_rev_historyScalarFieldEnum>
  }

  /**
   * chii_rev_history: findFirst
   */
  export interface chii_rev_historyFindFirstArgs extends chii_rev_historyFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_rev_history findFirstOrThrow
   */
  export type chii_rev_historyFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_rev_history
     * 
    **/
    select?: chii_rev_historySelect | null
    /**
     * Filter, which chii_rev_history to fetch.
     * 
    **/
    where?: chii_rev_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_rev_histories to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_rev_historyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_rev_histories.
     * 
    **/
    cursor?: chii_rev_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_rev_histories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_rev_histories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_rev_histories.
     * 
    **/
    distinct?: Enumerable<Chii_rev_historyScalarFieldEnum>
  }


  /**
   * chii_rev_history findMany
   */
  export type chii_rev_historyFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_rev_history
     * 
    **/
    select?: chii_rev_historySelect | null
    /**
     * Filter, which chii_rev_histories to fetch.
     * 
    **/
    where?: chii_rev_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_rev_histories to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_rev_historyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_rev_histories.
     * 
    **/
    cursor?: chii_rev_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_rev_histories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_rev_histories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_rev_historyScalarFieldEnum>
  }


  /**
   * chii_rev_history create
   */
  export type chii_rev_historyCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_rev_history
     * 
    **/
    select?: chii_rev_historySelect | null
    /**
     * The data needed to create a chii_rev_history.
     * 
    **/
    data: XOR<chii_rev_historyCreateInput, chii_rev_historyUncheckedCreateInput>
  }


  /**
   * chii_rev_history createMany
   */
  export type chii_rev_historyCreateManyArgs = {
    /**
     * The data used to create many chii_rev_histories.
     * 
    **/
    data: Enumerable<chii_rev_historyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_rev_history update
   */
  export type chii_rev_historyUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_rev_history
     * 
    **/
    select?: chii_rev_historySelect | null
    /**
     * The data needed to update a chii_rev_history.
     * 
    **/
    data: XOR<chii_rev_historyUpdateInput, chii_rev_historyUncheckedUpdateInput>
    /**
     * Choose, which chii_rev_history to update.
     * 
    **/
    where: chii_rev_historyWhereUniqueInput
  }


  /**
   * chii_rev_history updateMany
   */
  export type chii_rev_historyUpdateManyArgs = {
    /**
     * The data used to update chii_rev_histories.
     * 
    **/
    data: XOR<chii_rev_historyUpdateManyMutationInput, chii_rev_historyUncheckedUpdateManyInput>
    /**
     * Filter which chii_rev_histories to update
     * 
    **/
    where?: chii_rev_historyWhereInput
  }


  /**
   * chii_rev_history upsert
   */
  export type chii_rev_historyUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_rev_history
     * 
    **/
    select?: chii_rev_historySelect | null
    /**
     * The filter to search for the chii_rev_history to update in case it exists.
     * 
    **/
    where: chii_rev_historyWhereUniqueInput
    /**
     * In case the chii_rev_history found by the `where` argument doesn't exist, create a new chii_rev_history with this data.
     * 
    **/
    create: XOR<chii_rev_historyCreateInput, chii_rev_historyUncheckedCreateInput>
    /**
     * In case the chii_rev_history was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_rev_historyUpdateInput, chii_rev_historyUncheckedUpdateInput>
  }


  /**
   * chii_rev_history delete
   */
  export type chii_rev_historyDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_rev_history
     * 
    **/
    select?: chii_rev_historySelect | null
    /**
     * Filter which chii_rev_history to delete.
     * 
    **/
    where: chii_rev_historyWhereUniqueInput
  }


  /**
   * chii_rev_history deleteMany
   */
  export type chii_rev_historyDeleteManyArgs = {
    /**
     * Filter which chii_rev_histories to delete
     * 
    **/
    where?: chii_rev_historyWhereInput
  }


  /**
   * chii_rev_history without action
   */
  export type chii_rev_historyArgs = {
    /**
     * Select specific fields to fetch from the chii_rev_history
     * 
    **/
    select?: chii_rev_historySelect | null
  }



  /**
   * Model chii_rev_text
   */


  export type AggregateChii_rev_text = {
    _count: Chii_rev_textCountAggregateOutputType | null
    _avg: Chii_rev_textAvgAggregateOutputType | null
    _sum: Chii_rev_textSumAggregateOutputType | null
    _min: Chii_rev_textMinAggregateOutputType | null
    _max: Chii_rev_textMaxAggregateOutputType | null
  }

  export type Chii_rev_textAvgAggregateOutputType = {
    rev_text_id: number | null
  }

  export type Chii_rev_textSumAggregateOutputType = {
    rev_text_id: number | null
  }

  export type Chii_rev_textMinAggregateOutputType = {
    rev_text_id: number | null
    rev_text: Buffer | null
  }

  export type Chii_rev_textMaxAggregateOutputType = {
    rev_text_id: number | null
    rev_text: Buffer | null
  }

  export type Chii_rev_textCountAggregateOutputType = {
    rev_text_id: number
    rev_text: number
    _all: number
  }


  export type Chii_rev_textAvgAggregateInputType = {
    rev_text_id?: true
  }

  export type Chii_rev_textSumAggregateInputType = {
    rev_text_id?: true
  }

  export type Chii_rev_textMinAggregateInputType = {
    rev_text_id?: true
    rev_text?: true
  }

  export type Chii_rev_textMaxAggregateInputType = {
    rev_text_id?: true
    rev_text?: true
  }

  export type Chii_rev_textCountAggregateInputType = {
    rev_text_id?: true
    rev_text?: true
    _all?: true
  }

  export type Chii_rev_textAggregateArgs = {
    /**
     * Filter which chii_rev_text to aggregate.
     * 
    **/
    where?: chii_rev_textWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_rev_texts to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_rev_textOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_rev_textWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_rev_texts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_rev_texts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_rev_texts
    **/
    _count?: true | Chii_rev_textCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_rev_textAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_rev_textSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_rev_textMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_rev_textMaxAggregateInputType
  }

  export type GetChii_rev_textAggregateType<T extends Chii_rev_textAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_rev_text]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_rev_text[P]>
      : GetScalarType<T[P], AggregateChii_rev_text[P]>
  }




  export type Chii_rev_textGroupByArgs = {
    where?: chii_rev_textWhereInput
    orderBy?: Enumerable<chii_rev_textOrderByWithAggregationInput>
    by: Array<Chii_rev_textScalarFieldEnum>
    having?: chii_rev_textScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_rev_textCountAggregateInputType | true
    _avg?: Chii_rev_textAvgAggregateInputType
    _sum?: Chii_rev_textSumAggregateInputType
    _min?: Chii_rev_textMinAggregateInputType
    _max?: Chii_rev_textMaxAggregateInputType
  }


  export type Chii_rev_textGroupByOutputType = {
    rev_text_id: number
    rev_text: Buffer
    _count: Chii_rev_textCountAggregateOutputType | null
    _avg: Chii_rev_textAvgAggregateOutputType | null
    _sum: Chii_rev_textSumAggregateOutputType | null
    _min: Chii_rev_textMinAggregateOutputType | null
    _max: Chii_rev_textMaxAggregateOutputType | null
  }

  type GetChii_rev_textGroupByPayload<T extends Chii_rev_textGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_rev_textGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_rev_textGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_rev_textGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_rev_textGroupByOutputType[P]>
        }
      >
    >


  export type chii_rev_textSelect = {
    rev_text_id?: boolean
    rev_text?: boolean
  }


  export type chii_rev_textGetPayload<S extends boolean | null | undefined | chii_rev_textArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_rev_text :
    S extends undefined ? never :
    S extends { include: any } & (chii_rev_textArgs | chii_rev_textFindManyArgs)
    ? chii_rev_text 
    : S extends { select: any } & (chii_rev_textArgs | chii_rev_textFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_rev_text ? chii_rev_text[P] : never
  } 
      : chii_rev_text


  type chii_rev_textCountArgs = Merge<
    Omit<chii_rev_textFindManyArgs, 'select' | 'include'> & {
      select?: Chii_rev_textCountAggregateInputType | true
    }
  >

  export interface chii_rev_textDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_rev_text that matches the filter.
     * @param {chii_rev_textFindUniqueArgs} args - Arguments to find a Chii_rev_text
     * @example
     * // Get one Chii_rev_text
     * const chii_rev_text = await prisma.chii_rev_text.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_rev_textFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_rev_textFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_rev_text'> extends True ? Prisma__chii_rev_textClient<chii_rev_textGetPayload<T>> : Prisma__chii_rev_textClient<chii_rev_textGetPayload<T> | null, null>

    /**
     * Find one Chii_rev_text that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_rev_textFindUniqueOrThrowArgs} args - Arguments to find a Chii_rev_text
     * @example
     * // Get one Chii_rev_text
     * const chii_rev_text = await prisma.chii_rev_text.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_rev_textFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_rev_textFindUniqueOrThrowArgs>
    ): Prisma__chii_rev_textClient<chii_rev_textGetPayload<T>>

    /**
     * Find the first Chii_rev_text that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_rev_textFindFirstArgs} args - Arguments to find a Chii_rev_text
     * @example
     * // Get one Chii_rev_text
     * const chii_rev_text = await prisma.chii_rev_text.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_rev_textFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_rev_textFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_rev_text'> extends True ? Prisma__chii_rev_textClient<chii_rev_textGetPayload<T>> : Prisma__chii_rev_textClient<chii_rev_textGetPayload<T> | null, null>

    /**
     * Find the first Chii_rev_text that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_rev_textFindFirstOrThrowArgs} args - Arguments to find a Chii_rev_text
     * @example
     * // Get one Chii_rev_text
     * const chii_rev_text = await prisma.chii_rev_text.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_rev_textFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_rev_textFindFirstOrThrowArgs>
    ): Prisma__chii_rev_textClient<chii_rev_textGetPayload<T>>

    /**
     * Find zero or more Chii_rev_texts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_rev_textFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_rev_texts
     * const chii_rev_texts = await prisma.chii_rev_text.findMany()
     * 
     * // Get first 10 Chii_rev_texts
     * const chii_rev_texts = await prisma.chii_rev_text.findMany({ take: 10 })
     * 
     * // Only select the `rev_text_id`
     * const chii_rev_textWithRev_text_idOnly = await prisma.chii_rev_text.findMany({ select: { rev_text_id: true } })
     * 
    **/
    findMany<T extends chii_rev_textFindManyArgs>(
      args?: SelectSubset<T, chii_rev_textFindManyArgs>
    ): PrismaPromise<Array<chii_rev_textGetPayload<T>>>

    /**
     * Create a Chii_rev_text.
     * @param {chii_rev_textCreateArgs} args - Arguments to create a Chii_rev_text.
     * @example
     * // Create one Chii_rev_text
     * const Chii_rev_text = await prisma.chii_rev_text.create({
     *   data: {
     *     // ... data to create a Chii_rev_text
     *   }
     * })
     * 
    **/
    create<T extends chii_rev_textCreateArgs>(
      args: SelectSubset<T, chii_rev_textCreateArgs>
    ): Prisma__chii_rev_textClient<chii_rev_textGetPayload<T>>

    /**
     * Create many Chii_rev_texts.
     *     @param {chii_rev_textCreateManyArgs} args - Arguments to create many Chii_rev_texts.
     *     @example
     *     // Create many Chii_rev_texts
     *     const chii_rev_text = await prisma.chii_rev_text.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_rev_textCreateManyArgs>(
      args?: SelectSubset<T, chii_rev_textCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_rev_text.
     * @param {chii_rev_textDeleteArgs} args - Arguments to delete one Chii_rev_text.
     * @example
     * // Delete one Chii_rev_text
     * const Chii_rev_text = await prisma.chii_rev_text.delete({
     *   where: {
     *     // ... filter to delete one Chii_rev_text
     *   }
     * })
     * 
    **/
    delete<T extends chii_rev_textDeleteArgs>(
      args: SelectSubset<T, chii_rev_textDeleteArgs>
    ): Prisma__chii_rev_textClient<chii_rev_textGetPayload<T>>

    /**
     * Update one Chii_rev_text.
     * @param {chii_rev_textUpdateArgs} args - Arguments to update one Chii_rev_text.
     * @example
     * // Update one Chii_rev_text
     * const chii_rev_text = await prisma.chii_rev_text.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_rev_textUpdateArgs>(
      args: SelectSubset<T, chii_rev_textUpdateArgs>
    ): Prisma__chii_rev_textClient<chii_rev_textGetPayload<T>>

    /**
     * Delete zero or more Chii_rev_texts.
     * @param {chii_rev_textDeleteManyArgs} args - Arguments to filter Chii_rev_texts to delete.
     * @example
     * // Delete a few Chii_rev_texts
     * const { count } = await prisma.chii_rev_text.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_rev_textDeleteManyArgs>(
      args?: SelectSubset<T, chii_rev_textDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_rev_texts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_rev_textUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_rev_texts
     * const chii_rev_text = await prisma.chii_rev_text.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_rev_textUpdateManyArgs>(
      args: SelectSubset<T, chii_rev_textUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_rev_text.
     * @param {chii_rev_textUpsertArgs} args - Arguments to update or create a Chii_rev_text.
     * @example
     * // Update or create a Chii_rev_text
     * const chii_rev_text = await prisma.chii_rev_text.upsert({
     *   create: {
     *     // ... data to create a Chii_rev_text
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_rev_text we want to update
     *   }
     * })
    **/
    upsert<T extends chii_rev_textUpsertArgs>(
      args: SelectSubset<T, chii_rev_textUpsertArgs>
    ): Prisma__chii_rev_textClient<chii_rev_textGetPayload<T>>

    /**
     * Count the number of Chii_rev_texts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_rev_textCountArgs} args - Arguments to filter Chii_rev_texts to count.
     * @example
     * // Count the number of Chii_rev_texts
     * const count = await prisma.chii_rev_text.count({
     *   where: {
     *     // ... the filter for the Chii_rev_texts we want to count
     *   }
     * })
    **/
    count<T extends chii_rev_textCountArgs>(
      args?: Subset<T, chii_rev_textCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_rev_textCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_rev_text.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_rev_textAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_rev_textAggregateArgs>(args: Subset<T, Chii_rev_textAggregateArgs>): PrismaPromise<GetChii_rev_textAggregateType<T>>

    /**
     * Group by Chii_rev_text.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_rev_textGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_rev_textGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_rev_textGroupByArgs['orderBy'] }
        : { orderBy?: Chii_rev_textGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_rev_textGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_rev_textGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_rev_text.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_rev_textClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_rev_text base type for findUnique actions
   */
  export type chii_rev_textFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_rev_text
     * 
    **/
    select?: chii_rev_textSelect | null
    /**
     * Filter, which chii_rev_text to fetch.
     * 
    **/
    where: chii_rev_textWhereUniqueInput
  }

  /**
   * chii_rev_text: findUnique
   */
  export interface chii_rev_textFindUniqueArgs extends chii_rev_textFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_rev_text findUniqueOrThrow
   */
  export type chii_rev_textFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_rev_text
     * 
    **/
    select?: chii_rev_textSelect | null
    /**
     * Filter, which chii_rev_text to fetch.
     * 
    **/
    where: chii_rev_textWhereUniqueInput
  }


  /**
   * chii_rev_text base type for findFirst actions
   */
  export type chii_rev_textFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_rev_text
     * 
    **/
    select?: chii_rev_textSelect | null
    /**
     * Filter, which chii_rev_text to fetch.
     * 
    **/
    where?: chii_rev_textWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_rev_texts to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_rev_textOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_rev_texts.
     * 
    **/
    cursor?: chii_rev_textWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_rev_texts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_rev_texts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_rev_texts.
     * 
    **/
    distinct?: Enumerable<Chii_rev_textScalarFieldEnum>
  }

  /**
   * chii_rev_text: findFirst
   */
  export interface chii_rev_textFindFirstArgs extends chii_rev_textFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_rev_text findFirstOrThrow
   */
  export type chii_rev_textFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_rev_text
     * 
    **/
    select?: chii_rev_textSelect | null
    /**
     * Filter, which chii_rev_text to fetch.
     * 
    **/
    where?: chii_rev_textWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_rev_texts to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_rev_textOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_rev_texts.
     * 
    **/
    cursor?: chii_rev_textWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_rev_texts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_rev_texts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_rev_texts.
     * 
    **/
    distinct?: Enumerable<Chii_rev_textScalarFieldEnum>
  }


  /**
   * chii_rev_text findMany
   */
  export type chii_rev_textFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_rev_text
     * 
    **/
    select?: chii_rev_textSelect | null
    /**
     * Filter, which chii_rev_texts to fetch.
     * 
    **/
    where?: chii_rev_textWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_rev_texts to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_rev_textOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_rev_texts.
     * 
    **/
    cursor?: chii_rev_textWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_rev_texts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_rev_texts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_rev_textScalarFieldEnum>
  }


  /**
   * chii_rev_text create
   */
  export type chii_rev_textCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_rev_text
     * 
    **/
    select?: chii_rev_textSelect | null
    /**
     * The data needed to create a chii_rev_text.
     * 
    **/
    data: XOR<chii_rev_textCreateInput, chii_rev_textUncheckedCreateInput>
  }


  /**
   * chii_rev_text createMany
   */
  export type chii_rev_textCreateManyArgs = {
    /**
     * The data used to create many chii_rev_texts.
     * 
    **/
    data: Enumerable<chii_rev_textCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_rev_text update
   */
  export type chii_rev_textUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_rev_text
     * 
    **/
    select?: chii_rev_textSelect | null
    /**
     * The data needed to update a chii_rev_text.
     * 
    **/
    data: XOR<chii_rev_textUpdateInput, chii_rev_textUncheckedUpdateInput>
    /**
     * Choose, which chii_rev_text to update.
     * 
    **/
    where: chii_rev_textWhereUniqueInput
  }


  /**
   * chii_rev_text updateMany
   */
  export type chii_rev_textUpdateManyArgs = {
    /**
     * The data used to update chii_rev_texts.
     * 
    **/
    data: XOR<chii_rev_textUpdateManyMutationInput, chii_rev_textUncheckedUpdateManyInput>
    /**
     * Filter which chii_rev_texts to update
     * 
    **/
    where?: chii_rev_textWhereInput
  }


  /**
   * chii_rev_text upsert
   */
  export type chii_rev_textUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_rev_text
     * 
    **/
    select?: chii_rev_textSelect | null
    /**
     * The filter to search for the chii_rev_text to update in case it exists.
     * 
    **/
    where: chii_rev_textWhereUniqueInput
    /**
     * In case the chii_rev_text found by the `where` argument doesn't exist, create a new chii_rev_text with this data.
     * 
    **/
    create: XOR<chii_rev_textCreateInput, chii_rev_textUncheckedCreateInput>
    /**
     * In case the chii_rev_text was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_rev_textUpdateInput, chii_rev_textUncheckedUpdateInput>
  }


  /**
   * chii_rev_text delete
   */
  export type chii_rev_textDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_rev_text
     * 
    **/
    select?: chii_rev_textSelect | null
    /**
     * Filter which chii_rev_text to delete.
     * 
    **/
    where: chii_rev_textWhereUniqueInput
  }


  /**
   * chii_rev_text deleteMany
   */
  export type chii_rev_textDeleteManyArgs = {
    /**
     * Filter which chii_rev_texts to delete
     * 
    **/
    where?: chii_rev_textWhereInput
  }


  /**
   * chii_rev_text without action
   */
  export type chii_rev_textArgs = {
    /**
     * Select specific fields to fetch from the chii_rev_text
     * 
    **/
    select?: chii_rev_textSelect | null
  }



  /**
   * Model chii_subject_fields
   */


  export type AggregateChii_subject_fields = {
    _count: Chii_subject_fieldsCountAggregateOutputType | null
    _avg: Chii_subject_fieldsAvgAggregateOutputType | null
    _sum: Chii_subject_fieldsSumAggregateOutputType | null
    _min: Chii_subject_fieldsMinAggregateOutputType | null
    _max: Chii_subject_fieldsMaxAggregateOutputType | null
  }

  export type Chii_subject_fieldsAvgAggregateOutputType = {
    field_sid: number | null
    field_tid: number | null
    field_rate_1: number | null
    field_rate_2: number | null
    field_rate_3: number | null
    field_rate_4: number | null
    field_rate_5: number | null
    field_rate_6: number | null
    field_rate_7: number | null
    field_rate_8: number | null
    field_rate_9: number | null
    field_rate_10: number | null
    field_rank: number | null
    field_year: number | null
    field_mon: number | null
    field_redirect: number | null
  }

  export type Chii_subject_fieldsSumAggregateOutputType = {
    field_sid: number | null
    field_tid: number | null
    field_rate_1: number | null
    field_rate_2: number | null
    field_rate_3: number | null
    field_rate_4: number | null
    field_rate_5: number | null
    field_rate_6: number | null
    field_rate_7: number | null
    field_rate_8: number | null
    field_rate_9: number | null
    field_rate_10: number | null
    field_rank: number | null
    field_year: number | null
    field_mon: number | null
    field_redirect: number | null
  }

  export type Chii_subject_fieldsMinAggregateOutputType = {
    field_sid: number | null
    field_tid: number | null
    field_tags: string | null
    field_rate_1: number | null
    field_rate_2: number | null
    field_rate_3: number | null
    field_rate_4: number | null
    field_rate_5: number | null
    field_rate_6: number | null
    field_rate_7: number | null
    field_rate_8: number | null
    field_rate_9: number | null
    field_rate_10: number | null
    field_airtime: boolean | null
    field_rank: number | null
    field_year: number | null
    field_mon: number | null
    field_week_day: boolean | null
    field_date: Date | null
    field_redirect: number | null
  }

  export type Chii_subject_fieldsMaxAggregateOutputType = {
    field_sid: number | null
    field_tid: number | null
    field_tags: string | null
    field_rate_1: number | null
    field_rate_2: number | null
    field_rate_3: number | null
    field_rate_4: number | null
    field_rate_5: number | null
    field_rate_6: number | null
    field_rate_7: number | null
    field_rate_8: number | null
    field_rate_9: number | null
    field_rate_10: number | null
    field_airtime: boolean | null
    field_rank: number | null
    field_year: number | null
    field_mon: number | null
    field_week_day: boolean | null
    field_date: Date | null
    field_redirect: number | null
  }

  export type Chii_subject_fieldsCountAggregateOutputType = {
    field_sid: number
    field_tid: number
    field_tags: number
    field_rate_1: number
    field_rate_2: number
    field_rate_3: number
    field_rate_4: number
    field_rate_5: number
    field_rate_6: number
    field_rate_7: number
    field_rate_8: number
    field_rate_9: number
    field_rate_10: number
    field_airtime: number
    field_rank: number
    field_year: number
    field_mon: number
    field_week_day: number
    field_date: number
    field_redirect: number
    _all: number
  }


  export type Chii_subject_fieldsAvgAggregateInputType = {
    field_sid?: true
    field_tid?: true
    field_rate_1?: true
    field_rate_2?: true
    field_rate_3?: true
    field_rate_4?: true
    field_rate_5?: true
    field_rate_6?: true
    field_rate_7?: true
    field_rate_8?: true
    field_rate_9?: true
    field_rate_10?: true
    field_rank?: true
    field_year?: true
    field_mon?: true
    field_redirect?: true
  }

  export type Chii_subject_fieldsSumAggregateInputType = {
    field_sid?: true
    field_tid?: true
    field_rate_1?: true
    field_rate_2?: true
    field_rate_3?: true
    field_rate_4?: true
    field_rate_5?: true
    field_rate_6?: true
    field_rate_7?: true
    field_rate_8?: true
    field_rate_9?: true
    field_rate_10?: true
    field_rank?: true
    field_year?: true
    field_mon?: true
    field_redirect?: true
  }

  export type Chii_subject_fieldsMinAggregateInputType = {
    field_sid?: true
    field_tid?: true
    field_tags?: true
    field_rate_1?: true
    field_rate_2?: true
    field_rate_3?: true
    field_rate_4?: true
    field_rate_5?: true
    field_rate_6?: true
    field_rate_7?: true
    field_rate_8?: true
    field_rate_9?: true
    field_rate_10?: true
    field_airtime?: true
    field_rank?: true
    field_year?: true
    field_mon?: true
    field_week_day?: true
    field_date?: true
    field_redirect?: true
  }

  export type Chii_subject_fieldsMaxAggregateInputType = {
    field_sid?: true
    field_tid?: true
    field_tags?: true
    field_rate_1?: true
    field_rate_2?: true
    field_rate_3?: true
    field_rate_4?: true
    field_rate_5?: true
    field_rate_6?: true
    field_rate_7?: true
    field_rate_8?: true
    field_rate_9?: true
    field_rate_10?: true
    field_airtime?: true
    field_rank?: true
    field_year?: true
    field_mon?: true
    field_week_day?: true
    field_date?: true
    field_redirect?: true
  }

  export type Chii_subject_fieldsCountAggregateInputType = {
    field_sid?: true
    field_tid?: true
    field_tags?: true
    field_rate_1?: true
    field_rate_2?: true
    field_rate_3?: true
    field_rate_4?: true
    field_rate_5?: true
    field_rate_6?: true
    field_rate_7?: true
    field_rate_8?: true
    field_rate_9?: true
    field_rate_10?: true
    field_airtime?: true
    field_rank?: true
    field_year?: true
    field_mon?: true
    field_week_day?: true
    field_date?: true
    field_redirect?: true
    _all?: true
  }

  export type Chii_subject_fieldsAggregateArgs = {
    /**
     * Filter which chii_subject_fields to aggregate.
     * 
    **/
    where?: chii_subject_fieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_fields to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_fieldsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_subject_fieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_fields from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_fields.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_subject_fields
    **/
    _count?: true | Chii_subject_fieldsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_subject_fieldsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_subject_fieldsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_subject_fieldsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_subject_fieldsMaxAggregateInputType
  }

  export type GetChii_subject_fieldsAggregateType<T extends Chii_subject_fieldsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_subject_fields]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_subject_fields[P]>
      : GetScalarType<T[P], AggregateChii_subject_fields[P]>
  }




  export type Chii_subject_fieldsGroupByArgs = {
    where?: chii_subject_fieldsWhereInput
    orderBy?: Enumerable<chii_subject_fieldsOrderByWithAggregationInput>
    by: Array<Chii_subject_fieldsScalarFieldEnum>
    having?: chii_subject_fieldsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_subject_fieldsCountAggregateInputType | true
    _avg?: Chii_subject_fieldsAvgAggregateInputType
    _sum?: Chii_subject_fieldsSumAggregateInputType
    _min?: Chii_subject_fieldsMinAggregateInputType
    _max?: Chii_subject_fieldsMaxAggregateInputType
  }


  export type Chii_subject_fieldsGroupByOutputType = {
    field_sid: number
    field_tid: number
    field_tags: string
    field_rate_1: number
    field_rate_2: number
    field_rate_3: number
    field_rate_4: number
    field_rate_5: number
    field_rate_6: number
    field_rate_7: number
    field_rate_8: number
    field_rate_9: number
    field_rate_10: number
    field_airtime: boolean
    field_rank: number
    field_year: number
    field_mon: number
    field_week_day: boolean
    field_date: Date
    field_redirect: number
    _count: Chii_subject_fieldsCountAggregateOutputType | null
    _avg: Chii_subject_fieldsAvgAggregateOutputType | null
    _sum: Chii_subject_fieldsSumAggregateOutputType | null
    _min: Chii_subject_fieldsMinAggregateOutputType | null
    _max: Chii_subject_fieldsMaxAggregateOutputType | null
  }

  type GetChii_subject_fieldsGroupByPayload<T extends Chii_subject_fieldsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_subject_fieldsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_subject_fieldsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_subject_fieldsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_subject_fieldsGroupByOutputType[P]>
        }
      >
    >


  export type chii_subject_fieldsSelect = {
    field_sid?: boolean
    field_tid?: boolean
    field_tags?: boolean
    field_rate_1?: boolean
    field_rate_2?: boolean
    field_rate_3?: boolean
    field_rate_4?: boolean
    field_rate_5?: boolean
    field_rate_6?: boolean
    field_rate_7?: boolean
    field_rate_8?: boolean
    field_rate_9?: boolean
    field_rate_10?: boolean
    field_airtime?: boolean
    field_rank?: boolean
    field_year?: boolean
    field_mon?: boolean
    field_week_day?: boolean
    field_date?: boolean
    field_redirect?: boolean
  }


  export type chii_subject_fieldsGetPayload<S extends boolean | null | undefined | chii_subject_fieldsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_subject_fields :
    S extends undefined ? never :
    S extends { include: any } & (chii_subject_fieldsArgs | chii_subject_fieldsFindManyArgs)
    ? chii_subject_fields 
    : S extends { select: any } & (chii_subject_fieldsArgs | chii_subject_fieldsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_subject_fields ? chii_subject_fields[P] : never
  } 
      : chii_subject_fields


  type chii_subject_fieldsCountArgs = Merge<
    Omit<chii_subject_fieldsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_subject_fieldsCountAggregateInputType | true
    }
  >

  export interface chii_subject_fieldsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_subject_fields that matches the filter.
     * @param {chii_subject_fieldsFindUniqueArgs} args - Arguments to find a Chii_subject_fields
     * @example
     * // Get one Chii_subject_fields
     * const chii_subject_fields = await prisma.chii_subject_fields.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_subject_fieldsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_subject_fieldsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_subject_fields'> extends True ? Prisma__chii_subject_fieldsClient<chii_subject_fieldsGetPayload<T>> : Prisma__chii_subject_fieldsClient<chii_subject_fieldsGetPayload<T> | null, null>

    /**
     * Find one Chii_subject_fields that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_subject_fieldsFindUniqueOrThrowArgs} args - Arguments to find a Chii_subject_fields
     * @example
     * // Get one Chii_subject_fields
     * const chii_subject_fields = await prisma.chii_subject_fields.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_subject_fieldsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_subject_fieldsFindUniqueOrThrowArgs>
    ): Prisma__chii_subject_fieldsClient<chii_subject_fieldsGetPayload<T>>

    /**
     * Find the first Chii_subject_fields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_fieldsFindFirstArgs} args - Arguments to find a Chii_subject_fields
     * @example
     * // Get one Chii_subject_fields
     * const chii_subject_fields = await prisma.chii_subject_fields.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_subject_fieldsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_subject_fieldsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_subject_fields'> extends True ? Prisma__chii_subject_fieldsClient<chii_subject_fieldsGetPayload<T>> : Prisma__chii_subject_fieldsClient<chii_subject_fieldsGetPayload<T> | null, null>

    /**
     * Find the first Chii_subject_fields that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_fieldsFindFirstOrThrowArgs} args - Arguments to find a Chii_subject_fields
     * @example
     * // Get one Chii_subject_fields
     * const chii_subject_fields = await prisma.chii_subject_fields.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_subject_fieldsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_subject_fieldsFindFirstOrThrowArgs>
    ): Prisma__chii_subject_fieldsClient<chii_subject_fieldsGetPayload<T>>

    /**
     * Find zero or more Chii_subject_fields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_fieldsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_subject_fields
     * const chii_subject_fields = await prisma.chii_subject_fields.findMany()
     * 
     * // Get first 10 Chii_subject_fields
     * const chii_subject_fields = await prisma.chii_subject_fields.findMany({ take: 10 })
     * 
     * // Only select the `field_sid`
     * const chii_subject_fieldsWithField_sidOnly = await prisma.chii_subject_fields.findMany({ select: { field_sid: true } })
     * 
    **/
    findMany<T extends chii_subject_fieldsFindManyArgs>(
      args?: SelectSubset<T, chii_subject_fieldsFindManyArgs>
    ): PrismaPromise<Array<chii_subject_fieldsGetPayload<T>>>

    /**
     * Create a Chii_subject_fields.
     * @param {chii_subject_fieldsCreateArgs} args - Arguments to create a Chii_subject_fields.
     * @example
     * // Create one Chii_subject_fields
     * const Chii_subject_fields = await prisma.chii_subject_fields.create({
     *   data: {
     *     // ... data to create a Chii_subject_fields
     *   }
     * })
     * 
    **/
    create<T extends chii_subject_fieldsCreateArgs>(
      args: SelectSubset<T, chii_subject_fieldsCreateArgs>
    ): Prisma__chii_subject_fieldsClient<chii_subject_fieldsGetPayload<T>>

    /**
     * Create many Chii_subject_fields.
     *     @param {chii_subject_fieldsCreateManyArgs} args - Arguments to create many Chii_subject_fields.
     *     @example
     *     // Create many Chii_subject_fields
     *     const chii_subject_fields = await prisma.chii_subject_fields.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_subject_fieldsCreateManyArgs>(
      args?: SelectSubset<T, chii_subject_fieldsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_subject_fields.
     * @param {chii_subject_fieldsDeleteArgs} args - Arguments to delete one Chii_subject_fields.
     * @example
     * // Delete one Chii_subject_fields
     * const Chii_subject_fields = await prisma.chii_subject_fields.delete({
     *   where: {
     *     // ... filter to delete one Chii_subject_fields
     *   }
     * })
     * 
    **/
    delete<T extends chii_subject_fieldsDeleteArgs>(
      args: SelectSubset<T, chii_subject_fieldsDeleteArgs>
    ): Prisma__chii_subject_fieldsClient<chii_subject_fieldsGetPayload<T>>

    /**
     * Update one Chii_subject_fields.
     * @param {chii_subject_fieldsUpdateArgs} args - Arguments to update one Chii_subject_fields.
     * @example
     * // Update one Chii_subject_fields
     * const chii_subject_fields = await prisma.chii_subject_fields.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_subject_fieldsUpdateArgs>(
      args: SelectSubset<T, chii_subject_fieldsUpdateArgs>
    ): Prisma__chii_subject_fieldsClient<chii_subject_fieldsGetPayload<T>>

    /**
     * Delete zero or more Chii_subject_fields.
     * @param {chii_subject_fieldsDeleteManyArgs} args - Arguments to filter Chii_subject_fields to delete.
     * @example
     * // Delete a few Chii_subject_fields
     * const { count } = await prisma.chii_subject_fields.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_subject_fieldsDeleteManyArgs>(
      args?: SelectSubset<T, chii_subject_fieldsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_subject_fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_fieldsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_subject_fields
     * const chii_subject_fields = await prisma.chii_subject_fields.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_subject_fieldsUpdateManyArgs>(
      args: SelectSubset<T, chii_subject_fieldsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_subject_fields.
     * @param {chii_subject_fieldsUpsertArgs} args - Arguments to update or create a Chii_subject_fields.
     * @example
     * // Update or create a Chii_subject_fields
     * const chii_subject_fields = await prisma.chii_subject_fields.upsert({
     *   create: {
     *     // ... data to create a Chii_subject_fields
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_subject_fields we want to update
     *   }
     * })
    **/
    upsert<T extends chii_subject_fieldsUpsertArgs>(
      args: SelectSubset<T, chii_subject_fieldsUpsertArgs>
    ): Prisma__chii_subject_fieldsClient<chii_subject_fieldsGetPayload<T>>

    /**
     * Count the number of Chii_subject_fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_fieldsCountArgs} args - Arguments to filter Chii_subject_fields to count.
     * @example
     * // Count the number of Chii_subject_fields
     * const count = await prisma.chii_subject_fields.count({
     *   where: {
     *     // ... the filter for the Chii_subject_fields we want to count
     *   }
     * })
    **/
    count<T extends chii_subject_fieldsCountArgs>(
      args?: Subset<T, chii_subject_fieldsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_subject_fieldsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_subject_fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_subject_fieldsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_subject_fieldsAggregateArgs>(args: Subset<T, Chii_subject_fieldsAggregateArgs>): PrismaPromise<GetChii_subject_fieldsAggregateType<T>>

    /**
     * Group by Chii_subject_fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_subject_fieldsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_subject_fieldsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_subject_fieldsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_subject_fieldsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_subject_fieldsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_subject_fieldsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_subject_fields.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_subject_fieldsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_subject_fields base type for findUnique actions
   */
  export type chii_subject_fieldsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_subject_fields
     * 
    **/
    select?: chii_subject_fieldsSelect | null
    /**
     * Filter, which chii_subject_fields to fetch.
     * 
    **/
    where: chii_subject_fieldsWhereUniqueInput
  }

  /**
   * chii_subject_fields: findUnique
   */
  export interface chii_subject_fieldsFindUniqueArgs extends chii_subject_fieldsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_subject_fields findUniqueOrThrow
   */
  export type chii_subject_fieldsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_fields
     * 
    **/
    select?: chii_subject_fieldsSelect | null
    /**
     * Filter, which chii_subject_fields to fetch.
     * 
    **/
    where: chii_subject_fieldsWhereUniqueInput
  }


  /**
   * chii_subject_fields base type for findFirst actions
   */
  export type chii_subject_fieldsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_subject_fields
     * 
    **/
    select?: chii_subject_fieldsSelect | null
    /**
     * Filter, which chii_subject_fields to fetch.
     * 
    **/
    where?: chii_subject_fieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_fields to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_fieldsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_subject_fields.
     * 
    **/
    cursor?: chii_subject_fieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_fields from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_fields.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_subject_fields.
     * 
    **/
    distinct?: Enumerable<Chii_subject_fieldsScalarFieldEnum>
  }

  /**
   * chii_subject_fields: findFirst
   */
  export interface chii_subject_fieldsFindFirstArgs extends chii_subject_fieldsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_subject_fields findFirstOrThrow
   */
  export type chii_subject_fieldsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_fields
     * 
    **/
    select?: chii_subject_fieldsSelect | null
    /**
     * Filter, which chii_subject_fields to fetch.
     * 
    **/
    where?: chii_subject_fieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_fields to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_fieldsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_subject_fields.
     * 
    **/
    cursor?: chii_subject_fieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_fields from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_fields.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_subject_fields.
     * 
    **/
    distinct?: Enumerable<Chii_subject_fieldsScalarFieldEnum>
  }


  /**
   * chii_subject_fields findMany
   */
  export type chii_subject_fieldsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_fields
     * 
    **/
    select?: chii_subject_fieldsSelect | null
    /**
     * Filter, which chii_subject_fields to fetch.
     * 
    **/
    where?: chii_subject_fieldsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_fields to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_fieldsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_subject_fields.
     * 
    **/
    cursor?: chii_subject_fieldsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_fields from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_fields.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_subject_fieldsScalarFieldEnum>
  }


  /**
   * chii_subject_fields create
   */
  export type chii_subject_fieldsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_fields
     * 
    **/
    select?: chii_subject_fieldsSelect | null
    /**
     * The data needed to create a chii_subject_fields.
     * 
    **/
    data: XOR<chii_subject_fieldsCreateInput, chii_subject_fieldsUncheckedCreateInput>
  }


  /**
   * chii_subject_fields createMany
   */
  export type chii_subject_fieldsCreateManyArgs = {
    /**
     * The data used to create many chii_subject_fields.
     * 
    **/
    data: Enumerable<chii_subject_fieldsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_subject_fields update
   */
  export type chii_subject_fieldsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_fields
     * 
    **/
    select?: chii_subject_fieldsSelect | null
    /**
     * The data needed to update a chii_subject_fields.
     * 
    **/
    data: XOR<chii_subject_fieldsUpdateInput, chii_subject_fieldsUncheckedUpdateInput>
    /**
     * Choose, which chii_subject_fields to update.
     * 
    **/
    where: chii_subject_fieldsWhereUniqueInput
  }


  /**
   * chii_subject_fields updateMany
   */
  export type chii_subject_fieldsUpdateManyArgs = {
    /**
     * The data used to update chii_subject_fields.
     * 
    **/
    data: XOR<chii_subject_fieldsUpdateManyMutationInput, chii_subject_fieldsUncheckedUpdateManyInput>
    /**
     * Filter which chii_subject_fields to update
     * 
    **/
    where?: chii_subject_fieldsWhereInput
  }


  /**
   * chii_subject_fields upsert
   */
  export type chii_subject_fieldsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_fields
     * 
    **/
    select?: chii_subject_fieldsSelect | null
    /**
     * The filter to search for the chii_subject_fields to update in case it exists.
     * 
    **/
    where: chii_subject_fieldsWhereUniqueInput
    /**
     * In case the chii_subject_fields found by the `where` argument doesn't exist, create a new chii_subject_fields with this data.
     * 
    **/
    create: XOR<chii_subject_fieldsCreateInput, chii_subject_fieldsUncheckedCreateInput>
    /**
     * In case the chii_subject_fields was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_subject_fieldsUpdateInput, chii_subject_fieldsUncheckedUpdateInput>
  }


  /**
   * chii_subject_fields delete
   */
  export type chii_subject_fieldsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_fields
     * 
    **/
    select?: chii_subject_fieldsSelect | null
    /**
     * Filter which chii_subject_fields to delete.
     * 
    **/
    where: chii_subject_fieldsWhereUniqueInput
  }


  /**
   * chii_subject_fields deleteMany
   */
  export type chii_subject_fieldsDeleteManyArgs = {
    /**
     * Filter which chii_subject_fields to delete
     * 
    **/
    where?: chii_subject_fieldsWhereInput
  }


  /**
   * chii_subject_fields without action
   */
  export type chii_subject_fieldsArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_fields
     * 
    **/
    select?: chii_subject_fieldsSelect | null
  }



  /**
   * Model chii_subject_interests
   */


  export type AggregateChii_subject_interests = {
    _count: Chii_subject_interestsCountAggregateOutputType | null
    _avg: Chii_subject_interestsAvgAggregateOutputType | null
    _sum: Chii_subject_interestsSumAggregateOutputType | null
    _min: Chii_subject_interestsMinAggregateOutputType | null
    _max: Chii_subject_interestsMaxAggregateOutputType | null
  }

  export type Chii_subject_interestsAvgAggregateOutputType = {
    interest_id: number | null
    interest_uid: number | null
    interest_subject_id: number | null
    interest_subject_type: number | null
    interest_rate: number | null
    interest_ep_status: number | null
    interest_vol_status: number | null
    interest_wish_dateline: number | null
    interest_doing_dateline: number | null
    interest_collect_dateline: number | null
    interest_on_hold_dateline: number | null
    interest_dropped_dateline: number | null
    interest_lasttouch: number | null
  }

  export type Chii_subject_interestsSumAggregateOutputType = {
    interest_id: number | null
    interest_uid: number | null
    interest_subject_id: number | null
    interest_subject_type: number | null
    interest_rate: number | null
    interest_ep_status: number | null
    interest_vol_status: number | null
    interest_wish_dateline: number | null
    interest_doing_dateline: number | null
    interest_collect_dateline: number | null
    interest_on_hold_dateline: number | null
    interest_dropped_dateline: number | null
    interest_lasttouch: number | null
  }

  export type Chii_subject_interestsMinAggregateOutputType = {
    interest_id: number | null
    interest_uid: number | null
    interest_subject_id: number | null
    interest_subject_type: number | null
    interest_rate: number | null
    interest_type: boolean | null
    interest_has_comment: boolean | null
    interest_comment: string | null
    interest_tag: string | null
    interest_ep_status: number | null
    interest_vol_status: number | null
    interest_wish_dateline: number | null
    interest_doing_dateline: number | null
    interest_collect_dateline: number | null
    interest_on_hold_dateline: number | null
    interest_dropped_dateline: number | null
    interest_create_ip: string | null
    interest_lasttouch_ip: string | null
    interest_lasttouch: number | null
    interest_private: boolean | null
  }

  export type Chii_subject_interestsMaxAggregateOutputType = {
    interest_id: number | null
    interest_uid: number | null
    interest_subject_id: number | null
    interest_subject_type: number | null
    interest_rate: number | null
    interest_type: boolean | null
    interest_has_comment: boolean | null
    interest_comment: string | null
    interest_tag: string | null
    interest_ep_status: number | null
    interest_vol_status: number | null
    interest_wish_dateline: number | null
    interest_doing_dateline: number | null
    interest_collect_dateline: number | null
    interest_on_hold_dateline: number | null
    interest_dropped_dateline: number | null
    interest_create_ip: string | null
    interest_lasttouch_ip: string | null
    interest_lasttouch: number | null
    interest_private: boolean | null
  }

  export type Chii_subject_interestsCountAggregateOutputType = {
    interest_id: number
    interest_uid: number
    interest_subject_id: number
    interest_subject_type: number
    interest_rate: number
    interest_type: number
    interest_has_comment: number
    interest_comment: number
    interest_tag: number
    interest_ep_status: number
    interest_vol_status: number
    interest_wish_dateline: number
    interest_doing_dateline: number
    interest_collect_dateline: number
    interest_on_hold_dateline: number
    interest_dropped_dateline: number
    interest_create_ip: number
    interest_lasttouch_ip: number
    interest_lasttouch: number
    interest_private: number
    _all: number
  }


  export type Chii_subject_interestsAvgAggregateInputType = {
    interest_id?: true
    interest_uid?: true
    interest_subject_id?: true
    interest_subject_type?: true
    interest_rate?: true
    interest_ep_status?: true
    interest_vol_status?: true
    interest_wish_dateline?: true
    interest_doing_dateline?: true
    interest_collect_dateline?: true
    interest_on_hold_dateline?: true
    interest_dropped_dateline?: true
    interest_lasttouch?: true
  }

  export type Chii_subject_interestsSumAggregateInputType = {
    interest_id?: true
    interest_uid?: true
    interest_subject_id?: true
    interest_subject_type?: true
    interest_rate?: true
    interest_ep_status?: true
    interest_vol_status?: true
    interest_wish_dateline?: true
    interest_doing_dateline?: true
    interest_collect_dateline?: true
    interest_on_hold_dateline?: true
    interest_dropped_dateline?: true
    interest_lasttouch?: true
  }

  export type Chii_subject_interestsMinAggregateInputType = {
    interest_id?: true
    interest_uid?: true
    interest_subject_id?: true
    interest_subject_type?: true
    interest_rate?: true
    interest_type?: true
    interest_has_comment?: true
    interest_comment?: true
    interest_tag?: true
    interest_ep_status?: true
    interest_vol_status?: true
    interest_wish_dateline?: true
    interest_doing_dateline?: true
    interest_collect_dateline?: true
    interest_on_hold_dateline?: true
    interest_dropped_dateline?: true
    interest_create_ip?: true
    interest_lasttouch_ip?: true
    interest_lasttouch?: true
    interest_private?: true
  }

  export type Chii_subject_interestsMaxAggregateInputType = {
    interest_id?: true
    interest_uid?: true
    interest_subject_id?: true
    interest_subject_type?: true
    interest_rate?: true
    interest_type?: true
    interest_has_comment?: true
    interest_comment?: true
    interest_tag?: true
    interest_ep_status?: true
    interest_vol_status?: true
    interest_wish_dateline?: true
    interest_doing_dateline?: true
    interest_collect_dateline?: true
    interest_on_hold_dateline?: true
    interest_dropped_dateline?: true
    interest_create_ip?: true
    interest_lasttouch_ip?: true
    interest_lasttouch?: true
    interest_private?: true
  }

  export type Chii_subject_interestsCountAggregateInputType = {
    interest_id?: true
    interest_uid?: true
    interest_subject_id?: true
    interest_subject_type?: true
    interest_rate?: true
    interest_type?: true
    interest_has_comment?: true
    interest_comment?: true
    interest_tag?: true
    interest_ep_status?: true
    interest_vol_status?: true
    interest_wish_dateline?: true
    interest_doing_dateline?: true
    interest_collect_dateline?: true
    interest_on_hold_dateline?: true
    interest_dropped_dateline?: true
    interest_create_ip?: true
    interest_lasttouch_ip?: true
    interest_lasttouch?: true
    interest_private?: true
    _all?: true
  }

  export type Chii_subject_interestsAggregateArgs = {
    /**
     * Filter which chii_subject_interests to aggregate.
     * 
    **/
    where?: chii_subject_interestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_interests to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_interestsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_subject_interestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_interests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_interests.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_subject_interests
    **/
    _count?: true | Chii_subject_interestsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_subject_interestsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_subject_interestsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_subject_interestsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_subject_interestsMaxAggregateInputType
  }

  export type GetChii_subject_interestsAggregateType<T extends Chii_subject_interestsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_subject_interests]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_subject_interests[P]>
      : GetScalarType<T[P], AggregateChii_subject_interests[P]>
  }




  export type Chii_subject_interestsGroupByArgs = {
    where?: chii_subject_interestsWhereInput
    orderBy?: Enumerable<chii_subject_interestsOrderByWithAggregationInput>
    by: Array<Chii_subject_interestsScalarFieldEnum>
    having?: chii_subject_interestsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_subject_interestsCountAggregateInputType | true
    _avg?: Chii_subject_interestsAvgAggregateInputType
    _sum?: Chii_subject_interestsSumAggregateInputType
    _min?: Chii_subject_interestsMinAggregateInputType
    _max?: Chii_subject_interestsMaxAggregateInputType
  }


  export type Chii_subject_interestsGroupByOutputType = {
    interest_id: number
    interest_uid: number
    interest_subject_id: number
    interest_subject_type: number
    interest_rate: number
    interest_type: boolean
    interest_has_comment: boolean
    interest_comment: string
    interest_tag: string
    interest_ep_status: number
    interest_vol_status: number
    interest_wish_dateline: number
    interest_doing_dateline: number
    interest_collect_dateline: number
    interest_on_hold_dateline: number
    interest_dropped_dateline: number
    interest_create_ip: string
    interest_lasttouch_ip: string
    interest_lasttouch: number
    interest_private: boolean
    _count: Chii_subject_interestsCountAggregateOutputType | null
    _avg: Chii_subject_interestsAvgAggregateOutputType | null
    _sum: Chii_subject_interestsSumAggregateOutputType | null
    _min: Chii_subject_interestsMinAggregateOutputType | null
    _max: Chii_subject_interestsMaxAggregateOutputType | null
  }

  type GetChii_subject_interestsGroupByPayload<T extends Chii_subject_interestsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_subject_interestsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_subject_interestsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_subject_interestsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_subject_interestsGroupByOutputType[P]>
        }
      >
    >


  export type chii_subject_interestsSelect = {
    interest_id?: boolean
    interest_uid?: boolean
    interest_subject_id?: boolean
    interest_subject_type?: boolean
    interest_rate?: boolean
    interest_type?: boolean
    interest_has_comment?: boolean
    interest_comment?: boolean
    interest_tag?: boolean
    interest_ep_status?: boolean
    interest_vol_status?: boolean
    interest_wish_dateline?: boolean
    interest_doing_dateline?: boolean
    interest_collect_dateline?: boolean
    interest_on_hold_dateline?: boolean
    interest_dropped_dateline?: boolean
    interest_create_ip?: boolean
    interest_lasttouch_ip?: boolean
    interest_lasttouch?: boolean
    interest_private?: boolean
  }


  export type chii_subject_interestsGetPayload<S extends boolean | null | undefined | chii_subject_interestsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_subject_interests :
    S extends undefined ? never :
    S extends { include: any } & (chii_subject_interestsArgs | chii_subject_interestsFindManyArgs)
    ? chii_subject_interests 
    : S extends { select: any } & (chii_subject_interestsArgs | chii_subject_interestsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_subject_interests ? chii_subject_interests[P] : never
  } 
      : chii_subject_interests


  type chii_subject_interestsCountArgs = Merge<
    Omit<chii_subject_interestsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_subject_interestsCountAggregateInputType | true
    }
  >

  export interface chii_subject_interestsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_subject_interests that matches the filter.
     * @param {chii_subject_interestsFindUniqueArgs} args - Arguments to find a Chii_subject_interests
     * @example
     * // Get one Chii_subject_interests
     * const chii_subject_interests = await prisma.chii_subject_interests.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_subject_interestsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_subject_interestsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_subject_interests'> extends True ? Prisma__chii_subject_interestsClient<chii_subject_interestsGetPayload<T>> : Prisma__chii_subject_interestsClient<chii_subject_interestsGetPayload<T> | null, null>

    /**
     * Find one Chii_subject_interests that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_subject_interestsFindUniqueOrThrowArgs} args - Arguments to find a Chii_subject_interests
     * @example
     * // Get one Chii_subject_interests
     * const chii_subject_interests = await prisma.chii_subject_interests.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_subject_interestsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_subject_interestsFindUniqueOrThrowArgs>
    ): Prisma__chii_subject_interestsClient<chii_subject_interestsGetPayload<T>>

    /**
     * Find the first Chii_subject_interests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_interestsFindFirstArgs} args - Arguments to find a Chii_subject_interests
     * @example
     * // Get one Chii_subject_interests
     * const chii_subject_interests = await prisma.chii_subject_interests.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_subject_interestsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_subject_interestsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_subject_interests'> extends True ? Prisma__chii_subject_interestsClient<chii_subject_interestsGetPayload<T>> : Prisma__chii_subject_interestsClient<chii_subject_interestsGetPayload<T> | null, null>

    /**
     * Find the first Chii_subject_interests that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_interestsFindFirstOrThrowArgs} args - Arguments to find a Chii_subject_interests
     * @example
     * // Get one Chii_subject_interests
     * const chii_subject_interests = await prisma.chii_subject_interests.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_subject_interestsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_subject_interestsFindFirstOrThrowArgs>
    ): Prisma__chii_subject_interestsClient<chii_subject_interestsGetPayload<T>>

    /**
     * Find zero or more Chii_subject_interests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_interestsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_subject_interests
     * const chii_subject_interests = await prisma.chii_subject_interests.findMany()
     * 
     * // Get first 10 Chii_subject_interests
     * const chii_subject_interests = await prisma.chii_subject_interests.findMany({ take: 10 })
     * 
     * // Only select the `interest_id`
     * const chii_subject_interestsWithInterest_idOnly = await prisma.chii_subject_interests.findMany({ select: { interest_id: true } })
     * 
    **/
    findMany<T extends chii_subject_interestsFindManyArgs>(
      args?: SelectSubset<T, chii_subject_interestsFindManyArgs>
    ): PrismaPromise<Array<chii_subject_interestsGetPayload<T>>>

    /**
     * Create a Chii_subject_interests.
     * @param {chii_subject_interestsCreateArgs} args - Arguments to create a Chii_subject_interests.
     * @example
     * // Create one Chii_subject_interests
     * const Chii_subject_interests = await prisma.chii_subject_interests.create({
     *   data: {
     *     // ... data to create a Chii_subject_interests
     *   }
     * })
     * 
    **/
    create<T extends chii_subject_interestsCreateArgs>(
      args: SelectSubset<T, chii_subject_interestsCreateArgs>
    ): Prisma__chii_subject_interestsClient<chii_subject_interestsGetPayload<T>>

    /**
     * Create many Chii_subject_interests.
     *     @param {chii_subject_interestsCreateManyArgs} args - Arguments to create many Chii_subject_interests.
     *     @example
     *     // Create many Chii_subject_interests
     *     const chii_subject_interests = await prisma.chii_subject_interests.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_subject_interestsCreateManyArgs>(
      args?: SelectSubset<T, chii_subject_interestsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_subject_interests.
     * @param {chii_subject_interestsDeleteArgs} args - Arguments to delete one Chii_subject_interests.
     * @example
     * // Delete one Chii_subject_interests
     * const Chii_subject_interests = await prisma.chii_subject_interests.delete({
     *   where: {
     *     // ... filter to delete one Chii_subject_interests
     *   }
     * })
     * 
    **/
    delete<T extends chii_subject_interestsDeleteArgs>(
      args: SelectSubset<T, chii_subject_interestsDeleteArgs>
    ): Prisma__chii_subject_interestsClient<chii_subject_interestsGetPayload<T>>

    /**
     * Update one Chii_subject_interests.
     * @param {chii_subject_interestsUpdateArgs} args - Arguments to update one Chii_subject_interests.
     * @example
     * // Update one Chii_subject_interests
     * const chii_subject_interests = await prisma.chii_subject_interests.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_subject_interestsUpdateArgs>(
      args: SelectSubset<T, chii_subject_interestsUpdateArgs>
    ): Prisma__chii_subject_interestsClient<chii_subject_interestsGetPayload<T>>

    /**
     * Delete zero or more Chii_subject_interests.
     * @param {chii_subject_interestsDeleteManyArgs} args - Arguments to filter Chii_subject_interests to delete.
     * @example
     * // Delete a few Chii_subject_interests
     * const { count } = await prisma.chii_subject_interests.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_subject_interestsDeleteManyArgs>(
      args?: SelectSubset<T, chii_subject_interestsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_subject_interests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_interestsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_subject_interests
     * const chii_subject_interests = await prisma.chii_subject_interests.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_subject_interestsUpdateManyArgs>(
      args: SelectSubset<T, chii_subject_interestsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_subject_interests.
     * @param {chii_subject_interestsUpsertArgs} args - Arguments to update or create a Chii_subject_interests.
     * @example
     * // Update or create a Chii_subject_interests
     * const chii_subject_interests = await prisma.chii_subject_interests.upsert({
     *   create: {
     *     // ... data to create a Chii_subject_interests
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_subject_interests we want to update
     *   }
     * })
    **/
    upsert<T extends chii_subject_interestsUpsertArgs>(
      args: SelectSubset<T, chii_subject_interestsUpsertArgs>
    ): Prisma__chii_subject_interestsClient<chii_subject_interestsGetPayload<T>>

    /**
     * Count the number of Chii_subject_interests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_interestsCountArgs} args - Arguments to filter Chii_subject_interests to count.
     * @example
     * // Count the number of Chii_subject_interests
     * const count = await prisma.chii_subject_interests.count({
     *   where: {
     *     // ... the filter for the Chii_subject_interests we want to count
     *   }
     * })
    **/
    count<T extends chii_subject_interestsCountArgs>(
      args?: Subset<T, chii_subject_interestsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_subject_interestsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_subject_interests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_subject_interestsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_subject_interestsAggregateArgs>(args: Subset<T, Chii_subject_interestsAggregateArgs>): PrismaPromise<GetChii_subject_interestsAggregateType<T>>

    /**
     * Group by Chii_subject_interests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_subject_interestsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_subject_interestsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_subject_interestsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_subject_interestsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_subject_interestsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_subject_interestsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_subject_interests.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_subject_interestsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_subject_interests base type for findUnique actions
   */
  export type chii_subject_interestsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_subject_interests
     * 
    **/
    select?: chii_subject_interestsSelect | null
    /**
     * Filter, which chii_subject_interests to fetch.
     * 
    **/
    where: chii_subject_interestsWhereUniqueInput
  }

  /**
   * chii_subject_interests: findUnique
   */
  export interface chii_subject_interestsFindUniqueArgs extends chii_subject_interestsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_subject_interests findUniqueOrThrow
   */
  export type chii_subject_interestsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_interests
     * 
    **/
    select?: chii_subject_interestsSelect | null
    /**
     * Filter, which chii_subject_interests to fetch.
     * 
    **/
    where: chii_subject_interestsWhereUniqueInput
  }


  /**
   * chii_subject_interests base type for findFirst actions
   */
  export type chii_subject_interestsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_subject_interests
     * 
    **/
    select?: chii_subject_interestsSelect | null
    /**
     * Filter, which chii_subject_interests to fetch.
     * 
    **/
    where?: chii_subject_interestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_interests to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_interestsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_subject_interests.
     * 
    **/
    cursor?: chii_subject_interestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_interests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_interests.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_subject_interests.
     * 
    **/
    distinct?: Enumerable<Chii_subject_interestsScalarFieldEnum>
  }

  /**
   * chii_subject_interests: findFirst
   */
  export interface chii_subject_interestsFindFirstArgs extends chii_subject_interestsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_subject_interests findFirstOrThrow
   */
  export type chii_subject_interestsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_interests
     * 
    **/
    select?: chii_subject_interestsSelect | null
    /**
     * Filter, which chii_subject_interests to fetch.
     * 
    **/
    where?: chii_subject_interestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_interests to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_interestsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_subject_interests.
     * 
    **/
    cursor?: chii_subject_interestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_interests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_interests.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_subject_interests.
     * 
    **/
    distinct?: Enumerable<Chii_subject_interestsScalarFieldEnum>
  }


  /**
   * chii_subject_interests findMany
   */
  export type chii_subject_interestsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_interests
     * 
    **/
    select?: chii_subject_interestsSelect | null
    /**
     * Filter, which chii_subject_interests to fetch.
     * 
    **/
    where?: chii_subject_interestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_interests to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_interestsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_subject_interests.
     * 
    **/
    cursor?: chii_subject_interestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_interests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_interests.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_subject_interestsScalarFieldEnum>
  }


  /**
   * chii_subject_interests create
   */
  export type chii_subject_interestsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_interests
     * 
    **/
    select?: chii_subject_interestsSelect | null
    /**
     * The data needed to create a chii_subject_interests.
     * 
    **/
    data: XOR<chii_subject_interestsCreateInput, chii_subject_interestsUncheckedCreateInput>
  }


  /**
   * chii_subject_interests createMany
   */
  export type chii_subject_interestsCreateManyArgs = {
    /**
     * The data used to create many chii_subject_interests.
     * 
    **/
    data: Enumerable<chii_subject_interestsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_subject_interests update
   */
  export type chii_subject_interestsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_interests
     * 
    **/
    select?: chii_subject_interestsSelect | null
    /**
     * The data needed to update a chii_subject_interests.
     * 
    **/
    data: XOR<chii_subject_interestsUpdateInput, chii_subject_interestsUncheckedUpdateInput>
    /**
     * Choose, which chii_subject_interests to update.
     * 
    **/
    where: chii_subject_interestsWhereUniqueInput
  }


  /**
   * chii_subject_interests updateMany
   */
  export type chii_subject_interestsUpdateManyArgs = {
    /**
     * The data used to update chii_subject_interests.
     * 
    **/
    data: XOR<chii_subject_interestsUpdateManyMutationInput, chii_subject_interestsUncheckedUpdateManyInput>
    /**
     * Filter which chii_subject_interests to update
     * 
    **/
    where?: chii_subject_interestsWhereInput
  }


  /**
   * chii_subject_interests upsert
   */
  export type chii_subject_interestsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_interests
     * 
    **/
    select?: chii_subject_interestsSelect | null
    /**
     * The filter to search for the chii_subject_interests to update in case it exists.
     * 
    **/
    where: chii_subject_interestsWhereUniqueInput
    /**
     * In case the chii_subject_interests found by the `where` argument doesn't exist, create a new chii_subject_interests with this data.
     * 
    **/
    create: XOR<chii_subject_interestsCreateInput, chii_subject_interestsUncheckedCreateInput>
    /**
     * In case the chii_subject_interests was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_subject_interestsUpdateInput, chii_subject_interestsUncheckedUpdateInput>
  }


  /**
   * chii_subject_interests delete
   */
  export type chii_subject_interestsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_interests
     * 
    **/
    select?: chii_subject_interestsSelect | null
    /**
     * Filter which chii_subject_interests to delete.
     * 
    **/
    where: chii_subject_interestsWhereUniqueInput
  }


  /**
   * chii_subject_interests deleteMany
   */
  export type chii_subject_interestsDeleteManyArgs = {
    /**
     * Filter which chii_subject_interests to delete
     * 
    **/
    where?: chii_subject_interestsWhereInput
  }


  /**
   * chii_subject_interests without action
   */
  export type chii_subject_interestsArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_interests
     * 
    **/
    select?: chii_subject_interestsSelect | null
  }



  /**
   * Model chii_subject_posts
   */


  export type AggregateChii_subject_posts = {
    _count: Chii_subject_postsCountAggregateOutputType | null
    _avg: Chii_subject_postsAvgAggregateOutputType | null
    _sum: Chii_subject_postsSumAggregateOutputType | null
    _min: Chii_subject_postsMinAggregateOutputType | null
    _max: Chii_subject_postsMaxAggregateOutputType | null
  }

  export type Chii_subject_postsAvgAggregateOutputType = {
    sbj_pst_id: number | null
    sbj_pst_mid: number | null
    sbj_pst_uid: number | null
    sbj_pst_related: number | null
    sbj_pst_dateline: number | null
  }

  export type Chii_subject_postsSumAggregateOutputType = {
    sbj_pst_id: number | null
    sbj_pst_mid: number | null
    sbj_pst_uid: number | null
    sbj_pst_related: number | null
    sbj_pst_dateline: number | null
  }

  export type Chii_subject_postsMinAggregateOutputType = {
    sbj_pst_id: number | null
    sbj_pst_mid: number | null
    sbj_pst_uid: number | null
    sbj_pst_related: number | null
    sbj_pst_content: string | null
    sbj_pst_state: boolean | null
    sbj_pst_dateline: number | null
  }

  export type Chii_subject_postsMaxAggregateOutputType = {
    sbj_pst_id: number | null
    sbj_pst_mid: number | null
    sbj_pst_uid: number | null
    sbj_pst_related: number | null
    sbj_pst_content: string | null
    sbj_pst_state: boolean | null
    sbj_pst_dateline: number | null
  }

  export type Chii_subject_postsCountAggregateOutputType = {
    sbj_pst_id: number
    sbj_pst_mid: number
    sbj_pst_uid: number
    sbj_pst_related: number
    sbj_pst_content: number
    sbj_pst_state: number
    sbj_pst_dateline: number
    _all: number
  }


  export type Chii_subject_postsAvgAggregateInputType = {
    sbj_pst_id?: true
    sbj_pst_mid?: true
    sbj_pst_uid?: true
    sbj_pst_related?: true
    sbj_pst_dateline?: true
  }

  export type Chii_subject_postsSumAggregateInputType = {
    sbj_pst_id?: true
    sbj_pst_mid?: true
    sbj_pst_uid?: true
    sbj_pst_related?: true
    sbj_pst_dateline?: true
  }

  export type Chii_subject_postsMinAggregateInputType = {
    sbj_pst_id?: true
    sbj_pst_mid?: true
    sbj_pst_uid?: true
    sbj_pst_related?: true
    sbj_pst_content?: true
    sbj_pst_state?: true
    sbj_pst_dateline?: true
  }

  export type Chii_subject_postsMaxAggregateInputType = {
    sbj_pst_id?: true
    sbj_pst_mid?: true
    sbj_pst_uid?: true
    sbj_pst_related?: true
    sbj_pst_content?: true
    sbj_pst_state?: true
    sbj_pst_dateline?: true
  }

  export type Chii_subject_postsCountAggregateInputType = {
    sbj_pst_id?: true
    sbj_pst_mid?: true
    sbj_pst_uid?: true
    sbj_pst_related?: true
    sbj_pst_content?: true
    sbj_pst_state?: true
    sbj_pst_dateline?: true
    _all?: true
  }

  export type Chii_subject_postsAggregateArgs = {
    /**
     * Filter which chii_subject_posts to aggregate.
     * 
    **/
    where?: chii_subject_postsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_posts to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_postsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_subject_postsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_subject_posts
    **/
    _count?: true | Chii_subject_postsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_subject_postsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_subject_postsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_subject_postsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_subject_postsMaxAggregateInputType
  }

  export type GetChii_subject_postsAggregateType<T extends Chii_subject_postsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_subject_posts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_subject_posts[P]>
      : GetScalarType<T[P], AggregateChii_subject_posts[P]>
  }




  export type Chii_subject_postsGroupByArgs = {
    where?: chii_subject_postsWhereInput
    orderBy?: Enumerable<chii_subject_postsOrderByWithAggregationInput>
    by: Array<Chii_subject_postsScalarFieldEnum>
    having?: chii_subject_postsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_subject_postsCountAggregateInputType | true
    _avg?: Chii_subject_postsAvgAggregateInputType
    _sum?: Chii_subject_postsSumAggregateInputType
    _min?: Chii_subject_postsMinAggregateInputType
    _max?: Chii_subject_postsMaxAggregateInputType
  }


  export type Chii_subject_postsGroupByOutputType = {
    sbj_pst_id: number
    sbj_pst_mid: number
    sbj_pst_uid: number
    sbj_pst_related: number
    sbj_pst_content: string
    sbj_pst_state: boolean
    sbj_pst_dateline: number
    _count: Chii_subject_postsCountAggregateOutputType | null
    _avg: Chii_subject_postsAvgAggregateOutputType | null
    _sum: Chii_subject_postsSumAggregateOutputType | null
    _min: Chii_subject_postsMinAggregateOutputType | null
    _max: Chii_subject_postsMaxAggregateOutputType | null
  }

  type GetChii_subject_postsGroupByPayload<T extends Chii_subject_postsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_subject_postsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_subject_postsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_subject_postsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_subject_postsGroupByOutputType[P]>
        }
      >
    >


  export type chii_subject_postsSelect = {
    sbj_pst_id?: boolean
    sbj_pst_mid?: boolean
    sbj_pst_uid?: boolean
    sbj_pst_related?: boolean
    sbj_pst_content?: boolean
    sbj_pst_state?: boolean
    sbj_pst_dateline?: boolean
  }


  export type chii_subject_postsGetPayload<S extends boolean | null | undefined | chii_subject_postsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_subject_posts :
    S extends undefined ? never :
    S extends { include: any } & (chii_subject_postsArgs | chii_subject_postsFindManyArgs)
    ? chii_subject_posts 
    : S extends { select: any } & (chii_subject_postsArgs | chii_subject_postsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_subject_posts ? chii_subject_posts[P] : never
  } 
      : chii_subject_posts


  type chii_subject_postsCountArgs = Merge<
    Omit<chii_subject_postsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_subject_postsCountAggregateInputType | true
    }
  >

  export interface chii_subject_postsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_subject_posts that matches the filter.
     * @param {chii_subject_postsFindUniqueArgs} args - Arguments to find a Chii_subject_posts
     * @example
     * // Get one Chii_subject_posts
     * const chii_subject_posts = await prisma.chii_subject_posts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_subject_postsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_subject_postsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_subject_posts'> extends True ? Prisma__chii_subject_postsClient<chii_subject_postsGetPayload<T>> : Prisma__chii_subject_postsClient<chii_subject_postsGetPayload<T> | null, null>

    /**
     * Find one Chii_subject_posts that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_subject_postsFindUniqueOrThrowArgs} args - Arguments to find a Chii_subject_posts
     * @example
     * // Get one Chii_subject_posts
     * const chii_subject_posts = await prisma.chii_subject_posts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_subject_postsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_subject_postsFindUniqueOrThrowArgs>
    ): Prisma__chii_subject_postsClient<chii_subject_postsGetPayload<T>>

    /**
     * Find the first Chii_subject_posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_postsFindFirstArgs} args - Arguments to find a Chii_subject_posts
     * @example
     * // Get one Chii_subject_posts
     * const chii_subject_posts = await prisma.chii_subject_posts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_subject_postsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_subject_postsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_subject_posts'> extends True ? Prisma__chii_subject_postsClient<chii_subject_postsGetPayload<T>> : Prisma__chii_subject_postsClient<chii_subject_postsGetPayload<T> | null, null>

    /**
     * Find the first Chii_subject_posts that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_postsFindFirstOrThrowArgs} args - Arguments to find a Chii_subject_posts
     * @example
     * // Get one Chii_subject_posts
     * const chii_subject_posts = await prisma.chii_subject_posts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_subject_postsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_subject_postsFindFirstOrThrowArgs>
    ): Prisma__chii_subject_postsClient<chii_subject_postsGetPayload<T>>

    /**
     * Find zero or more Chii_subject_posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_postsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_subject_posts
     * const chii_subject_posts = await prisma.chii_subject_posts.findMany()
     * 
     * // Get first 10 Chii_subject_posts
     * const chii_subject_posts = await prisma.chii_subject_posts.findMany({ take: 10 })
     * 
     * // Only select the `sbj_pst_id`
     * const chii_subject_postsWithSbj_pst_idOnly = await prisma.chii_subject_posts.findMany({ select: { sbj_pst_id: true } })
     * 
    **/
    findMany<T extends chii_subject_postsFindManyArgs>(
      args?: SelectSubset<T, chii_subject_postsFindManyArgs>
    ): PrismaPromise<Array<chii_subject_postsGetPayload<T>>>

    /**
     * Create a Chii_subject_posts.
     * @param {chii_subject_postsCreateArgs} args - Arguments to create a Chii_subject_posts.
     * @example
     * // Create one Chii_subject_posts
     * const Chii_subject_posts = await prisma.chii_subject_posts.create({
     *   data: {
     *     // ... data to create a Chii_subject_posts
     *   }
     * })
     * 
    **/
    create<T extends chii_subject_postsCreateArgs>(
      args: SelectSubset<T, chii_subject_postsCreateArgs>
    ): Prisma__chii_subject_postsClient<chii_subject_postsGetPayload<T>>

    /**
     * Create many Chii_subject_posts.
     *     @param {chii_subject_postsCreateManyArgs} args - Arguments to create many Chii_subject_posts.
     *     @example
     *     // Create many Chii_subject_posts
     *     const chii_subject_posts = await prisma.chii_subject_posts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_subject_postsCreateManyArgs>(
      args?: SelectSubset<T, chii_subject_postsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_subject_posts.
     * @param {chii_subject_postsDeleteArgs} args - Arguments to delete one Chii_subject_posts.
     * @example
     * // Delete one Chii_subject_posts
     * const Chii_subject_posts = await prisma.chii_subject_posts.delete({
     *   where: {
     *     // ... filter to delete one Chii_subject_posts
     *   }
     * })
     * 
    **/
    delete<T extends chii_subject_postsDeleteArgs>(
      args: SelectSubset<T, chii_subject_postsDeleteArgs>
    ): Prisma__chii_subject_postsClient<chii_subject_postsGetPayload<T>>

    /**
     * Update one Chii_subject_posts.
     * @param {chii_subject_postsUpdateArgs} args - Arguments to update one Chii_subject_posts.
     * @example
     * // Update one Chii_subject_posts
     * const chii_subject_posts = await prisma.chii_subject_posts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_subject_postsUpdateArgs>(
      args: SelectSubset<T, chii_subject_postsUpdateArgs>
    ): Prisma__chii_subject_postsClient<chii_subject_postsGetPayload<T>>

    /**
     * Delete zero or more Chii_subject_posts.
     * @param {chii_subject_postsDeleteManyArgs} args - Arguments to filter Chii_subject_posts to delete.
     * @example
     * // Delete a few Chii_subject_posts
     * const { count } = await prisma.chii_subject_posts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_subject_postsDeleteManyArgs>(
      args?: SelectSubset<T, chii_subject_postsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_subject_posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_postsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_subject_posts
     * const chii_subject_posts = await prisma.chii_subject_posts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_subject_postsUpdateManyArgs>(
      args: SelectSubset<T, chii_subject_postsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_subject_posts.
     * @param {chii_subject_postsUpsertArgs} args - Arguments to update or create a Chii_subject_posts.
     * @example
     * // Update or create a Chii_subject_posts
     * const chii_subject_posts = await prisma.chii_subject_posts.upsert({
     *   create: {
     *     // ... data to create a Chii_subject_posts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_subject_posts we want to update
     *   }
     * })
    **/
    upsert<T extends chii_subject_postsUpsertArgs>(
      args: SelectSubset<T, chii_subject_postsUpsertArgs>
    ): Prisma__chii_subject_postsClient<chii_subject_postsGetPayload<T>>

    /**
     * Count the number of Chii_subject_posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_postsCountArgs} args - Arguments to filter Chii_subject_posts to count.
     * @example
     * // Count the number of Chii_subject_posts
     * const count = await prisma.chii_subject_posts.count({
     *   where: {
     *     // ... the filter for the Chii_subject_posts we want to count
     *   }
     * })
    **/
    count<T extends chii_subject_postsCountArgs>(
      args?: Subset<T, chii_subject_postsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_subject_postsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_subject_posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_subject_postsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_subject_postsAggregateArgs>(args: Subset<T, Chii_subject_postsAggregateArgs>): PrismaPromise<GetChii_subject_postsAggregateType<T>>

    /**
     * Group by Chii_subject_posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_subject_postsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_subject_postsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_subject_postsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_subject_postsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_subject_postsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_subject_postsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_subject_posts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_subject_postsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_subject_posts base type for findUnique actions
   */
  export type chii_subject_postsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_subject_posts
     * 
    **/
    select?: chii_subject_postsSelect | null
    /**
     * Filter, which chii_subject_posts to fetch.
     * 
    **/
    where: chii_subject_postsWhereUniqueInput
  }

  /**
   * chii_subject_posts: findUnique
   */
  export interface chii_subject_postsFindUniqueArgs extends chii_subject_postsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_subject_posts findUniqueOrThrow
   */
  export type chii_subject_postsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_posts
     * 
    **/
    select?: chii_subject_postsSelect | null
    /**
     * Filter, which chii_subject_posts to fetch.
     * 
    **/
    where: chii_subject_postsWhereUniqueInput
  }


  /**
   * chii_subject_posts base type for findFirst actions
   */
  export type chii_subject_postsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_subject_posts
     * 
    **/
    select?: chii_subject_postsSelect | null
    /**
     * Filter, which chii_subject_posts to fetch.
     * 
    **/
    where?: chii_subject_postsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_posts to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_postsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_subject_posts.
     * 
    **/
    cursor?: chii_subject_postsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_subject_posts.
     * 
    **/
    distinct?: Enumerable<Chii_subject_postsScalarFieldEnum>
  }

  /**
   * chii_subject_posts: findFirst
   */
  export interface chii_subject_postsFindFirstArgs extends chii_subject_postsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_subject_posts findFirstOrThrow
   */
  export type chii_subject_postsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_posts
     * 
    **/
    select?: chii_subject_postsSelect | null
    /**
     * Filter, which chii_subject_posts to fetch.
     * 
    **/
    where?: chii_subject_postsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_posts to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_postsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_subject_posts.
     * 
    **/
    cursor?: chii_subject_postsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_subject_posts.
     * 
    **/
    distinct?: Enumerable<Chii_subject_postsScalarFieldEnum>
  }


  /**
   * chii_subject_posts findMany
   */
  export type chii_subject_postsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_posts
     * 
    **/
    select?: chii_subject_postsSelect | null
    /**
     * Filter, which chii_subject_posts to fetch.
     * 
    **/
    where?: chii_subject_postsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_posts to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_postsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_subject_posts.
     * 
    **/
    cursor?: chii_subject_postsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_posts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_subject_postsScalarFieldEnum>
  }


  /**
   * chii_subject_posts create
   */
  export type chii_subject_postsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_posts
     * 
    **/
    select?: chii_subject_postsSelect | null
    /**
     * The data needed to create a chii_subject_posts.
     * 
    **/
    data: XOR<chii_subject_postsCreateInput, chii_subject_postsUncheckedCreateInput>
  }


  /**
   * chii_subject_posts createMany
   */
  export type chii_subject_postsCreateManyArgs = {
    /**
     * The data used to create many chii_subject_posts.
     * 
    **/
    data: Enumerable<chii_subject_postsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_subject_posts update
   */
  export type chii_subject_postsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_posts
     * 
    **/
    select?: chii_subject_postsSelect | null
    /**
     * The data needed to update a chii_subject_posts.
     * 
    **/
    data: XOR<chii_subject_postsUpdateInput, chii_subject_postsUncheckedUpdateInput>
    /**
     * Choose, which chii_subject_posts to update.
     * 
    **/
    where: chii_subject_postsWhereUniqueInput
  }


  /**
   * chii_subject_posts updateMany
   */
  export type chii_subject_postsUpdateManyArgs = {
    /**
     * The data used to update chii_subject_posts.
     * 
    **/
    data: XOR<chii_subject_postsUpdateManyMutationInput, chii_subject_postsUncheckedUpdateManyInput>
    /**
     * Filter which chii_subject_posts to update
     * 
    **/
    where?: chii_subject_postsWhereInput
  }


  /**
   * chii_subject_posts upsert
   */
  export type chii_subject_postsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_posts
     * 
    **/
    select?: chii_subject_postsSelect | null
    /**
     * The filter to search for the chii_subject_posts to update in case it exists.
     * 
    **/
    where: chii_subject_postsWhereUniqueInput
    /**
     * In case the chii_subject_posts found by the `where` argument doesn't exist, create a new chii_subject_posts with this data.
     * 
    **/
    create: XOR<chii_subject_postsCreateInput, chii_subject_postsUncheckedCreateInput>
    /**
     * In case the chii_subject_posts was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_subject_postsUpdateInput, chii_subject_postsUncheckedUpdateInput>
  }


  /**
   * chii_subject_posts delete
   */
  export type chii_subject_postsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_posts
     * 
    **/
    select?: chii_subject_postsSelect | null
    /**
     * Filter which chii_subject_posts to delete.
     * 
    **/
    where: chii_subject_postsWhereUniqueInput
  }


  /**
   * chii_subject_posts deleteMany
   */
  export type chii_subject_postsDeleteManyArgs = {
    /**
     * Filter which chii_subject_posts to delete
     * 
    **/
    where?: chii_subject_postsWhereInput
  }


  /**
   * chii_subject_posts without action
   */
  export type chii_subject_postsArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_posts
     * 
    **/
    select?: chii_subject_postsSelect | null
  }



  /**
   * Model chii_subject_relations
   */


  export type AggregateChii_subject_relations = {
    _count: Chii_subject_relationsCountAggregateOutputType | null
    _avg: Chii_subject_relationsAvgAggregateOutputType | null
    _sum: Chii_subject_relationsSumAggregateOutputType | null
    _min: Chii_subject_relationsMinAggregateOutputType | null
    _max: Chii_subject_relationsMaxAggregateOutputType | null
  }

  export type Chii_subject_relationsAvgAggregateOutputType = {
    rlt_subject_id: number | null
    rlt_subject_type_id: number | null
    rlt_relation_type: number | null
    rlt_related_subject_id: number | null
    rlt_related_subject_type_id: number | null
    rlt_order: number | null
  }

  export type Chii_subject_relationsSumAggregateOutputType = {
    rlt_subject_id: number | null
    rlt_subject_type_id: number | null
    rlt_relation_type: number | null
    rlt_related_subject_id: number | null
    rlt_related_subject_type_id: number | null
    rlt_order: number | null
  }

  export type Chii_subject_relationsMinAggregateOutputType = {
    rlt_subject_id: number | null
    rlt_subject_type_id: number | null
    rlt_relation_type: number | null
    rlt_related_subject_id: number | null
    rlt_related_subject_type_id: number | null
    rlt_vice_versa: boolean | null
    rlt_order: number | null
  }

  export type Chii_subject_relationsMaxAggregateOutputType = {
    rlt_subject_id: number | null
    rlt_subject_type_id: number | null
    rlt_relation_type: number | null
    rlt_related_subject_id: number | null
    rlt_related_subject_type_id: number | null
    rlt_vice_versa: boolean | null
    rlt_order: number | null
  }

  export type Chii_subject_relationsCountAggregateOutputType = {
    rlt_subject_id: number
    rlt_subject_type_id: number
    rlt_relation_type: number
    rlt_related_subject_id: number
    rlt_related_subject_type_id: number
    rlt_vice_versa: number
    rlt_order: number
    _all: number
  }


  export type Chii_subject_relationsAvgAggregateInputType = {
    rlt_subject_id?: true
    rlt_subject_type_id?: true
    rlt_relation_type?: true
    rlt_related_subject_id?: true
    rlt_related_subject_type_id?: true
    rlt_order?: true
  }

  export type Chii_subject_relationsSumAggregateInputType = {
    rlt_subject_id?: true
    rlt_subject_type_id?: true
    rlt_relation_type?: true
    rlt_related_subject_id?: true
    rlt_related_subject_type_id?: true
    rlt_order?: true
  }

  export type Chii_subject_relationsMinAggregateInputType = {
    rlt_subject_id?: true
    rlt_subject_type_id?: true
    rlt_relation_type?: true
    rlt_related_subject_id?: true
    rlt_related_subject_type_id?: true
    rlt_vice_versa?: true
    rlt_order?: true
  }

  export type Chii_subject_relationsMaxAggregateInputType = {
    rlt_subject_id?: true
    rlt_subject_type_id?: true
    rlt_relation_type?: true
    rlt_related_subject_id?: true
    rlt_related_subject_type_id?: true
    rlt_vice_versa?: true
    rlt_order?: true
  }

  export type Chii_subject_relationsCountAggregateInputType = {
    rlt_subject_id?: true
    rlt_subject_type_id?: true
    rlt_relation_type?: true
    rlt_related_subject_id?: true
    rlt_related_subject_type_id?: true
    rlt_vice_versa?: true
    rlt_order?: true
    _all?: true
  }

  export type Chii_subject_relationsAggregateArgs = {
    /**
     * Filter which chii_subject_relations to aggregate.
     * 
    **/
    where?: chii_subject_relationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_relations to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_relationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_subject_relationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_relations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_relations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_subject_relations
    **/
    _count?: true | Chii_subject_relationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_subject_relationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_subject_relationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_subject_relationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_subject_relationsMaxAggregateInputType
  }

  export type GetChii_subject_relationsAggregateType<T extends Chii_subject_relationsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_subject_relations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_subject_relations[P]>
      : GetScalarType<T[P], AggregateChii_subject_relations[P]>
  }




  export type Chii_subject_relationsGroupByArgs = {
    where?: chii_subject_relationsWhereInput
    orderBy?: Enumerable<chii_subject_relationsOrderByWithAggregationInput>
    by: Array<Chii_subject_relationsScalarFieldEnum>
    having?: chii_subject_relationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_subject_relationsCountAggregateInputType | true
    _avg?: Chii_subject_relationsAvgAggregateInputType
    _sum?: Chii_subject_relationsSumAggregateInputType
    _min?: Chii_subject_relationsMinAggregateInputType
    _max?: Chii_subject_relationsMaxAggregateInputType
  }


  export type Chii_subject_relationsGroupByOutputType = {
    rlt_subject_id: number
    rlt_subject_type_id: number
    rlt_relation_type: number
    rlt_related_subject_id: number
    rlt_related_subject_type_id: number
    rlt_vice_versa: boolean
    rlt_order: number
    _count: Chii_subject_relationsCountAggregateOutputType | null
    _avg: Chii_subject_relationsAvgAggregateOutputType | null
    _sum: Chii_subject_relationsSumAggregateOutputType | null
    _min: Chii_subject_relationsMinAggregateOutputType | null
    _max: Chii_subject_relationsMaxAggregateOutputType | null
  }

  type GetChii_subject_relationsGroupByPayload<T extends Chii_subject_relationsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_subject_relationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_subject_relationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_subject_relationsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_subject_relationsGroupByOutputType[P]>
        }
      >
    >


  export type chii_subject_relationsSelect = {
    rlt_subject_id?: boolean
    rlt_subject_type_id?: boolean
    rlt_relation_type?: boolean
    rlt_related_subject_id?: boolean
    rlt_related_subject_type_id?: boolean
    rlt_vice_versa?: boolean
    rlt_order?: boolean
  }


  export type chii_subject_relationsGetPayload<S extends boolean | null | undefined | chii_subject_relationsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_subject_relations :
    S extends undefined ? never :
    S extends { include: any } & (chii_subject_relationsArgs | chii_subject_relationsFindManyArgs)
    ? chii_subject_relations 
    : S extends { select: any } & (chii_subject_relationsArgs | chii_subject_relationsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_subject_relations ? chii_subject_relations[P] : never
  } 
      : chii_subject_relations


  type chii_subject_relationsCountArgs = Merge<
    Omit<chii_subject_relationsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_subject_relationsCountAggregateInputType | true
    }
  >

  export interface chii_subject_relationsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_subject_relations that matches the filter.
     * @param {chii_subject_relationsFindUniqueArgs} args - Arguments to find a Chii_subject_relations
     * @example
     * // Get one Chii_subject_relations
     * const chii_subject_relations = await prisma.chii_subject_relations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_subject_relationsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_subject_relationsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_subject_relations'> extends True ? Prisma__chii_subject_relationsClient<chii_subject_relationsGetPayload<T>> : Prisma__chii_subject_relationsClient<chii_subject_relationsGetPayload<T> | null, null>

    /**
     * Find one Chii_subject_relations that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_subject_relationsFindUniqueOrThrowArgs} args - Arguments to find a Chii_subject_relations
     * @example
     * // Get one Chii_subject_relations
     * const chii_subject_relations = await prisma.chii_subject_relations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_subject_relationsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_subject_relationsFindUniqueOrThrowArgs>
    ): Prisma__chii_subject_relationsClient<chii_subject_relationsGetPayload<T>>

    /**
     * Find the first Chii_subject_relations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_relationsFindFirstArgs} args - Arguments to find a Chii_subject_relations
     * @example
     * // Get one Chii_subject_relations
     * const chii_subject_relations = await prisma.chii_subject_relations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_subject_relationsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_subject_relationsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_subject_relations'> extends True ? Prisma__chii_subject_relationsClient<chii_subject_relationsGetPayload<T>> : Prisma__chii_subject_relationsClient<chii_subject_relationsGetPayload<T> | null, null>

    /**
     * Find the first Chii_subject_relations that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_relationsFindFirstOrThrowArgs} args - Arguments to find a Chii_subject_relations
     * @example
     * // Get one Chii_subject_relations
     * const chii_subject_relations = await prisma.chii_subject_relations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_subject_relationsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_subject_relationsFindFirstOrThrowArgs>
    ): Prisma__chii_subject_relationsClient<chii_subject_relationsGetPayload<T>>

    /**
     * Find zero or more Chii_subject_relations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_relationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_subject_relations
     * const chii_subject_relations = await prisma.chii_subject_relations.findMany()
     * 
     * // Get first 10 Chii_subject_relations
     * const chii_subject_relations = await prisma.chii_subject_relations.findMany({ take: 10 })
     * 
     * // Only select the `rlt_subject_id`
     * const chii_subject_relationsWithRlt_subject_idOnly = await prisma.chii_subject_relations.findMany({ select: { rlt_subject_id: true } })
     * 
    **/
    findMany<T extends chii_subject_relationsFindManyArgs>(
      args?: SelectSubset<T, chii_subject_relationsFindManyArgs>
    ): PrismaPromise<Array<chii_subject_relationsGetPayload<T>>>

    /**
     * Create a Chii_subject_relations.
     * @param {chii_subject_relationsCreateArgs} args - Arguments to create a Chii_subject_relations.
     * @example
     * // Create one Chii_subject_relations
     * const Chii_subject_relations = await prisma.chii_subject_relations.create({
     *   data: {
     *     // ... data to create a Chii_subject_relations
     *   }
     * })
     * 
    **/
    create<T extends chii_subject_relationsCreateArgs>(
      args: SelectSubset<T, chii_subject_relationsCreateArgs>
    ): Prisma__chii_subject_relationsClient<chii_subject_relationsGetPayload<T>>

    /**
     * Create many Chii_subject_relations.
     *     @param {chii_subject_relationsCreateManyArgs} args - Arguments to create many Chii_subject_relations.
     *     @example
     *     // Create many Chii_subject_relations
     *     const chii_subject_relations = await prisma.chii_subject_relations.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_subject_relationsCreateManyArgs>(
      args?: SelectSubset<T, chii_subject_relationsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_subject_relations.
     * @param {chii_subject_relationsDeleteArgs} args - Arguments to delete one Chii_subject_relations.
     * @example
     * // Delete one Chii_subject_relations
     * const Chii_subject_relations = await prisma.chii_subject_relations.delete({
     *   where: {
     *     // ... filter to delete one Chii_subject_relations
     *   }
     * })
     * 
    **/
    delete<T extends chii_subject_relationsDeleteArgs>(
      args: SelectSubset<T, chii_subject_relationsDeleteArgs>
    ): Prisma__chii_subject_relationsClient<chii_subject_relationsGetPayload<T>>

    /**
     * Update one Chii_subject_relations.
     * @param {chii_subject_relationsUpdateArgs} args - Arguments to update one Chii_subject_relations.
     * @example
     * // Update one Chii_subject_relations
     * const chii_subject_relations = await prisma.chii_subject_relations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_subject_relationsUpdateArgs>(
      args: SelectSubset<T, chii_subject_relationsUpdateArgs>
    ): Prisma__chii_subject_relationsClient<chii_subject_relationsGetPayload<T>>

    /**
     * Delete zero or more Chii_subject_relations.
     * @param {chii_subject_relationsDeleteManyArgs} args - Arguments to filter Chii_subject_relations to delete.
     * @example
     * // Delete a few Chii_subject_relations
     * const { count } = await prisma.chii_subject_relations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_subject_relationsDeleteManyArgs>(
      args?: SelectSubset<T, chii_subject_relationsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_subject_relations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_relationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_subject_relations
     * const chii_subject_relations = await prisma.chii_subject_relations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_subject_relationsUpdateManyArgs>(
      args: SelectSubset<T, chii_subject_relationsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_subject_relations.
     * @param {chii_subject_relationsUpsertArgs} args - Arguments to update or create a Chii_subject_relations.
     * @example
     * // Update or create a Chii_subject_relations
     * const chii_subject_relations = await prisma.chii_subject_relations.upsert({
     *   create: {
     *     // ... data to create a Chii_subject_relations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_subject_relations we want to update
     *   }
     * })
    **/
    upsert<T extends chii_subject_relationsUpsertArgs>(
      args: SelectSubset<T, chii_subject_relationsUpsertArgs>
    ): Prisma__chii_subject_relationsClient<chii_subject_relationsGetPayload<T>>

    /**
     * Count the number of Chii_subject_relations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_relationsCountArgs} args - Arguments to filter Chii_subject_relations to count.
     * @example
     * // Count the number of Chii_subject_relations
     * const count = await prisma.chii_subject_relations.count({
     *   where: {
     *     // ... the filter for the Chii_subject_relations we want to count
     *   }
     * })
    **/
    count<T extends chii_subject_relationsCountArgs>(
      args?: Subset<T, chii_subject_relationsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_subject_relationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_subject_relations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_subject_relationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_subject_relationsAggregateArgs>(args: Subset<T, Chii_subject_relationsAggregateArgs>): PrismaPromise<GetChii_subject_relationsAggregateType<T>>

    /**
     * Group by Chii_subject_relations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_subject_relationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_subject_relationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_subject_relationsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_subject_relationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_subject_relationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_subject_relationsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_subject_relations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_subject_relationsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_subject_relations base type for findUnique actions
   */
  export type chii_subject_relationsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_subject_relations
     * 
    **/
    select?: chii_subject_relationsSelect | null
    /**
     * Filter, which chii_subject_relations to fetch.
     * 
    **/
    where: chii_subject_relationsWhereUniqueInput
  }

  /**
   * chii_subject_relations: findUnique
   */
  export interface chii_subject_relationsFindUniqueArgs extends chii_subject_relationsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_subject_relations findUniqueOrThrow
   */
  export type chii_subject_relationsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_relations
     * 
    **/
    select?: chii_subject_relationsSelect | null
    /**
     * Filter, which chii_subject_relations to fetch.
     * 
    **/
    where: chii_subject_relationsWhereUniqueInput
  }


  /**
   * chii_subject_relations base type for findFirst actions
   */
  export type chii_subject_relationsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_subject_relations
     * 
    **/
    select?: chii_subject_relationsSelect | null
    /**
     * Filter, which chii_subject_relations to fetch.
     * 
    **/
    where?: chii_subject_relationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_relations to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_relationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_subject_relations.
     * 
    **/
    cursor?: chii_subject_relationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_relations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_relations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_subject_relations.
     * 
    **/
    distinct?: Enumerable<Chii_subject_relationsScalarFieldEnum>
  }

  /**
   * chii_subject_relations: findFirst
   */
  export interface chii_subject_relationsFindFirstArgs extends chii_subject_relationsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_subject_relations findFirstOrThrow
   */
  export type chii_subject_relationsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_relations
     * 
    **/
    select?: chii_subject_relationsSelect | null
    /**
     * Filter, which chii_subject_relations to fetch.
     * 
    **/
    where?: chii_subject_relationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_relations to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_relationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_subject_relations.
     * 
    **/
    cursor?: chii_subject_relationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_relations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_relations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_subject_relations.
     * 
    **/
    distinct?: Enumerable<Chii_subject_relationsScalarFieldEnum>
  }


  /**
   * chii_subject_relations findMany
   */
  export type chii_subject_relationsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_relations
     * 
    **/
    select?: chii_subject_relationsSelect | null
    /**
     * Filter, which chii_subject_relations to fetch.
     * 
    **/
    where?: chii_subject_relationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_relations to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_relationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_subject_relations.
     * 
    **/
    cursor?: chii_subject_relationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_relations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_relations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_subject_relationsScalarFieldEnum>
  }


  /**
   * chii_subject_relations create
   */
  export type chii_subject_relationsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_relations
     * 
    **/
    select?: chii_subject_relationsSelect | null
    /**
     * The data needed to create a chii_subject_relations.
     * 
    **/
    data: XOR<chii_subject_relationsCreateInput, chii_subject_relationsUncheckedCreateInput>
  }


  /**
   * chii_subject_relations createMany
   */
  export type chii_subject_relationsCreateManyArgs = {
    /**
     * The data used to create many chii_subject_relations.
     * 
    **/
    data: Enumerable<chii_subject_relationsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_subject_relations update
   */
  export type chii_subject_relationsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_relations
     * 
    **/
    select?: chii_subject_relationsSelect | null
    /**
     * The data needed to update a chii_subject_relations.
     * 
    **/
    data: XOR<chii_subject_relationsUpdateInput, chii_subject_relationsUncheckedUpdateInput>
    /**
     * Choose, which chii_subject_relations to update.
     * 
    **/
    where: chii_subject_relationsWhereUniqueInput
  }


  /**
   * chii_subject_relations updateMany
   */
  export type chii_subject_relationsUpdateManyArgs = {
    /**
     * The data used to update chii_subject_relations.
     * 
    **/
    data: XOR<chii_subject_relationsUpdateManyMutationInput, chii_subject_relationsUncheckedUpdateManyInput>
    /**
     * Filter which chii_subject_relations to update
     * 
    **/
    where?: chii_subject_relationsWhereInput
  }


  /**
   * chii_subject_relations upsert
   */
  export type chii_subject_relationsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_relations
     * 
    **/
    select?: chii_subject_relationsSelect | null
    /**
     * The filter to search for the chii_subject_relations to update in case it exists.
     * 
    **/
    where: chii_subject_relationsWhereUniqueInput
    /**
     * In case the chii_subject_relations found by the `where` argument doesn't exist, create a new chii_subject_relations with this data.
     * 
    **/
    create: XOR<chii_subject_relationsCreateInput, chii_subject_relationsUncheckedCreateInput>
    /**
     * In case the chii_subject_relations was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_subject_relationsUpdateInput, chii_subject_relationsUncheckedUpdateInput>
  }


  /**
   * chii_subject_relations delete
   */
  export type chii_subject_relationsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_relations
     * 
    **/
    select?: chii_subject_relationsSelect | null
    /**
     * Filter which chii_subject_relations to delete.
     * 
    **/
    where: chii_subject_relationsWhereUniqueInput
  }


  /**
   * chii_subject_relations deleteMany
   */
  export type chii_subject_relationsDeleteManyArgs = {
    /**
     * Filter which chii_subject_relations to delete
     * 
    **/
    where?: chii_subject_relationsWhereInput
  }


  /**
   * chii_subject_relations without action
   */
  export type chii_subject_relationsArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_relations
     * 
    **/
    select?: chii_subject_relationsSelect | null
  }



  /**
   * Model chii_subject_revisions
   */


  export type AggregateChii_subject_revisions = {
    _count: Chii_subject_revisionsCountAggregateOutputType | null
    _avg: Chii_subject_revisionsAvgAggregateOutputType | null
    _sum: Chii_subject_revisionsSumAggregateOutputType | null
    _min: Chii_subject_revisionsMinAggregateOutputType | null
    _max: Chii_subject_revisionsMaxAggregateOutputType | null
  }

  export type Chii_subject_revisionsAvgAggregateOutputType = {
    rev_id: number | null
    rev_type: number | null
    rev_subject_id: number | null
    rev_type_id: number | null
    rev_creator: number | null
    rev_dateline: number | null
    rev_field_eps: number | null
    rev_platform: number | null
  }

  export type Chii_subject_revisionsSumAggregateOutputType = {
    rev_id: number | null
    rev_type: number | null
    rev_subject_id: number | null
    rev_type_id: number | null
    rev_creator: number | null
    rev_dateline: number | null
    rev_field_eps: number | null
    rev_platform: number | null
  }

  export type Chii_subject_revisionsMinAggregateOutputType = {
    rev_id: number | null
    rev_type: number | null
    rev_subject_id: number | null
    rev_type_id: number | null
    rev_creator: number | null
    rev_dateline: number | null
    rev_name: string | null
    rev_name_cn: string | null
    rev_field_infobox: string | null
    rev_field_summary: string | null
    rev_vote_field: string | null
    rev_field_eps: number | null
    rev_edit_summary: string | null
    rev_platform: number | null
  }

  export type Chii_subject_revisionsMaxAggregateOutputType = {
    rev_id: number | null
    rev_type: number | null
    rev_subject_id: number | null
    rev_type_id: number | null
    rev_creator: number | null
    rev_dateline: number | null
    rev_name: string | null
    rev_name_cn: string | null
    rev_field_infobox: string | null
    rev_field_summary: string | null
    rev_vote_field: string | null
    rev_field_eps: number | null
    rev_edit_summary: string | null
    rev_platform: number | null
  }

  export type Chii_subject_revisionsCountAggregateOutputType = {
    rev_id: number
    rev_type: number
    rev_subject_id: number
    rev_type_id: number
    rev_creator: number
    rev_dateline: number
    rev_name: number
    rev_name_cn: number
    rev_field_infobox: number
    rev_field_summary: number
    rev_vote_field: number
    rev_field_eps: number
    rev_edit_summary: number
    rev_platform: number
    _all: number
  }


  export type Chii_subject_revisionsAvgAggregateInputType = {
    rev_id?: true
    rev_type?: true
    rev_subject_id?: true
    rev_type_id?: true
    rev_creator?: true
    rev_dateline?: true
    rev_field_eps?: true
    rev_platform?: true
  }

  export type Chii_subject_revisionsSumAggregateInputType = {
    rev_id?: true
    rev_type?: true
    rev_subject_id?: true
    rev_type_id?: true
    rev_creator?: true
    rev_dateline?: true
    rev_field_eps?: true
    rev_platform?: true
  }

  export type Chii_subject_revisionsMinAggregateInputType = {
    rev_id?: true
    rev_type?: true
    rev_subject_id?: true
    rev_type_id?: true
    rev_creator?: true
    rev_dateline?: true
    rev_name?: true
    rev_name_cn?: true
    rev_field_infobox?: true
    rev_field_summary?: true
    rev_vote_field?: true
    rev_field_eps?: true
    rev_edit_summary?: true
    rev_platform?: true
  }

  export type Chii_subject_revisionsMaxAggregateInputType = {
    rev_id?: true
    rev_type?: true
    rev_subject_id?: true
    rev_type_id?: true
    rev_creator?: true
    rev_dateline?: true
    rev_name?: true
    rev_name_cn?: true
    rev_field_infobox?: true
    rev_field_summary?: true
    rev_vote_field?: true
    rev_field_eps?: true
    rev_edit_summary?: true
    rev_platform?: true
  }

  export type Chii_subject_revisionsCountAggregateInputType = {
    rev_id?: true
    rev_type?: true
    rev_subject_id?: true
    rev_type_id?: true
    rev_creator?: true
    rev_dateline?: true
    rev_name?: true
    rev_name_cn?: true
    rev_field_infobox?: true
    rev_field_summary?: true
    rev_vote_field?: true
    rev_field_eps?: true
    rev_edit_summary?: true
    rev_platform?: true
    _all?: true
  }

  export type Chii_subject_revisionsAggregateArgs = {
    /**
     * Filter which chii_subject_revisions to aggregate.
     * 
    **/
    where?: chii_subject_revisionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_revisions to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_revisionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_subject_revisionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_revisions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_revisions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_subject_revisions
    **/
    _count?: true | Chii_subject_revisionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_subject_revisionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_subject_revisionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_subject_revisionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_subject_revisionsMaxAggregateInputType
  }

  export type GetChii_subject_revisionsAggregateType<T extends Chii_subject_revisionsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_subject_revisions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_subject_revisions[P]>
      : GetScalarType<T[P], AggregateChii_subject_revisions[P]>
  }




  export type Chii_subject_revisionsGroupByArgs = {
    where?: chii_subject_revisionsWhereInput
    orderBy?: Enumerable<chii_subject_revisionsOrderByWithAggregationInput>
    by: Array<Chii_subject_revisionsScalarFieldEnum>
    having?: chii_subject_revisionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_subject_revisionsCountAggregateInputType | true
    _avg?: Chii_subject_revisionsAvgAggregateInputType
    _sum?: Chii_subject_revisionsSumAggregateInputType
    _min?: Chii_subject_revisionsMinAggregateInputType
    _max?: Chii_subject_revisionsMaxAggregateInputType
  }


  export type Chii_subject_revisionsGroupByOutputType = {
    rev_id: number
    rev_type: number
    rev_subject_id: number
    rev_type_id: number
    rev_creator: number
    rev_dateline: number
    rev_name: string
    rev_name_cn: string
    rev_field_infobox: string
    rev_field_summary: string
    rev_vote_field: string
    rev_field_eps: number
    rev_edit_summary: string
    rev_platform: number
    _count: Chii_subject_revisionsCountAggregateOutputType | null
    _avg: Chii_subject_revisionsAvgAggregateOutputType | null
    _sum: Chii_subject_revisionsSumAggregateOutputType | null
    _min: Chii_subject_revisionsMinAggregateOutputType | null
    _max: Chii_subject_revisionsMaxAggregateOutputType | null
  }

  type GetChii_subject_revisionsGroupByPayload<T extends Chii_subject_revisionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_subject_revisionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_subject_revisionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_subject_revisionsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_subject_revisionsGroupByOutputType[P]>
        }
      >
    >


  export type chii_subject_revisionsSelect = {
    rev_id?: boolean
    rev_type?: boolean
    rev_subject_id?: boolean
    rev_type_id?: boolean
    rev_creator?: boolean
    rev_dateline?: boolean
    rev_name?: boolean
    rev_name_cn?: boolean
    rev_field_infobox?: boolean
    rev_field_summary?: boolean
    rev_vote_field?: boolean
    rev_field_eps?: boolean
    rev_edit_summary?: boolean
    rev_platform?: boolean
  }


  export type chii_subject_revisionsGetPayload<S extends boolean | null | undefined | chii_subject_revisionsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_subject_revisions :
    S extends undefined ? never :
    S extends { include: any } & (chii_subject_revisionsArgs | chii_subject_revisionsFindManyArgs)
    ? chii_subject_revisions 
    : S extends { select: any } & (chii_subject_revisionsArgs | chii_subject_revisionsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_subject_revisions ? chii_subject_revisions[P] : never
  } 
      : chii_subject_revisions


  type chii_subject_revisionsCountArgs = Merge<
    Omit<chii_subject_revisionsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_subject_revisionsCountAggregateInputType | true
    }
  >

  export interface chii_subject_revisionsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_subject_revisions that matches the filter.
     * @param {chii_subject_revisionsFindUniqueArgs} args - Arguments to find a Chii_subject_revisions
     * @example
     * // Get one Chii_subject_revisions
     * const chii_subject_revisions = await prisma.chii_subject_revisions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_subject_revisionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_subject_revisionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_subject_revisions'> extends True ? Prisma__chii_subject_revisionsClient<chii_subject_revisionsGetPayload<T>> : Prisma__chii_subject_revisionsClient<chii_subject_revisionsGetPayload<T> | null, null>

    /**
     * Find one Chii_subject_revisions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_subject_revisionsFindUniqueOrThrowArgs} args - Arguments to find a Chii_subject_revisions
     * @example
     * // Get one Chii_subject_revisions
     * const chii_subject_revisions = await prisma.chii_subject_revisions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_subject_revisionsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_subject_revisionsFindUniqueOrThrowArgs>
    ): Prisma__chii_subject_revisionsClient<chii_subject_revisionsGetPayload<T>>

    /**
     * Find the first Chii_subject_revisions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_revisionsFindFirstArgs} args - Arguments to find a Chii_subject_revisions
     * @example
     * // Get one Chii_subject_revisions
     * const chii_subject_revisions = await prisma.chii_subject_revisions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_subject_revisionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_subject_revisionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_subject_revisions'> extends True ? Prisma__chii_subject_revisionsClient<chii_subject_revisionsGetPayload<T>> : Prisma__chii_subject_revisionsClient<chii_subject_revisionsGetPayload<T> | null, null>

    /**
     * Find the first Chii_subject_revisions that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_revisionsFindFirstOrThrowArgs} args - Arguments to find a Chii_subject_revisions
     * @example
     * // Get one Chii_subject_revisions
     * const chii_subject_revisions = await prisma.chii_subject_revisions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_subject_revisionsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_subject_revisionsFindFirstOrThrowArgs>
    ): Prisma__chii_subject_revisionsClient<chii_subject_revisionsGetPayload<T>>

    /**
     * Find zero or more Chii_subject_revisions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_revisionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_subject_revisions
     * const chii_subject_revisions = await prisma.chii_subject_revisions.findMany()
     * 
     * // Get first 10 Chii_subject_revisions
     * const chii_subject_revisions = await prisma.chii_subject_revisions.findMany({ take: 10 })
     * 
     * // Only select the `rev_id`
     * const chii_subject_revisionsWithRev_idOnly = await prisma.chii_subject_revisions.findMany({ select: { rev_id: true } })
     * 
    **/
    findMany<T extends chii_subject_revisionsFindManyArgs>(
      args?: SelectSubset<T, chii_subject_revisionsFindManyArgs>
    ): PrismaPromise<Array<chii_subject_revisionsGetPayload<T>>>

    /**
     * Create a Chii_subject_revisions.
     * @param {chii_subject_revisionsCreateArgs} args - Arguments to create a Chii_subject_revisions.
     * @example
     * // Create one Chii_subject_revisions
     * const Chii_subject_revisions = await prisma.chii_subject_revisions.create({
     *   data: {
     *     // ... data to create a Chii_subject_revisions
     *   }
     * })
     * 
    **/
    create<T extends chii_subject_revisionsCreateArgs>(
      args: SelectSubset<T, chii_subject_revisionsCreateArgs>
    ): Prisma__chii_subject_revisionsClient<chii_subject_revisionsGetPayload<T>>

    /**
     * Create many Chii_subject_revisions.
     *     @param {chii_subject_revisionsCreateManyArgs} args - Arguments to create many Chii_subject_revisions.
     *     @example
     *     // Create many Chii_subject_revisions
     *     const chii_subject_revisions = await prisma.chii_subject_revisions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_subject_revisionsCreateManyArgs>(
      args?: SelectSubset<T, chii_subject_revisionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_subject_revisions.
     * @param {chii_subject_revisionsDeleteArgs} args - Arguments to delete one Chii_subject_revisions.
     * @example
     * // Delete one Chii_subject_revisions
     * const Chii_subject_revisions = await prisma.chii_subject_revisions.delete({
     *   where: {
     *     // ... filter to delete one Chii_subject_revisions
     *   }
     * })
     * 
    **/
    delete<T extends chii_subject_revisionsDeleteArgs>(
      args: SelectSubset<T, chii_subject_revisionsDeleteArgs>
    ): Prisma__chii_subject_revisionsClient<chii_subject_revisionsGetPayload<T>>

    /**
     * Update one Chii_subject_revisions.
     * @param {chii_subject_revisionsUpdateArgs} args - Arguments to update one Chii_subject_revisions.
     * @example
     * // Update one Chii_subject_revisions
     * const chii_subject_revisions = await prisma.chii_subject_revisions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_subject_revisionsUpdateArgs>(
      args: SelectSubset<T, chii_subject_revisionsUpdateArgs>
    ): Prisma__chii_subject_revisionsClient<chii_subject_revisionsGetPayload<T>>

    /**
     * Delete zero or more Chii_subject_revisions.
     * @param {chii_subject_revisionsDeleteManyArgs} args - Arguments to filter Chii_subject_revisions to delete.
     * @example
     * // Delete a few Chii_subject_revisions
     * const { count } = await prisma.chii_subject_revisions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_subject_revisionsDeleteManyArgs>(
      args?: SelectSubset<T, chii_subject_revisionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_subject_revisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_revisionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_subject_revisions
     * const chii_subject_revisions = await prisma.chii_subject_revisions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_subject_revisionsUpdateManyArgs>(
      args: SelectSubset<T, chii_subject_revisionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_subject_revisions.
     * @param {chii_subject_revisionsUpsertArgs} args - Arguments to update or create a Chii_subject_revisions.
     * @example
     * // Update or create a Chii_subject_revisions
     * const chii_subject_revisions = await prisma.chii_subject_revisions.upsert({
     *   create: {
     *     // ... data to create a Chii_subject_revisions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_subject_revisions we want to update
     *   }
     * })
    **/
    upsert<T extends chii_subject_revisionsUpsertArgs>(
      args: SelectSubset<T, chii_subject_revisionsUpsertArgs>
    ): Prisma__chii_subject_revisionsClient<chii_subject_revisionsGetPayload<T>>

    /**
     * Count the number of Chii_subject_revisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_revisionsCountArgs} args - Arguments to filter Chii_subject_revisions to count.
     * @example
     * // Count the number of Chii_subject_revisions
     * const count = await prisma.chii_subject_revisions.count({
     *   where: {
     *     // ... the filter for the Chii_subject_revisions we want to count
     *   }
     * })
    **/
    count<T extends chii_subject_revisionsCountArgs>(
      args?: Subset<T, chii_subject_revisionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_subject_revisionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_subject_revisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_subject_revisionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_subject_revisionsAggregateArgs>(args: Subset<T, Chii_subject_revisionsAggregateArgs>): PrismaPromise<GetChii_subject_revisionsAggregateType<T>>

    /**
     * Group by Chii_subject_revisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_subject_revisionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_subject_revisionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_subject_revisionsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_subject_revisionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_subject_revisionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_subject_revisionsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_subject_revisions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_subject_revisionsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_subject_revisions base type for findUnique actions
   */
  export type chii_subject_revisionsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_subject_revisions
     * 
    **/
    select?: chii_subject_revisionsSelect | null
    /**
     * Filter, which chii_subject_revisions to fetch.
     * 
    **/
    where: chii_subject_revisionsWhereUniqueInput
  }

  /**
   * chii_subject_revisions: findUnique
   */
  export interface chii_subject_revisionsFindUniqueArgs extends chii_subject_revisionsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_subject_revisions findUniqueOrThrow
   */
  export type chii_subject_revisionsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_revisions
     * 
    **/
    select?: chii_subject_revisionsSelect | null
    /**
     * Filter, which chii_subject_revisions to fetch.
     * 
    **/
    where: chii_subject_revisionsWhereUniqueInput
  }


  /**
   * chii_subject_revisions base type for findFirst actions
   */
  export type chii_subject_revisionsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_subject_revisions
     * 
    **/
    select?: chii_subject_revisionsSelect | null
    /**
     * Filter, which chii_subject_revisions to fetch.
     * 
    **/
    where?: chii_subject_revisionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_revisions to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_revisionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_subject_revisions.
     * 
    **/
    cursor?: chii_subject_revisionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_revisions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_revisions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_subject_revisions.
     * 
    **/
    distinct?: Enumerable<Chii_subject_revisionsScalarFieldEnum>
  }

  /**
   * chii_subject_revisions: findFirst
   */
  export interface chii_subject_revisionsFindFirstArgs extends chii_subject_revisionsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_subject_revisions findFirstOrThrow
   */
  export type chii_subject_revisionsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_revisions
     * 
    **/
    select?: chii_subject_revisionsSelect | null
    /**
     * Filter, which chii_subject_revisions to fetch.
     * 
    **/
    where?: chii_subject_revisionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_revisions to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_revisionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_subject_revisions.
     * 
    **/
    cursor?: chii_subject_revisionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_revisions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_revisions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_subject_revisions.
     * 
    **/
    distinct?: Enumerable<Chii_subject_revisionsScalarFieldEnum>
  }


  /**
   * chii_subject_revisions findMany
   */
  export type chii_subject_revisionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_revisions
     * 
    **/
    select?: chii_subject_revisionsSelect | null
    /**
     * Filter, which chii_subject_revisions to fetch.
     * 
    **/
    where?: chii_subject_revisionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_revisions to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_revisionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_subject_revisions.
     * 
    **/
    cursor?: chii_subject_revisionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_revisions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_revisions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_subject_revisionsScalarFieldEnum>
  }


  /**
   * chii_subject_revisions create
   */
  export type chii_subject_revisionsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_revisions
     * 
    **/
    select?: chii_subject_revisionsSelect | null
    /**
     * The data needed to create a chii_subject_revisions.
     * 
    **/
    data: XOR<chii_subject_revisionsCreateInput, chii_subject_revisionsUncheckedCreateInput>
  }


  /**
   * chii_subject_revisions createMany
   */
  export type chii_subject_revisionsCreateManyArgs = {
    /**
     * The data used to create many chii_subject_revisions.
     * 
    **/
    data: Enumerable<chii_subject_revisionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_subject_revisions update
   */
  export type chii_subject_revisionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_revisions
     * 
    **/
    select?: chii_subject_revisionsSelect | null
    /**
     * The data needed to update a chii_subject_revisions.
     * 
    **/
    data: XOR<chii_subject_revisionsUpdateInput, chii_subject_revisionsUncheckedUpdateInput>
    /**
     * Choose, which chii_subject_revisions to update.
     * 
    **/
    where: chii_subject_revisionsWhereUniqueInput
  }


  /**
   * chii_subject_revisions updateMany
   */
  export type chii_subject_revisionsUpdateManyArgs = {
    /**
     * The data used to update chii_subject_revisions.
     * 
    **/
    data: XOR<chii_subject_revisionsUpdateManyMutationInput, chii_subject_revisionsUncheckedUpdateManyInput>
    /**
     * Filter which chii_subject_revisions to update
     * 
    **/
    where?: chii_subject_revisionsWhereInput
  }


  /**
   * chii_subject_revisions upsert
   */
  export type chii_subject_revisionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_revisions
     * 
    **/
    select?: chii_subject_revisionsSelect | null
    /**
     * The filter to search for the chii_subject_revisions to update in case it exists.
     * 
    **/
    where: chii_subject_revisionsWhereUniqueInput
    /**
     * In case the chii_subject_revisions found by the `where` argument doesn't exist, create a new chii_subject_revisions with this data.
     * 
    **/
    create: XOR<chii_subject_revisionsCreateInput, chii_subject_revisionsUncheckedCreateInput>
    /**
     * In case the chii_subject_revisions was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_subject_revisionsUpdateInput, chii_subject_revisionsUncheckedUpdateInput>
  }


  /**
   * chii_subject_revisions delete
   */
  export type chii_subject_revisionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_revisions
     * 
    **/
    select?: chii_subject_revisionsSelect | null
    /**
     * Filter which chii_subject_revisions to delete.
     * 
    **/
    where: chii_subject_revisionsWhereUniqueInput
  }


  /**
   * chii_subject_revisions deleteMany
   */
  export type chii_subject_revisionsDeleteManyArgs = {
    /**
     * Filter which chii_subject_revisions to delete
     * 
    **/
    where?: chii_subject_revisionsWhereInput
  }


  /**
   * chii_subject_revisions without action
   */
  export type chii_subject_revisionsArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_revisions
     * 
    **/
    select?: chii_subject_revisionsSelect | null
  }



  /**
   * Model chii_subject_topics
   */


  export type AggregateChii_subject_topics = {
    _count: Chii_subject_topicsCountAggregateOutputType | null
    _avg: Chii_subject_topicsAvgAggregateOutputType | null
    _sum: Chii_subject_topicsSumAggregateOutputType | null
    _min: Chii_subject_topicsMinAggregateOutputType | null
    _max: Chii_subject_topicsMaxAggregateOutputType | null
  }

  export type Chii_subject_topicsAvgAggregateOutputType = {
    sbj_tpc_id: number | null
    sbj_tpc_subject_id: number | null
    sbj_tpc_uid: number | null
    sbj_tpc_dateline: number | null
    sbj_tpc_lastpost: number | null
    sbj_tpc_replies: number | null
  }

  export type Chii_subject_topicsSumAggregateOutputType = {
    sbj_tpc_id: number | null
    sbj_tpc_subject_id: number | null
    sbj_tpc_uid: number | null
    sbj_tpc_dateline: number | null
    sbj_tpc_lastpost: number | null
    sbj_tpc_replies: number | null
  }

  export type Chii_subject_topicsMinAggregateOutputType = {
    sbj_tpc_id: number | null
    sbj_tpc_subject_id: number | null
    sbj_tpc_uid: number | null
    sbj_tpc_title: string | null
    sbj_tpc_dateline: number | null
    sbj_tpc_lastpost: number | null
    sbj_tpc_replies: number | null
    sbj_tpc_state: boolean | null
    sbj_tpc_display: boolean | null
  }

  export type Chii_subject_topicsMaxAggregateOutputType = {
    sbj_tpc_id: number | null
    sbj_tpc_subject_id: number | null
    sbj_tpc_uid: number | null
    sbj_tpc_title: string | null
    sbj_tpc_dateline: number | null
    sbj_tpc_lastpost: number | null
    sbj_tpc_replies: number | null
    sbj_tpc_state: boolean | null
    sbj_tpc_display: boolean | null
  }

  export type Chii_subject_topicsCountAggregateOutputType = {
    sbj_tpc_id: number
    sbj_tpc_subject_id: number
    sbj_tpc_uid: number
    sbj_tpc_title: number
    sbj_tpc_dateline: number
    sbj_tpc_lastpost: number
    sbj_tpc_replies: number
    sbj_tpc_state: number
    sbj_tpc_display: number
    _all: number
  }


  export type Chii_subject_topicsAvgAggregateInputType = {
    sbj_tpc_id?: true
    sbj_tpc_subject_id?: true
    sbj_tpc_uid?: true
    sbj_tpc_dateline?: true
    sbj_tpc_lastpost?: true
    sbj_tpc_replies?: true
  }

  export type Chii_subject_topicsSumAggregateInputType = {
    sbj_tpc_id?: true
    sbj_tpc_subject_id?: true
    sbj_tpc_uid?: true
    sbj_tpc_dateline?: true
    sbj_tpc_lastpost?: true
    sbj_tpc_replies?: true
  }

  export type Chii_subject_topicsMinAggregateInputType = {
    sbj_tpc_id?: true
    sbj_tpc_subject_id?: true
    sbj_tpc_uid?: true
    sbj_tpc_title?: true
    sbj_tpc_dateline?: true
    sbj_tpc_lastpost?: true
    sbj_tpc_replies?: true
    sbj_tpc_state?: true
    sbj_tpc_display?: true
  }

  export type Chii_subject_topicsMaxAggregateInputType = {
    sbj_tpc_id?: true
    sbj_tpc_subject_id?: true
    sbj_tpc_uid?: true
    sbj_tpc_title?: true
    sbj_tpc_dateline?: true
    sbj_tpc_lastpost?: true
    sbj_tpc_replies?: true
    sbj_tpc_state?: true
    sbj_tpc_display?: true
  }

  export type Chii_subject_topicsCountAggregateInputType = {
    sbj_tpc_id?: true
    sbj_tpc_subject_id?: true
    sbj_tpc_uid?: true
    sbj_tpc_title?: true
    sbj_tpc_dateline?: true
    sbj_tpc_lastpost?: true
    sbj_tpc_replies?: true
    sbj_tpc_state?: true
    sbj_tpc_display?: true
    _all?: true
  }

  export type Chii_subject_topicsAggregateArgs = {
    /**
     * Filter which chii_subject_topics to aggregate.
     * 
    **/
    where?: chii_subject_topicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_topics to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_topicsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_subject_topicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_topics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_topics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_subject_topics
    **/
    _count?: true | Chii_subject_topicsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_subject_topicsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_subject_topicsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_subject_topicsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_subject_topicsMaxAggregateInputType
  }

  export type GetChii_subject_topicsAggregateType<T extends Chii_subject_topicsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_subject_topics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_subject_topics[P]>
      : GetScalarType<T[P], AggregateChii_subject_topics[P]>
  }




  export type Chii_subject_topicsGroupByArgs = {
    where?: chii_subject_topicsWhereInput
    orderBy?: Enumerable<chii_subject_topicsOrderByWithAggregationInput>
    by: Array<Chii_subject_topicsScalarFieldEnum>
    having?: chii_subject_topicsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_subject_topicsCountAggregateInputType | true
    _avg?: Chii_subject_topicsAvgAggregateInputType
    _sum?: Chii_subject_topicsSumAggregateInputType
    _min?: Chii_subject_topicsMinAggregateInputType
    _max?: Chii_subject_topicsMaxAggregateInputType
  }


  export type Chii_subject_topicsGroupByOutputType = {
    sbj_tpc_id: number
    sbj_tpc_subject_id: number
    sbj_tpc_uid: number
    sbj_tpc_title: string
    sbj_tpc_dateline: number
    sbj_tpc_lastpost: number
    sbj_tpc_replies: number
    sbj_tpc_state: boolean
    sbj_tpc_display: boolean
    _count: Chii_subject_topicsCountAggregateOutputType | null
    _avg: Chii_subject_topicsAvgAggregateOutputType | null
    _sum: Chii_subject_topicsSumAggregateOutputType | null
    _min: Chii_subject_topicsMinAggregateOutputType | null
    _max: Chii_subject_topicsMaxAggregateOutputType | null
  }

  type GetChii_subject_topicsGroupByPayload<T extends Chii_subject_topicsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_subject_topicsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_subject_topicsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_subject_topicsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_subject_topicsGroupByOutputType[P]>
        }
      >
    >


  export type chii_subject_topicsSelect = {
    sbj_tpc_id?: boolean
    sbj_tpc_subject_id?: boolean
    sbj_tpc_uid?: boolean
    sbj_tpc_title?: boolean
    sbj_tpc_dateline?: boolean
    sbj_tpc_lastpost?: boolean
    sbj_tpc_replies?: boolean
    sbj_tpc_state?: boolean
    sbj_tpc_display?: boolean
  }


  export type chii_subject_topicsGetPayload<S extends boolean | null | undefined | chii_subject_topicsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_subject_topics :
    S extends undefined ? never :
    S extends { include: any } & (chii_subject_topicsArgs | chii_subject_topicsFindManyArgs)
    ? chii_subject_topics 
    : S extends { select: any } & (chii_subject_topicsArgs | chii_subject_topicsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_subject_topics ? chii_subject_topics[P] : never
  } 
      : chii_subject_topics


  type chii_subject_topicsCountArgs = Merge<
    Omit<chii_subject_topicsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_subject_topicsCountAggregateInputType | true
    }
  >

  export interface chii_subject_topicsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_subject_topics that matches the filter.
     * @param {chii_subject_topicsFindUniqueArgs} args - Arguments to find a Chii_subject_topics
     * @example
     * // Get one Chii_subject_topics
     * const chii_subject_topics = await prisma.chii_subject_topics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_subject_topicsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_subject_topicsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_subject_topics'> extends True ? Prisma__chii_subject_topicsClient<chii_subject_topicsGetPayload<T>> : Prisma__chii_subject_topicsClient<chii_subject_topicsGetPayload<T> | null, null>

    /**
     * Find one Chii_subject_topics that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_subject_topicsFindUniqueOrThrowArgs} args - Arguments to find a Chii_subject_topics
     * @example
     * // Get one Chii_subject_topics
     * const chii_subject_topics = await prisma.chii_subject_topics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_subject_topicsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_subject_topicsFindUniqueOrThrowArgs>
    ): Prisma__chii_subject_topicsClient<chii_subject_topicsGetPayload<T>>

    /**
     * Find the first Chii_subject_topics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_topicsFindFirstArgs} args - Arguments to find a Chii_subject_topics
     * @example
     * // Get one Chii_subject_topics
     * const chii_subject_topics = await prisma.chii_subject_topics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_subject_topicsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_subject_topicsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_subject_topics'> extends True ? Prisma__chii_subject_topicsClient<chii_subject_topicsGetPayload<T>> : Prisma__chii_subject_topicsClient<chii_subject_topicsGetPayload<T> | null, null>

    /**
     * Find the first Chii_subject_topics that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_topicsFindFirstOrThrowArgs} args - Arguments to find a Chii_subject_topics
     * @example
     * // Get one Chii_subject_topics
     * const chii_subject_topics = await prisma.chii_subject_topics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_subject_topicsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_subject_topicsFindFirstOrThrowArgs>
    ): Prisma__chii_subject_topicsClient<chii_subject_topicsGetPayload<T>>

    /**
     * Find zero or more Chii_subject_topics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_topicsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_subject_topics
     * const chii_subject_topics = await prisma.chii_subject_topics.findMany()
     * 
     * // Get first 10 Chii_subject_topics
     * const chii_subject_topics = await prisma.chii_subject_topics.findMany({ take: 10 })
     * 
     * // Only select the `sbj_tpc_id`
     * const chii_subject_topicsWithSbj_tpc_idOnly = await prisma.chii_subject_topics.findMany({ select: { sbj_tpc_id: true } })
     * 
    **/
    findMany<T extends chii_subject_topicsFindManyArgs>(
      args?: SelectSubset<T, chii_subject_topicsFindManyArgs>
    ): PrismaPromise<Array<chii_subject_topicsGetPayload<T>>>

    /**
     * Create a Chii_subject_topics.
     * @param {chii_subject_topicsCreateArgs} args - Arguments to create a Chii_subject_topics.
     * @example
     * // Create one Chii_subject_topics
     * const Chii_subject_topics = await prisma.chii_subject_topics.create({
     *   data: {
     *     // ... data to create a Chii_subject_topics
     *   }
     * })
     * 
    **/
    create<T extends chii_subject_topicsCreateArgs>(
      args: SelectSubset<T, chii_subject_topicsCreateArgs>
    ): Prisma__chii_subject_topicsClient<chii_subject_topicsGetPayload<T>>

    /**
     * Create many Chii_subject_topics.
     *     @param {chii_subject_topicsCreateManyArgs} args - Arguments to create many Chii_subject_topics.
     *     @example
     *     // Create many Chii_subject_topics
     *     const chii_subject_topics = await prisma.chii_subject_topics.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_subject_topicsCreateManyArgs>(
      args?: SelectSubset<T, chii_subject_topicsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_subject_topics.
     * @param {chii_subject_topicsDeleteArgs} args - Arguments to delete one Chii_subject_topics.
     * @example
     * // Delete one Chii_subject_topics
     * const Chii_subject_topics = await prisma.chii_subject_topics.delete({
     *   where: {
     *     // ... filter to delete one Chii_subject_topics
     *   }
     * })
     * 
    **/
    delete<T extends chii_subject_topicsDeleteArgs>(
      args: SelectSubset<T, chii_subject_topicsDeleteArgs>
    ): Prisma__chii_subject_topicsClient<chii_subject_topicsGetPayload<T>>

    /**
     * Update one Chii_subject_topics.
     * @param {chii_subject_topicsUpdateArgs} args - Arguments to update one Chii_subject_topics.
     * @example
     * // Update one Chii_subject_topics
     * const chii_subject_topics = await prisma.chii_subject_topics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_subject_topicsUpdateArgs>(
      args: SelectSubset<T, chii_subject_topicsUpdateArgs>
    ): Prisma__chii_subject_topicsClient<chii_subject_topicsGetPayload<T>>

    /**
     * Delete zero or more Chii_subject_topics.
     * @param {chii_subject_topicsDeleteManyArgs} args - Arguments to filter Chii_subject_topics to delete.
     * @example
     * // Delete a few Chii_subject_topics
     * const { count } = await prisma.chii_subject_topics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_subject_topicsDeleteManyArgs>(
      args?: SelectSubset<T, chii_subject_topicsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_subject_topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_topicsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_subject_topics
     * const chii_subject_topics = await prisma.chii_subject_topics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_subject_topicsUpdateManyArgs>(
      args: SelectSubset<T, chii_subject_topicsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_subject_topics.
     * @param {chii_subject_topicsUpsertArgs} args - Arguments to update or create a Chii_subject_topics.
     * @example
     * // Update or create a Chii_subject_topics
     * const chii_subject_topics = await prisma.chii_subject_topics.upsert({
     *   create: {
     *     // ... data to create a Chii_subject_topics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_subject_topics we want to update
     *   }
     * })
    **/
    upsert<T extends chii_subject_topicsUpsertArgs>(
      args: SelectSubset<T, chii_subject_topicsUpsertArgs>
    ): Prisma__chii_subject_topicsClient<chii_subject_topicsGetPayload<T>>

    /**
     * Count the number of Chii_subject_topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subject_topicsCountArgs} args - Arguments to filter Chii_subject_topics to count.
     * @example
     * // Count the number of Chii_subject_topics
     * const count = await prisma.chii_subject_topics.count({
     *   where: {
     *     // ... the filter for the Chii_subject_topics we want to count
     *   }
     * })
    **/
    count<T extends chii_subject_topicsCountArgs>(
      args?: Subset<T, chii_subject_topicsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_subject_topicsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_subject_topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_subject_topicsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_subject_topicsAggregateArgs>(args: Subset<T, Chii_subject_topicsAggregateArgs>): PrismaPromise<GetChii_subject_topicsAggregateType<T>>

    /**
     * Group by Chii_subject_topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_subject_topicsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_subject_topicsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_subject_topicsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_subject_topicsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_subject_topicsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_subject_topicsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_subject_topics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_subject_topicsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_subject_topics base type for findUnique actions
   */
  export type chii_subject_topicsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_subject_topics
     * 
    **/
    select?: chii_subject_topicsSelect | null
    /**
     * Filter, which chii_subject_topics to fetch.
     * 
    **/
    where: chii_subject_topicsWhereUniqueInput
  }

  /**
   * chii_subject_topics: findUnique
   */
  export interface chii_subject_topicsFindUniqueArgs extends chii_subject_topicsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_subject_topics findUniqueOrThrow
   */
  export type chii_subject_topicsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_topics
     * 
    **/
    select?: chii_subject_topicsSelect | null
    /**
     * Filter, which chii_subject_topics to fetch.
     * 
    **/
    where: chii_subject_topicsWhereUniqueInput
  }


  /**
   * chii_subject_topics base type for findFirst actions
   */
  export type chii_subject_topicsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_subject_topics
     * 
    **/
    select?: chii_subject_topicsSelect | null
    /**
     * Filter, which chii_subject_topics to fetch.
     * 
    **/
    where?: chii_subject_topicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_topics to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_topicsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_subject_topics.
     * 
    **/
    cursor?: chii_subject_topicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_topics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_topics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_subject_topics.
     * 
    **/
    distinct?: Enumerable<Chii_subject_topicsScalarFieldEnum>
  }

  /**
   * chii_subject_topics: findFirst
   */
  export interface chii_subject_topicsFindFirstArgs extends chii_subject_topicsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_subject_topics findFirstOrThrow
   */
  export type chii_subject_topicsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_topics
     * 
    **/
    select?: chii_subject_topicsSelect | null
    /**
     * Filter, which chii_subject_topics to fetch.
     * 
    **/
    where?: chii_subject_topicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_topics to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_topicsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_subject_topics.
     * 
    **/
    cursor?: chii_subject_topicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_topics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_topics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_subject_topics.
     * 
    **/
    distinct?: Enumerable<Chii_subject_topicsScalarFieldEnum>
  }


  /**
   * chii_subject_topics findMany
   */
  export type chii_subject_topicsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_topics
     * 
    **/
    select?: chii_subject_topicsSelect | null
    /**
     * Filter, which chii_subject_topics to fetch.
     * 
    **/
    where?: chii_subject_topicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subject_topics to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subject_topicsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_subject_topics.
     * 
    **/
    cursor?: chii_subject_topicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subject_topics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subject_topics.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_subject_topicsScalarFieldEnum>
  }


  /**
   * chii_subject_topics create
   */
  export type chii_subject_topicsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_topics
     * 
    **/
    select?: chii_subject_topicsSelect | null
    /**
     * The data needed to create a chii_subject_topics.
     * 
    **/
    data: XOR<chii_subject_topicsCreateInput, chii_subject_topicsUncheckedCreateInput>
  }


  /**
   * chii_subject_topics createMany
   */
  export type chii_subject_topicsCreateManyArgs = {
    /**
     * The data used to create many chii_subject_topics.
     * 
    **/
    data: Enumerable<chii_subject_topicsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_subject_topics update
   */
  export type chii_subject_topicsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_topics
     * 
    **/
    select?: chii_subject_topicsSelect | null
    /**
     * The data needed to update a chii_subject_topics.
     * 
    **/
    data: XOR<chii_subject_topicsUpdateInput, chii_subject_topicsUncheckedUpdateInput>
    /**
     * Choose, which chii_subject_topics to update.
     * 
    **/
    where: chii_subject_topicsWhereUniqueInput
  }


  /**
   * chii_subject_topics updateMany
   */
  export type chii_subject_topicsUpdateManyArgs = {
    /**
     * The data used to update chii_subject_topics.
     * 
    **/
    data: XOR<chii_subject_topicsUpdateManyMutationInput, chii_subject_topicsUncheckedUpdateManyInput>
    /**
     * Filter which chii_subject_topics to update
     * 
    **/
    where?: chii_subject_topicsWhereInput
  }


  /**
   * chii_subject_topics upsert
   */
  export type chii_subject_topicsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_topics
     * 
    **/
    select?: chii_subject_topicsSelect | null
    /**
     * The filter to search for the chii_subject_topics to update in case it exists.
     * 
    **/
    where: chii_subject_topicsWhereUniqueInput
    /**
     * In case the chii_subject_topics found by the `where` argument doesn't exist, create a new chii_subject_topics with this data.
     * 
    **/
    create: XOR<chii_subject_topicsCreateInput, chii_subject_topicsUncheckedCreateInput>
    /**
     * In case the chii_subject_topics was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_subject_topicsUpdateInput, chii_subject_topicsUncheckedUpdateInput>
  }


  /**
   * chii_subject_topics delete
   */
  export type chii_subject_topicsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_topics
     * 
    **/
    select?: chii_subject_topicsSelect | null
    /**
     * Filter which chii_subject_topics to delete.
     * 
    **/
    where: chii_subject_topicsWhereUniqueInput
  }


  /**
   * chii_subject_topics deleteMany
   */
  export type chii_subject_topicsDeleteManyArgs = {
    /**
     * Filter which chii_subject_topics to delete
     * 
    **/
    where?: chii_subject_topicsWhereInput
  }


  /**
   * chii_subject_topics without action
   */
  export type chii_subject_topicsArgs = {
    /**
     * Select specific fields to fetch from the chii_subject_topics
     * 
    **/
    select?: chii_subject_topicsSelect | null
  }



  /**
   * Model chii_subjects
   */


  export type AggregateChii_subjects = {
    _count: Chii_subjectsCountAggregateOutputType | null
    _avg: Chii_subjectsAvgAggregateOutputType | null
    _sum: Chii_subjectsSumAggregateOutputType | null
    _min: Chii_subjectsMinAggregateOutputType | null
    _max: Chii_subjectsMaxAggregateOutputType | null
  }

  export type Chii_subjectsAvgAggregateOutputType = {
    subject_id: number | null
    subject_type_id: number | null
    subject_creator: number | null
    subject_dateline: number | null
    subject_platform: number | null
    field_volumes: number | null
    field_eps: number | null
    subject_wish: number | null
    subject_collect: number | null
    subject_doing: number | null
    subject_on_hold: number | null
    subject_dropped: number | null
    subject_series_entry: number | null
  }

  export type Chii_subjectsSumAggregateOutputType = {
    subject_id: number | null
    subject_type_id: number | null
    subject_creator: number | null
    subject_dateline: number | null
    subject_platform: number | null
    field_volumes: number | null
    field_eps: number | null
    subject_wish: number | null
    subject_collect: number | null
    subject_doing: number | null
    subject_on_hold: number | null
    subject_dropped: number | null
    subject_series_entry: number | null
  }

  export type Chii_subjectsMinAggregateOutputType = {
    subject_id: number | null
    subject_type_id: number | null
    subject_name: string | null
    subject_name_cn: string | null
    subject_uid: string | null
    subject_creator: number | null
    subject_dateline: number | null
    subject_image: string | null
    subject_platform: number | null
    field_infobox: string | null
    field_summary: string | null
    field_5: string | null
    field_volumes: number | null
    field_eps: number | null
    subject_wish: number | null
    subject_collect: number | null
    subject_doing: number | null
    subject_on_hold: number | null
    subject_dropped: number | null
    subject_series: boolean | null
    subject_series_entry: number | null
    subject_idx_cn: string | null
    subject_airtime: boolean | null
    subject_nsfw: boolean | null
    subject_ban: boolean | null
  }

  export type Chii_subjectsMaxAggregateOutputType = {
    subject_id: number | null
    subject_type_id: number | null
    subject_name: string | null
    subject_name_cn: string | null
    subject_uid: string | null
    subject_creator: number | null
    subject_dateline: number | null
    subject_image: string | null
    subject_platform: number | null
    field_infobox: string | null
    field_summary: string | null
    field_5: string | null
    field_volumes: number | null
    field_eps: number | null
    subject_wish: number | null
    subject_collect: number | null
    subject_doing: number | null
    subject_on_hold: number | null
    subject_dropped: number | null
    subject_series: boolean | null
    subject_series_entry: number | null
    subject_idx_cn: string | null
    subject_airtime: boolean | null
    subject_nsfw: boolean | null
    subject_ban: boolean | null
  }

  export type Chii_subjectsCountAggregateOutputType = {
    subject_id: number
    subject_type_id: number
    subject_name: number
    subject_name_cn: number
    subject_uid: number
    subject_creator: number
    subject_dateline: number
    subject_image: number
    subject_platform: number
    field_infobox: number
    field_summary: number
    field_5: number
    field_volumes: number
    field_eps: number
    subject_wish: number
    subject_collect: number
    subject_doing: number
    subject_on_hold: number
    subject_dropped: number
    subject_series: number
    subject_series_entry: number
    subject_idx_cn: number
    subject_airtime: number
    subject_nsfw: number
    subject_ban: number
    _all: number
  }


  export type Chii_subjectsAvgAggregateInputType = {
    subject_id?: true
    subject_type_id?: true
    subject_creator?: true
    subject_dateline?: true
    subject_platform?: true
    field_volumes?: true
    field_eps?: true
    subject_wish?: true
    subject_collect?: true
    subject_doing?: true
    subject_on_hold?: true
    subject_dropped?: true
    subject_series_entry?: true
  }

  export type Chii_subjectsSumAggregateInputType = {
    subject_id?: true
    subject_type_id?: true
    subject_creator?: true
    subject_dateline?: true
    subject_platform?: true
    field_volumes?: true
    field_eps?: true
    subject_wish?: true
    subject_collect?: true
    subject_doing?: true
    subject_on_hold?: true
    subject_dropped?: true
    subject_series_entry?: true
  }

  export type Chii_subjectsMinAggregateInputType = {
    subject_id?: true
    subject_type_id?: true
    subject_name?: true
    subject_name_cn?: true
    subject_uid?: true
    subject_creator?: true
    subject_dateline?: true
    subject_image?: true
    subject_platform?: true
    field_infobox?: true
    field_summary?: true
    field_5?: true
    field_volumes?: true
    field_eps?: true
    subject_wish?: true
    subject_collect?: true
    subject_doing?: true
    subject_on_hold?: true
    subject_dropped?: true
    subject_series?: true
    subject_series_entry?: true
    subject_idx_cn?: true
    subject_airtime?: true
    subject_nsfw?: true
    subject_ban?: true
  }

  export type Chii_subjectsMaxAggregateInputType = {
    subject_id?: true
    subject_type_id?: true
    subject_name?: true
    subject_name_cn?: true
    subject_uid?: true
    subject_creator?: true
    subject_dateline?: true
    subject_image?: true
    subject_platform?: true
    field_infobox?: true
    field_summary?: true
    field_5?: true
    field_volumes?: true
    field_eps?: true
    subject_wish?: true
    subject_collect?: true
    subject_doing?: true
    subject_on_hold?: true
    subject_dropped?: true
    subject_series?: true
    subject_series_entry?: true
    subject_idx_cn?: true
    subject_airtime?: true
    subject_nsfw?: true
    subject_ban?: true
  }

  export type Chii_subjectsCountAggregateInputType = {
    subject_id?: true
    subject_type_id?: true
    subject_name?: true
    subject_name_cn?: true
    subject_uid?: true
    subject_creator?: true
    subject_dateline?: true
    subject_image?: true
    subject_platform?: true
    field_infobox?: true
    field_summary?: true
    field_5?: true
    field_volumes?: true
    field_eps?: true
    subject_wish?: true
    subject_collect?: true
    subject_doing?: true
    subject_on_hold?: true
    subject_dropped?: true
    subject_series?: true
    subject_series_entry?: true
    subject_idx_cn?: true
    subject_airtime?: true
    subject_nsfw?: true
    subject_ban?: true
    _all?: true
  }

  export type Chii_subjectsAggregateArgs = {
    /**
     * Filter which chii_subjects to aggregate.
     * 
    **/
    where?: chii_subjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subjects to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subjectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_subjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subjects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subjects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_subjects
    **/
    _count?: true | Chii_subjectsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_subjectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_subjectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_subjectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_subjectsMaxAggregateInputType
  }

  export type GetChii_subjectsAggregateType<T extends Chii_subjectsAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_subjects]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_subjects[P]>
      : GetScalarType<T[P], AggregateChii_subjects[P]>
  }




  export type Chii_subjectsGroupByArgs = {
    where?: chii_subjectsWhereInput
    orderBy?: Enumerable<chii_subjectsOrderByWithAggregationInput>
    by: Array<Chii_subjectsScalarFieldEnum>
    having?: chii_subjectsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_subjectsCountAggregateInputType | true
    _avg?: Chii_subjectsAvgAggregateInputType
    _sum?: Chii_subjectsSumAggregateInputType
    _min?: Chii_subjectsMinAggregateInputType
    _max?: Chii_subjectsMaxAggregateInputType
  }


  export type Chii_subjectsGroupByOutputType = {
    subject_id: number
    subject_type_id: number
    subject_name: string
    subject_name_cn: string
    subject_uid: string
    subject_creator: number
    subject_dateline: number
    subject_image: string
    subject_platform: number
    field_infobox: string
    field_summary: string
    field_5: string
    field_volumes: number
    field_eps: number
    subject_wish: number
    subject_collect: number
    subject_doing: number
    subject_on_hold: number
    subject_dropped: number
    subject_series: boolean
    subject_series_entry: number
    subject_idx_cn: string
    subject_airtime: boolean
    subject_nsfw: boolean
    subject_ban: boolean
    _count: Chii_subjectsCountAggregateOutputType | null
    _avg: Chii_subjectsAvgAggregateOutputType | null
    _sum: Chii_subjectsSumAggregateOutputType | null
    _min: Chii_subjectsMinAggregateOutputType | null
    _max: Chii_subjectsMaxAggregateOutputType | null
  }

  type GetChii_subjectsGroupByPayload<T extends Chii_subjectsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_subjectsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_subjectsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_subjectsGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_subjectsGroupByOutputType[P]>
        }
      >
    >


  export type chii_subjectsSelect = {
    subject_id?: boolean
    subject_type_id?: boolean
    subject_name?: boolean
    subject_name_cn?: boolean
    subject_uid?: boolean
    subject_creator?: boolean
    subject_dateline?: boolean
    subject_image?: boolean
    subject_platform?: boolean
    field_infobox?: boolean
    field_summary?: boolean
    field_5?: boolean
    field_volumes?: boolean
    field_eps?: boolean
    subject_wish?: boolean
    subject_collect?: boolean
    subject_doing?: boolean
    subject_on_hold?: boolean
    subject_dropped?: boolean
    subject_series?: boolean
    subject_series_entry?: boolean
    subject_idx_cn?: boolean
    subject_airtime?: boolean
    subject_nsfw?: boolean
    subject_ban?: boolean
  }


  export type chii_subjectsGetPayload<S extends boolean | null | undefined | chii_subjectsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_subjects :
    S extends undefined ? never :
    S extends { include: any } & (chii_subjectsArgs | chii_subjectsFindManyArgs)
    ? chii_subjects 
    : S extends { select: any } & (chii_subjectsArgs | chii_subjectsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_subjects ? chii_subjects[P] : never
  } 
      : chii_subjects


  type chii_subjectsCountArgs = Merge<
    Omit<chii_subjectsFindManyArgs, 'select' | 'include'> & {
      select?: Chii_subjectsCountAggregateInputType | true
    }
  >

  export interface chii_subjectsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_subjects that matches the filter.
     * @param {chii_subjectsFindUniqueArgs} args - Arguments to find a Chii_subjects
     * @example
     * // Get one Chii_subjects
     * const chii_subjects = await prisma.chii_subjects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_subjectsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_subjectsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_subjects'> extends True ? Prisma__chii_subjectsClient<chii_subjectsGetPayload<T>> : Prisma__chii_subjectsClient<chii_subjectsGetPayload<T> | null, null>

    /**
     * Find one Chii_subjects that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_subjectsFindUniqueOrThrowArgs} args - Arguments to find a Chii_subjects
     * @example
     * // Get one Chii_subjects
     * const chii_subjects = await prisma.chii_subjects.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_subjectsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_subjectsFindUniqueOrThrowArgs>
    ): Prisma__chii_subjectsClient<chii_subjectsGetPayload<T>>

    /**
     * Find the first Chii_subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subjectsFindFirstArgs} args - Arguments to find a Chii_subjects
     * @example
     * // Get one Chii_subjects
     * const chii_subjects = await prisma.chii_subjects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_subjectsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_subjectsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_subjects'> extends True ? Prisma__chii_subjectsClient<chii_subjectsGetPayload<T>> : Prisma__chii_subjectsClient<chii_subjectsGetPayload<T> | null, null>

    /**
     * Find the first Chii_subjects that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subjectsFindFirstOrThrowArgs} args - Arguments to find a Chii_subjects
     * @example
     * // Get one Chii_subjects
     * const chii_subjects = await prisma.chii_subjects.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_subjectsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_subjectsFindFirstOrThrowArgs>
    ): Prisma__chii_subjectsClient<chii_subjectsGetPayload<T>>

    /**
     * Find zero or more Chii_subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subjectsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_subjects
     * const chii_subjects = await prisma.chii_subjects.findMany()
     * 
     * // Get first 10 Chii_subjects
     * const chii_subjects = await prisma.chii_subjects.findMany({ take: 10 })
     * 
     * // Only select the `subject_id`
     * const chii_subjectsWithSubject_idOnly = await prisma.chii_subjects.findMany({ select: { subject_id: true } })
     * 
    **/
    findMany<T extends chii_subjectsFindManyArgs>(
      args?: SelectSubset<T, chii_subjectsFindManyArgs>
    ): PrismaPromise<Array<chii_subjectsGetPayload<T>>>

    /**
     * Create a Chii_subjects.
     * @param {chii_subjectsCreateArgs} args - Arguments to create a Chii_subjects.
     * @example
     * // Create one Chii_subjects
     * const Chii_subjects = await prisma.chii_subjects.create({
     *   data: {
     *     // ... data to create a Chii_subjects
     *   }
     * })
     * 
    **/
    create<T extends chii_subjectsCreateArgs>(
      args: SelectSubset<T, chii_subjectsCreateArgs>
    ): Prisma__chii_subjectsClient<chii_subjectsGetPayload<T>>

    /**
     * Create many Chii_subjects.
     *     @param {chii_subjectsCreateManyArgs} args - Arguments to create many Chii_subjects.
     *     @example
     *     // Create many Chii_subjects
     *     const chii_subjects = await prisma.chii_subjects.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_subjectsCreateManyArgs>(
      args?: SelectSubset<T, chii_subjectsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_subjects.
     * @param {chii_subjectsDeleteArgs} args - Arguments to delete one Chii_subjects.
     * @example
     * // Delete one Chii_subjects
     * const Chii_subjects = await prisma.chii_subjects.delete({
     *   where: {
     *     // ... filter to delete one Chii_subjects
     *   }
     * })
     * 
    **/
    delete<T extends chii_subjectsDeleteArgs>(
      args: SelectSubset<T, chii_subjectsDeleteArgs>
    ): Prisma__chii_subjectsClient<chii_subjectsGetPayload<T>>

    /**
     * Update one Chii_subjects.
     * @param {chii_subjectsUpdateArgs} args - Arguments to update one Chii_subjects.
     * @example
     * // Update one Chii_subjects
     * const chii_subjects = await prisma.chii_subjects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_subjectsUpdateArgs>(
      args: SelectSubset<T, chii_subjectsUpdateArgs>
    ): Prisma__chii_subjectsClient<chii_subjectsGetPayload<T>>

    /**
     * Delete zero or more Chii_subjects.
     * @param {chii_subjectsDeleteManyArgs} args - Arguments to filter Chii_subjects to delete.
     * @example
     * // Delete a few Chii_subjects
     * const { count } = await prisma.chii_subjects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_subjectsDeleteManyArgs>(
      args?: SelectSubset<T, chii_subjectsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subjectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_subjects
     * const chii_subjects = await prisma.chii_subjects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_subjectsUpdateManyArgs>(
      args: SelectSubset<T, chii_subjectsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_subjects.
     * @param {chii_subjectsUpsertArgs} args - Arguments to update or create a Chii_subjects.
     * @example
     * // Update or create a Chii_subjects
     * const chii_subjects = await prisma.chii_subjects.upsert({
     *   create: {
     *     // ... data to create a Chii_subjects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_subjects we want to update
     *   }
     * })
    **/
    upsert<T extends chii_subjectsUpsertArgs>(
      args: SelectSubset<T, chii_subjectsUpsertArgs>
    ): Prisma__chii_subjectsClient<chii_subjectsGetPayload<T>>

    /**
     * Count the number of Chii_subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_subjectsCountArgs} args - Arguments to filter Chii_subjects to count.
     * @example
     * // Count the number of Chii_subjects
     * const count = await prisma.chii_subjects.count({
     *   where: {
     *     // ... the filter for the Chii_subjects we want to count
     *   }
     * })
    **/
    count<T extends chii_subjectsCountArgs>(
      args?: Subset<T, chii_subjectsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_subjectsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_subjectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_subjectsAggregateArgs>(args: Subset<T, Chii_subjectsAggregateArgs>): PrismaPromise<GetChii_subjectsAggregateType<T>>

    /**
     * Group by Chii_subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_subjectsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_subjectsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_subjectsGroupByArgs['orderBy'] }
        : { orderBy?: Chii_subjectsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_subjectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_subjectsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_subjects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_subjectsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_subjects base type for findUnique actions
   */
  export type chii_subjectsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_subjects
     * 
    **/
    select?: chii_subjectsSelect | null
    /**
     * Filter, which chii_subjects to fetch.
     * 
    **/
    where: chii_subjectsWhereUniqueInput
  }

  /**
   * chii_subjects: findUnique
   */
  export interface chii_subjectsFindUniqueArgs extends chii_subjectsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_subjects findUniqueOrThrow
   */
  export type chii_subjectsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_subjects
     * 
    **/
    select?: chii_subjectsSelect | null
    /**
     * Filter, which chii_subjects to fetch.
     * 
    **/
    where: chii_subjectsWhereUniqueInput
  }


  /**
   * chii_subjects base type for findFirst actions
   */
  export type chii_subjectsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_subjects
     * 
    **/
    select?: chii_subjectsSelect | null
    /**
     * Filter, which chii_subjects to fetch.
     * 
    **/
    where?: chii_subjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subjects to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subjectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_subjects.
     * 
    **/
    cursor?: chii_subjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subjects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subjects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_subjects.
     * 
    **/
    distinct?: Enumerable<Chii_subjectsScalarFieldEnum>
  }

  /**
   * chii_subjects: findFirst
   */
  export interface chii_subjectsFindFirstArgs extends chii_subjectsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_subjects findFirstOrThrow
   */
  export type chii_subjectsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_subjects
     * 
    **/
    select?: chii_subjectsSelect | null
    /**
     * Filter, which chii_subjects to fetch.
     * 
    **/
    where?: chii_subjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subjects to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subjectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_subjects.
     * 
    **/
    cursor?: chii_subjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subjects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subjects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_subjects.
     * 
    **/
    distinct?: Enumerable<Chii_subjectsScalarFieldEnum>
  }


  /**
   * chii_subjects findMany
   */
  export type chii_subjectsFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_subjects
     * 
    **/
    select?: chii_subjectsSelect | null
    /**
     * Filter, which chii_subjects to fetch.
     * 
    **/
    where?: chii_subjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_subjects to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_subjectsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_subjects.
     * 
    **/
    cursor?: chii_subjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_subjects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_subjects.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_subjectsScalarFieldEnum>
  }


  /**
   * chii_subjects create
   */
  export type chii_subjectsCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_subjects
     * 
    **/
    select?: chii_subjectsSelect | null
    /**
     * The data needed to create a chii_subjects.
     * 
    **/
    data: XOR<chii_subjectsCreateInput, chii_subjectsUncheckedCreateInput>
  }


  /**
   * chii_subjects createMany
   */
  export type chii_subjectsCreateManyArgs = {
    /**
     * The data used to create many chii_subjects.
     * 
    **/
    data: Enumerable<chii_subjectsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_subjects update
   */
  export type chii_subjectsUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_subjects
     * 
    **/
    select?: chii_subjectsSelect | null
    /**
     * The data needed to update a chii_subjects.
     * 
    **/
    data: XOR<chii_subjectsUpdateInput, chii_subjectsUncheckedUpdateInput>
    /**
     * Choose, which chii_subjects to update.
     * 
    **/
    where: chii_subjectsWhereUniqueInput
  }


  /**
   * chii_subjects updateMany
   */
  export type chii_subjectsUpdateManyArgs = {
    /**
     * The data used to update chii_subjects.
     * 
    **/
    data: XOR<chii_subjectsUpdateManyMutationInput, chii_subjectsUncheckedUpdateManyInput>
    /**
     * Filter which chii_subjects to update
     * 
    **/
    where?: chii_subjectsWhereInput
  }


  /**
   * chii_subjects upsert
   */
  export type chii_subjectsUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_subjects
     * 
    **/
    select?: chii_subjectsSelect | null
    /**
     * The filter to search for the chii_subjects to update in case it exists.
     * 
    **/
    where: chii_subjectsWhereUniqueInput
    /**
     * In case the chii_subjects found by the `where` argument doesn't exist, create a new chii_subjects with this data.
     * 
    **/
    create: XOR<chii_subjectsCreateInput, chii_subjectsUncheckedCreateInput>
    /**
     * In case the chii_subjects was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_subjectsUpdateInput, chii_subjectsUncheckedUpdateInput>
  }


  /**
   * chii_subjects delete
   */
  export type chii_subjectsDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_subjects
     * 
    **/
    select?: chii_subjectsSelect | null
    /**
     * Filter which chii_subjects to delete.
     * 
    **/
    where: chii_subjectsWhereUniqueInput
  }


  /**
   * chii_subjects deleteMany
   */
  export type chii_subjectsDeleteManyArgs = {
    /**
     * Filter which chii_subjects to delete
     * 
    **/
    where?: chii_subjectsWhereInput
  }


  /**
   * chii_subjects without action
   */
  export type chii_subjectsArgs = {
    /**
     * Select specific fields to fetch from the chii_subjects
     * 
    **/
    select?: chii_subjectsSelect | null
  }



  /**
   * Model chii_timeline
   */


  export type AggregateChii_timeline = {
    _count: Chii_timelineCountAggregateOutputType | null
    _avg: Chii_timelineAvgAggregateOutputType | null
    _sum: Chii_timelineSumAggregateOutputType | null
    _min: Chii_timelineMinAggregateOutputType | null
    _max: Chii_timelineMaxAggregateOutputType | null
  }

  export type Chii_timelineAvgAggregateOutputType = {
    tml_id: number | null
    tml_uid: number | null
    tml_cat: number | null
    tml_type: number | null
    tml_batch: number | null
    tml_source: number | null
    tml_replies: number | null
    tml_dateline: number | null
    tml_status: number | null
  }

  export type Chii_timelineSumAggregateOutputType = {
    tml_id: number | null
    tml_uid: number | null
    tml_cat: number | null
    tml_type: number | null
    tml_batch: number | null
    tml_source: number | null
    tml_replies: number | null
    tml_dateline: number | null
    tml_status: number | null
  }

  export type Chii_timelineMinAggregateOutputType = {
    tml_id: number | null
    tml_uid: number | null
    tml_cat: number | null
    tml_type: number | null
    tml_related: string | null
    tml_memo: string | null
    tml_img: string | null
    tml_batch: number | null
    tml_source: number | null
    tml_replies: number | null
    tml_dateline: number | null
    tml_status: number | null
  }

  export type Chii_timelineMaxAggregateOutputType = {
    tml_id: number | null
    tml_uid: number | null
    tml_cat: number | null
    tml_type: number | null
    tml_related: string | null
    tml_memo: string | null
    tml_img: string | null
    tml_batch: number | null
    tml_source: number | null
    tml_replies: number | null
    tml_dateline: number | null
    tml_status: number | null
  }

  export type Chii_timelineCountAggregateOutputType = {
    tml_id: number
    tml_uid: number
    tml_cat: number
    tml_type: number
    tml_related: number
    tml_memo: number
    tml_img: number
    tml_batch: number
    tml_source: number
    tml_replies: number
    tml_dateline: number
    tml_status: number
    _all: number
  }


  export type Chii_timelineAvgAggregateInputType = {
    tml_id?: true
    tml_uid?: true
    tml_cat?: true
    tml_type?: true
    tml_batch?: true
    tml_source?: true
    tml_replies?: true
    tml_dateline?: true
    tml_status?: true
  }

  export type Chii_timelineSumAggregateInputType = {
    tml_id?: true
    tml_uid?: true
    tml_cat?: true
    tml_type?: true
    tml_batch?: true
    tml_source?: true
    tml_replies?: true
    tml_dateline?: true
    tml_status?: true
  }

  export type Chii_timelineMinAggregateInputType = {
    tml_id?: true
    tml_uid?: true
    tml_cat?: true
    tml_type?: true
    tml_related?: true
    tml_memo?: true
    tml_img?: true
    tml_batch?: true
    tml_source?: true
    tml_replies?: true
    tml_dateline?: true
    tml_status?: true
  }

  export type Chii_timelineMaxAggregateInputType = {
    tml_id?: true
    tml_uid?: true
    tml_cat?: true
    tml_type?: true
    tml_related?: true
    tml_memo?: true
    tml_img?: true
    tml_batch?: true
    tml_source?: true
    tml_replies?: true
    tml_dateline?: true
    tml_status?: true
  }

  export type Chii_timelineCountAggregateInputType = {
    tml_id?: true
    tml_uid?: true
    tml_cat?: true
    tml_type?: true
    tml_related?: true
    tml_memo?: true
    tml_img?: true
    tml_batch?: true
    tml_source?: true
    tml_replies?: true
    tml_dateline?: true
    tml_status?: true
    _all?: true
  }

  export type Chii_timelineAggregateArgs = {
    /**
     * Filter which chii_timeline to aggregate.
     * 
    **/
    where?: chii_timelineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_timelines to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_timelineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_timelineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_timelines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_timelines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_timelines
    **/
    _count?: true | Chii_timelineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_timelineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_timelineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_timelineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_timelineMaxAggregateInputType
  }

  export type GetChii_timelineAggregateType<T extends Chii_timelineAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_timeline]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_timeline[P]>
      : GetScalarType<T[P], AggregateChii_timeline[P]>
  }




  export type Chii_timelineGroupByArgs = {
    where?: chii_timelineWhereInput
    orderBy?: Enumerable<chii_timelineOrderByWithAggregationInput>
    by: Array<Chii_timelineScalarFieldEnum>
    having?: chii_timelineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_timelineCountAggregateInputType | true
    _avg?: Chii_timelineAvgAggregateInputType
    _sum?: Chii_timelineSumAggregateInputType
    _min?: Chii_timelineMinAggregateInputType
    _max?: Chii_timelineMaxAggregateInputType
  }


  export type Chii_timelineGroupByOutputType = {
    tml_id: number
    tml_uid: number
    tml_cat: number
    tml_type: number
    tml_related: string
    tml_memo: string
    tml_img: string
    tml_batch: number
    tml_source: number
    tml_replies: number
    tml_dateline: number
    tml_status: number
    _count: Chii_timelineCountAggregateOutputType | null
    _avg: Chii_timelineAvgAggregateOutputType | null
    _sum: Chii_timelineSumAggregateOutputType | null
    _min: Chii_timelineMinAggregateOutputType | null
    _max: Chii_timelineMaxAggregateOutputType | null
  }

  type GetChii_timelineGroupByPayload<T extends Chii_timelineGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_timelineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_timelineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_timelineGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_timelineGroupByOutputType[P]>
        }
      >
    >


  export type chii_timelineSelect = {
    tml_id?: boolean
    tml_uid?: boolean
    tml_cat?: boolean
    tml_type?: boolean
    tml_related?: boolean
    tml_memo?: boolean
    tml_img?: boolean
    tml_batch?: boolean
    tml_source?: boolean
    tml_replies?: boolean
    tml_dateline?: boolean
    tml_status?: boolean
  }


  export type chii_timelineGetPayload<S extends boolean | null | undefined | chii_timelineArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_timeline :
    S extends undefined ? never :
    S extends { include: any } & (chii_timelineArgs | chii_timelineFindManyArgs)
    ? chii_timeline 
    : S extends { select: any } & (chii_timelineArgs | chii_timelineFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_timeline ? chii_timeline[P] : never
  } 
      : chii_timeline


  type chii_timelineCountArgs = Merge<
    Omit<chii_timelineFindManyArgs, 'select' | 'include'> & {
      select?: Chii_timelineCountAggregateInputType | true
    }
  >

  export interface chii_timelineDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_timeline that matches the filter.
     * @param {chii_timelineFindUniqueArgs} args - Arguments to find a Chii_timeline
     * @example
     * // Get one Chii_timeline
     * const chii_timeline = await prisma.chii_timeline.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_timelineFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_timelineFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_timeline'> extends True ? Prisma__chii_timelineClient<chii_timelineGetPayload<T>> : Prisma__chii_timelineClient<chii_timelineGetPayload<T> | null, null>

    /**
     * Find one Chii_timeline that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_timelineFindUniqueOrThrowArgs} args - Arguments to find a Chii_timeline
     * @example
     * // Get one Chii_timeline
     * const chii_timeline = await prisma.chii_timeline.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_timelineFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_timelineFindUniqueOrThrowArgs>
    ): Prisma__chii_timelineClient<chii_timelineGetPayload<T>>

    /**
     * Find the first Chii_timeline that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_timelineFindFirstArgs} args - Arguments to find a Chii_timeline
     * @example
     * // Get one Chii_timeline
     * const chii_timeline = await prisma.chii_timeline.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_timelineFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_timelineFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_timeline'> extends True ? Prisma__chii_timelineClient<chii_timelineGetPayload<T>> : Prisma__chii_timelineClient<chii_timelineGetPayload<T> | null, null>

    /**
     * Find the first Chii_timeline that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_timelineFindFirstOrThrowArgs} args - Arguments to find a Chii_timeline
     * @example
     * // Get one Chii_timeline
     * const chii_timeline = await prisma.chii_timeline.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_timelineFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_timelineFindFirstOrThrowArgs>
    ): Prisma__chii_timelineClient<chii_timelineGetPayload<T>>

    /**
     * Find zero or more Chii_timelines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_timelineFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_timelines
     * const chii_timelines = await prisma.chii_timeline.findMany()
     * 
     * // Get first 10 Chii_timelines
     * const chii_timelines = await prisma.chii_timeline.findMany({ take: 10 })
     * 
     * // Only select the `tml_id`
     * const chii_timelineWithTml_idOnly = await prisma.chii_timeline.findMany({ select: { tml_id: true } })
     * 
    **/
    findMany<T extends chii_timelineFindManyArgs>(
      args?: SelectSubset<T, chii_timelineFindManyArgs>
    ): PrismaPromise<Array<chii_timelineGetPayload<T>>>

    /**
     * Create a Chii_timeline.
     * @param {chii_timelineCreateArgs} args - Arguments to create a Chii_timeline.
     * @example
     * // Create one Chii_timeline
     * const Chii_timeline = await prisma.chii_timeline.create({
     *   data: {
     *     // ... data to create a Chii_timeline
     *   }
     * })
     * 
    **/
    create<T extends chii_timelineCreateArgs>(
      args: SelectSubset<T, chii_timelineCreateArgs>
    ): Prisma__chii_timelineClient<chii_timelineGetPayload<T>>

    /**
     * Create many Chii_timelines.
     *     @param {chii_timelineCreateManyArgs} args - Arguments to create many Chii_timelines.
     *     @example
     *     // Create many Chii_timelines
     *     const chii_timeline = await prisma.chii_timeline.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_timelineCreateManyArgs>(
      args?: SelectSubset<T, chii_timelineCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_timeline.
     * @param {chii_timelineDeleteArgs} args - Arguments to delete one Chii_timeline.
     * @example
     * // Delete one Chii_timeline
     * const Chii_timeline = await prisma.chii_timeline.delete({
     *   where: {
     *     // ... filter to delete one Chii_timeline
     *   }
     * })
     * 
    **/
    delete<T extends chii_timelineDeleteArgs>(
      args: SelectSubset<T, chii_timelineDeleteArgs>
    ): Prisma__chii_timelineClient<chii_timelineGetPayload<T>>

    /**
     * Update one Chii_timeline.
     * @param {chii_timelineUpdateArgs} args - Arguments to update one Chii_timeline.
     * @example
     * // Update one Chii_timeline
     * const chii_timeline = await prisma.chii_timeline.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_timelineUpdateArgs>(
      args: SelectSubset<T, chii_timelineUpdateArgs>
    ): Prisma__chii_timelineClient<chii_timelineGetPayload<T>>

    /**
     * Delete zero or more Chii_timelines.
     * @param {chii_timelineDeleteManyArgs} args - Arguments to filter Chii_timelines to delete.
     * @example
     * // Delete a few Chii_timelines
     * const { count } = await prisma.chii_timeline.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_timelineDeleteManyArgs>(
      args?: SelectSubset<T, chii_timelineDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_timelines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_timelineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_timelines
     * const chii_timeline = await prisma.chii_timeline.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_timelineUpdateManyArgs>(
      args: SelectSubset<T, chii_timelineUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_timeline.
     * @param {chii_timelineUpsertArgs} args - Arguments to update or create a Chii_timeline.
     * @example
     * // Update or create a Chii_timeline
     * const chii_timeline = await prisma.chii_timeline.upsert({
     *   create: {
     *     // ... data to create a Chii_timeline
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_timeline we want to update
     *   }
     * })
    **/
    upsert<T extends chii_timelineUpsertArgs>(
      args: SelectSubset<T, chii_timelineUpsertArgs>
    ): Prisma__chii_timelineClient<chii_timelineGetPayload<T>>

    /**
     * Count the number of Chii_timelines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_timelineCountArgs} args - Arguments to filter Chii_timelines to count.
     * @example
     * // Count the number of Chii_timelines
     * const count = await prisma.chii_timeline.count({
     *   where: {
     *     // ... the filter for the Chii_timelines we want to count
     *   }
     * })
    **/
    count<T extends chii_timelineCountArgs>(
      args?: Subset<T, chii_timelineCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_timelineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_timeline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_timelineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_timelineAggregateArgs>(args: Subset<T, Chii_timelineAggregateArgs>): PrismaPromise<GetChii_timelineAggregateType<T>>

    /**
     * Group by Chii_timeline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_timelineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_timelineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_timelineGroupByArgs['orderBy'] }
        : { orderBy?: Chii_timelineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_timelineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_timelineGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_timeline.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_timelineClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_timeline base type for findUnique actions
   */
  export type chii_timelineFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_timeline
     * 
    **/
    select?: chii_timelineSelect | null
    /**
     * Filter, which chii_timeline to fetch.
     * 
    **/
    where: chii_timelineWhereUniqueInput
  }

  /**
   * chii_timeline: findUnique
   */
  export interface chii_timelineFindUniqueArgs extends chii_timelineFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_timeline findUniqueOrThrow
   */
  export type chii_timelineFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_timeline
     * 
    **/
    select?: chii_timelineSelect | null
    /**
     * Filter, which chii_timeline to fetch.
     * 
    **/
    where: chii_timelineWhereUniqueInput
  }


  /**
   * chii_timeline base type for findFirst actions
   */
  export type chii_timelineFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_timeline
     * 
    **/
    select?: chii_timelineSelect | null
    /**
     * Filter, which chii_timeline to fetch.
     * 
    **/
    where?: chii_timelineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_timelines to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_timelineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_timelines.
     * 
    **/
    cursor?: chii_timelineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_timelines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_timelines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_timelines.
     * 
    **/
    distinct?: Enumerable<Chii_timelineScalarFieldEnum>
  }

  /**
   * chii_timeline: findFirst
   */
  export interface chii_timelineFindFirstArgs extends chii_timelineFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_timeline findFirstOrThrow
   */
  export type chii_timelineFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_timeline
     * 
    **/
    select?: chii_timelineSelect | null
    /**
     * Filter, which chii_timeline to fetch.
     * 
    **/
    where?: chii_timelineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_timelines to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_timelineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_timelines.
     * 
    **/
    cursor?: chii_timelineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_timelines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_timelines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_timelines.
     * 
    **/
    distinct?: Enumerable<Chii_timelineScalarFieldEnum>
  }


  /**
   * chii_timeline findMany
   */
  export type chii_timelineFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_timeline
     * 
    **/
    select?: chii_timelineSelect | null
    /**
     * Filter, which chii_timelines to fetch.
     * 
    **/
    where?: chii_timelineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_timelines to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_timelineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_timelines.
     * 
    **/
    cursor?: chii_timelineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_timelines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_timelines.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_timelineScalarFieldEnum>
  }


  /**
   * chii_timeline create
   */
  export type chii_timelineCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_timeline
     * 
    **/
    select?: chii_timelineSelect | null
    /**
     * The data needed to create a chii_timeline.
     * 
    **/
    data: XOR<chii_timelineCreateInput, chii_timelineUncheckedCreateInput>
  }


  /**
   * chii_timeline createMany
   */
  export type chii_timelineCreateManyArgs = {
    /**
     * The data used to create many chii_timelines.
     * 
    **/
    data: Enumerable<chii_timelineCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_timeline update
   */
  export type chii_timelineUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_timeline
     * 
    **/
    select?: chii_timelineSelect | null
    /**
     * The data needed to update a chii_timeline.
     * 
    **/
    data: XOR<chii_timelineUpdateInput, chii_timelineUncheckedUpdateInput>
    /**
     * Choose, which chii_timeline to update.
     * 
    **/
    where: chii_timelineWhereUniqueInput
  }


  /**
   * chii_timeline updateMany
   */
  export type chii_timelineUpdateManyArgs = {
    /**
     * The data used to update chii_timelines.
     * 
    **/
    data: XOR<chii_timelineUpdateManyMutationInput, chii_timelineUncheckedUpdateManyInput>
    /**
     * Filter which chii_timelines to update
     * 
    **/
    where?: chii_timelineWhereInput
  }


  /**
   * chii_timeline upsert
   */
  export type chii_timelineUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_timeline
     * 
    **/
    select?: chii_timelineSelect | null
    /**
     * The filter to search for the chii_timeline to update in case it exists.
     * 
    **/
    where: chii_timelineWhereUniqueInput
    /**
     * In case the chii_timeline found by the `where` argument doesn't exist, create a new chii_timeline with this data.
     * 
    **/
    create: XOR<chii_timelineCreateInput, chii_timelineUncheckedCreateInput>
    /**
     * In case the chii_timeline was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_timelineUpdateInput, chii_timelineUncheckedUpdateInput>
  }


  /**
   * chii_timeline delete
   */
  export type chii_timelineDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_timeline
     * 
    **/
    select?: chii_timelineSelect | null
    /**
     * Filter which chii_timeline to delete.
     * 
    **/
    where: chii_timelineWhereUniqueInput
  }


  /**
   * chii_timeline deleteMany
   */
  export type chii_timelineDeleteManyArgs = {
    /**
     * Filter which chii_timelines to delete
     * 
    **/
    where?: chii_timelineWhereInput
  }


  /**
   * chii_timeline without action
   */
  export type chii_timelineArgs = {
    /**
     * Select specific fields to fetch from the chii_timeline
     * 
    **/
    select?: chii_timelineSelect | null
  }



  /**
   * Model chii_usergroup
   */


  export type AggregateChii_usergroup = {
    _count: Chii_usergroupCountAggregateOutputType | null
    _avg: Chii_usergroupAvgAggregateOutputType | null
    _sum: Chii_usergroupSumAggregateOutputType | null
    _min: Chii_usergroupMinAggregateOutputType | null
    _max: Chii_usergroupMaxAggregateOutputType | null
  }

  export type Chii_usergroupAvgAggregateOutputType = {
    usr_grp_id: number | null
    usr_grp_dateline: number | null
  }

  export type Chii_usergroupSumAggregateOutputType = {
    usr_grp_id: number | null
    usr_grp_dateline: number | null
  }

  export type Chii_usergroupMinAggregateOutputType = {
    usr_grp_id: number | null
    usr_grp_name: string | null
    usr_grp_perm: string | null
    usr_grp_dateline: number | null
  }

  export type Chii_usergroupMaxAggregateOutputType = {
    usr_grp_id: number | null
    usr_grp_name: string | null
    usr_grp_perm: string | null
    usr_grp_dateline: number | null
  }

  export type Chii_usergroupCountAggregateOutputType = {
    usr_grp_id: number
    usr_grp_name: number
    usr_grp_perm: number
    usr_grp_dateline: number
    _all: number
  }


  export type Chii_usergroupAvgAggregateInputType = {
    usr_grp_id?: true
    usr_grp_dateline?: true
  }

  export type Chii_usergroupSumAggregateInputType = {
    usr_grp_id?: true
    usr_grp_dateline?: true
  }

  export type Chii_usergroupMinAggregateInputType = {
    usr_grp_id?: true
    usr_grp_name?: true
    usr_grp_perm?: true
    usr_grp_dateline?: true
  }

  export type Chii_usergroupMaxAggregateInputType = {
    usr_grp_id?: true
    usr_grp_name?: true
    usr_grp_perm?: true
    usr_grp_dateline?: true
  }

  export type Chii_usergroupCountAggregateInputType = {
    usr_grp_id?: true
    usr_grp_name?: true
    usr_grp_perm?: true
    usr_grp_dateline?: true
    _all?: true
  }

  export type Chii_usergroupAggregateArgs = {
    /**
     * Filter which chii_usergroup to aggregate.
     * 
    **/
    where?: chii_usergroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_usergroups to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_usergroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chii_usergroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_usergroups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_usergroups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chii_usergroups
    **/
    _count?: true | Chii_usergroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Chii_usergroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Chii_usergroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Chii_usergroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Chii_usergroupMaxAggregateInputType
  }

  export type GetChii_usergroupAggregateType<T extends Chii_usergroupAggregateArgs> = {
        [P in keyof T & keyof AggregateChii_usergroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChii_usergroup[P]>
      : GetScalarType<T[P], AggregateChii_usergroup[P]>
  }




  export type Chii_usergroupGroupByArgs = {
    where?: chii_usergroupWhereInput
    orderBy?: Enumerable<chii_usergroupOrderByWithAggregationInput>
    by: Array<Chii_usergroupScalarFieldEnum>
    having?: chii_usergroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Chii_usergroupCountAggregateInputType | true
    _avg?: Chii_usergroupAvgAggregateInputType
    _sum?: Chii_usergroupSumAggregateInputType
    _min?: Chii_usergroupMinAggregateInputType
    _max?: Chii_usergroupMaxAggregateInputType
  }


  export type Chii_usergroupGroupByOutputType = {
    usr_grp_id: number
    usr_grp_name: string
    usr_grp_perm: string
    usr_grp_dateline: number
    _count: Chii_usergroupCountAggregateOutputType | null
    _avg: Chii_usergroupAvgAggregateOutputType | null
    _sum: Chii_usergroupSumAggregateOutputType | null
    _min: Chii_usergroupMinAggregateOutputType | null
    _max: Chii_usergroupMaxAggregateOutputType | null
  }

  type GetChii_usergroupGroupByPayload<T extends Chii_usergroupGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Chii_usergroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Chii_usergroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Chii_usergroupGroupByOutputType[P]>
            : GetScalarType<T[P], Chii_usergroupGroupByOutputType[P]>
        }
      >
    >


  export type chii_usergroupSelect = {
    usr_grp_id?: boolean
    usr_grp_name?: boolean
    usr_grp_perm?: boolean
    usr_grp_dateline?: boolean
  }


  export type chii_usergroupGetPayload<S extends boolean | null | undefined | chii_usergroupArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chii_usergroup :
    S extends undefined ? never :
    S extends { include: any } & (chii_usergroupArgs | chii_usergroupFindManyArgs)
    ? chii_usergroup 
    : S extends { select: any } & (chii_usergroupArgs | chii_usergroupFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof chii_usergroup ? chii_usergroup[P] : never
  } 
      : chii_usergroup


  type chii_usergroupCountArgs = Merge<
    Omit<chii_usergroupFindManyArgs, 'select' | 'include'> & {
      select?: Chii_usergroupCountAggregateInputType | true
    }
  >

  export interface chii_usergroupDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chii_usergroup that matches the filter.
     * @param {chii_usergroupFindUniqueArgs} args - Arguments to find a Chii_usergroup
     * @example
     * // Get one Chii_usergroup
     * const chii_usergroup = await prisma.chii_usergroup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chii_usergroupFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chii_usergroupFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chii_usergroup'> extends True ? Prisma__chii_usergroupClient<chii_usergroupGetPayload<T>> : Prisma__chii_usergroupClient<chii_usergroupGetPayload<T> | null, null>

    /**
     * Find one Chii_usergroup that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chii_usergroupFindUniqueOrThrowArgs} args - Arguments to find a Chii_usergroup
     * @example
     * // Get one Chii_usergroup
     * const chii_usergroup = await prisma.chii_usergroup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chii_usergroupFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chii_usergroupFindUniqueOrThrowArgs>
    ): Prisma__chii_usergroupClient<chii_usergroupGetPayload<T>>

    /**
     * Find the first Chii_usergroup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_usergroupFindFirstArgs} args - Arguments to find a Chii_usergroup
     * @example
     * // Get one Chii_usergroup
     * const chii_usergroup = await prisma.chii_usergroup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chii_usergroupFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chii_usergroupFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chii_usergroup'> extends True ? Prisma__chii_usergroupClient<chii_usergroupGetPayload<T>> : Prisma__chii_usergroupClient<chii_usergroupGetPayload<T> | null, null>

    /**
     * Find the first Chii_usergroup that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_usergroupFindFirstOrThrowArgs} args - Arguments to find a Chii_usergroup
     * @example
     * // Get one Chii_usergroup
     * const chii_usergroup = await prisma.chii_usergroup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chii_usergroupFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chii_usergroupFindFirstOrThrowArgs>
    ): Prisma__chii_usergroupClient<chii_usergroupGetPayload<T>>

    /**
     * Find zero or more Chii_usergroups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_usergroupFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chii_usergroups
     * const chii_usergroups = await prisma.chii_usergroup.findMany()
     * 
     * // Get first 10 Chii_usergroups
     * const chii_usergroups = await prisma.chii_usergroup.findMany({ take: 10 })
     * 
     * // Only select the `usr_grp_id`
     * const chii_usergroupWithUsr_grp_idOnly = await prisma.chii_usergroup.findMany({ select: { usr_grp_id: true } })
     * 
    **/
    findMany<T extends chii_usergroupFindManyArgs>(
      args?: SelectSubset<T, chii_usergroupFindManyArgs>
    ): PrismaPromise<Array<chii_usergroupGetPayload<T>>>

    /**
     * Create a Chii_usergroup.
     * @param {chii_usergroupCreateArgs} args - Arguments to create a Chii_usergroup.
     * @example
     * // Create one Chii_usergroup
     * const Chii_usergroup = await prisma.chii_usergroup.create({
     *   data: {
     *     // ... data to create a Chii_usergroup
     *   }
     * })
     * 
    **/
    create<T extends chii_usergroupCreateArgs>(
      args: SelectSubset<T, chii_usergroupCreateArgs>
    ): Prisma__chii_usergroupClient<chii_usergroupGetPayload<T>>

    /**
     * Create many Chii_usergroups.
     *     @param {chii_usergroupCreateManyArgs} args - Arguments to create many Chii_usergroups.
     *     @example
     *     // Create many Chii_usergroups
     *     const chii_usergroup = await prisma.chii_usergroup.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chii_usergroupCreateManyArgs>(
      args?: SelectSubset<T, chii_usergroupCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Chii_usergroup.
     * @param {chii_usergroupDeleteArgs} args - Arguments to delete one Chii_usergroup.
     * @example
     * // Delete one Chii_usergroup
     * const Chii_usergroup = await prisma.chii_usergroup.delete({
     *   where: {
     *     // ... filter to delete one Chii_usergroup
     *   }
     * })
     * 
    **/
    delete<T extends chii_usergroupDeleteArgs>(
      args: SelectSubset<T, chii_usergroupDeleteArgs>
    ): Prisma__chii_usergroupClient<chii_usergroupGetPayload<T>>

    /**
     * Update one Chii_usergroup.
     * @param {chii_usergroupUpdateArgs} args - Arguments to update one Chii_usergroup.
     * @example
     * // Update one Chii_usergroup
     * const chii_usergroup = await prisma.chii_usergroup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chii_usergroupUpdateArgs>(
      args: SelectSubset<T, chii_usergroupUpdateArgs>
    ): Prisma__chii_usergroupClient<chii_usergroupGetPayload<T>>

    /**
     * Delete zero or more Chii_usergroups.
     * @param {chii_usergroupDeleteManyArgs} args - Arguments to filter Chii_usergroups to delete.
     * @example
     * // Delete a few Chii_usergroups
     * const { count } = await prisma.chii_usergroup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chii_usergroupDeleteManyArgs>(
      args?: SelectSubset<T, chii_usergroupDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chii_usergroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_usergroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chii_usergroups
     * const chii_usergroup = await prisma.chii_usergroup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chii_usergroupUpdateManyArgs>(
      args: SelectSubset<T, chii_usergroupUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chii_usergroup.
     * @param {chii_usergroupUpsertArgs} args - Arguments to update or create a Chii_usergroup.
     * @example
     * // Update or create a Chii_usergroup
     * const chii_usergroup = await prisma.chii_usergroup.upsert({
     *   create: {
     *     // ... data to create a Chii_usergroup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chii_usergroup we want to update
     *   }
     * })
    **/
    upsert<T extends chii_usergroupUpsertArgs>(
      args: SelectSubset<T, chii_usergroupUpsertArgs>
    ): Prisma__chii_usergroupClient<chii_usergroupGetPayload<T>>

    /**
     * Count the number of Chii_usergroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chii_usergroupCountArgs} args - Arguments to filter Chii_usergroups to count.
     * @example
     * // Count the number of Chii_usergroups
     * const count = await prisma.chii_usergroup.count({
     *   where: {
     *     // ... the filter for the Chii_usergroups we want to count
     *   }
     * })
    **/
    count<T extends chii_usergroupCountArgs>(
      args?: Subset<T, chii_usergroupCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Chii_usergroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chii_usergroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_usergroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Chii_usergroupAggregateArgs>(args: Subset<T, Chii_usergroupAggregateArgs>): PrismaPromise<GetChii_usergroupAggregateType<T>>

    /**
     * Group by Chii_usergroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Chii_usergroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Chii_usergroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Chii_usergroupGroupByArgs['orderBy'] }
        : { orderBy?: Chii_usergroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Chii_usergroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChii_usergroupGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chii_usergroup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chii_usergroupClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chii_usergroup base type for findUnique actions
   */
  export type chii_usergroupFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chii_usergroup
     * 
    **/
    select?: chii_usergroupSelect | null
    /**
     * Filter, which chii_usergroup to fetch.
     * 
    **/
    where: chii_usergroupWhereUniqueInput
  }

  /**
   * chii_usergroup: findUnique
   */
  export interface chii_usergroupFindUniqueArgs extends chii_usergroupFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_usergroup findUniqueOrThrow
   */
  export type chii_usergroupFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_usergroup
     * 
    **/
    select?: chii_usergroupSelect | null
    /**
     * Filter, which chii_usergroup to fetch.
     * 
    **/
    where: chii_usergroupWhereUniqueInput
  }


  /**
   * chii_usergroup base type for findFirst actions
   */
  export type chii_usergroupFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chii_usergroup
     * 
    **/
    select?: chii_usergroupSelect | null
    /**
     * Filter, which chii_usergroup to fetch.
     * 
    **/
    where?: chii_usergroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_usergroups to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_usergroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_usergroups.
     * 
    **/
    cursor?: chii_usergroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_usergroups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_usergroups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_usergroups.
     * 
    **/
    distinct?: Enumerable<Chii_usergroupScalarFieldEnum>
  }

  /**
   * chii_usergroup: findFirst
   */
  export interface chii_usergroupFindFirstArgs extends chii_usergroupFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chii_usergroup findFirstOrThrow
   */
  export type chii_usergroupFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the chii_usergroup
     * 
    **/
    select?: chii_usergroupSelect | null
    /**
     * Filter, which chii_usergroup to fetch.
     * 
    **/
    where?: chii_usergroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_usergroups to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_usergroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chii_usergroups.
     * 
    **/
    cursor?: chii_usergroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_usergroups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_usergroups.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chii_usergroups.
     * 
    **/
    distinct?: Enumerable<Chii_usergroupScalarFieldEnum>
  }


  /**
   * chii_usergroup findMany
   */
  export type chii_usergroupFindManyArgs = {
    /**
     * Select specific fields to fetch from the chii_usergroup
     * 
    **/
    select?: chii_usergroupSelect | null
    /**
     * Filter, which chii_usergroups to fetch.
     * 
    **/
    where?: chii_usergroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chii_usergroups to fetch.
     * 
    **/
    orderBy?: Enumerable<chii_usergroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chii_usergroups.
     * 
    **/
    cursor?: chii_usergroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chii_usergroups from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chii_usergroups.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Chii_usergroupScalarFieldEnum>
  }


  /**
   * chii_usergroup create
   */
  export type chii_usergroupCreateArgs = {
    /**
     * Select specific fields to fetch from the chii_usergroup
     * 
    **/
    select?: chii_usergroupSelect | null
    /**
     * The data needed to create a chii_usergroup.
     * 
    **/
    data: XOR<chii_usergroupCreateInput, chii_usergroupUncheckedCreateInput>
  }


  /**
   * chii_usergroup createMany
   */
  export type chii_usergroupCreateManyArgs = {
    /**
     * The data used to create many chii_usergroups.
     * 
    **/
    data: Enumerable<chii_usergroupCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chii_usergroup update
   */
  export type chii_usergroupUpdateArgs = {
    /**
     * Select specific fields to fetch from the chii_usergroup
     * 
    **/
    select?: chii_usergroupSelect | null
    /**
     * The data needed to update a chii_usergroup.
     * 
    **/
    data: XOR<chii_usergroupUpdateInput, chii_usergroupUncheckedUpdateInput>
    /**
     * Choose, which chii_usergroup to update.
     * 
    **/
    where: chii_usergroupWhereUniqueInput
  }


  /**
   * chii_usergroup updateMany
   */
  export type chii_usergroupUpdateManyArgs = {
    /**
     * The data used to update chii_usergroups.
     * 
    **/
    data: XOR<chii_usergroupUpdateManyMutationInput, chii_usergroupUncheckedUpdateManyInput>
    /**
     * Filter which chii_usergroups to update
     * 
    **/
    where?: chii_usergroupWhereInput
  }


  /**
   * chii_usergroup upsert
   */
  export type chii_usergroupUpsertArgs = {
    /**
     * Select specific fields to fetch from the chii_usergroup
     * 
    **/
    select?: chii_usergroupSelect | null
    /**
     * The filter to search for the chii_usergroup to update in case it exists.
     * 
    **/
    where: chii_usergroupWhereUniqueInput
    /**
     * In case the chii_usergroup found by the `where` argument doesn't exist, create a new chii_usergroup with this data.
     * 
    **/
    create: XOR<chii_usergroupCreateInput, chii_usergroupUncheckedCreateInput>
    /**
     * In case the chii_usergroup was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chii_usergroupUpdateInput, chii_usergroupUncheckedUpdateInput>
  }


  /**
   * chii_usergroup delete
   */
  export type chii_usergroupDeleteArgs = {
    /**
     * Select specific fields to fetch from the chii_usergroup
     * 
    **/
    select?: chii_usergroupSelect | null
    /**
     * Filter which chii_usergroup to delete.
     * 
    **/
    where: chii_usergroupWhereUniqueInput
  }


  /**
   * chii_usergroup deleteMany
   */
  export type chii_usergroupDeleteManyArgs = {
    /**
     * Filter which chii_usergroups to delete
     * 
    **/
    where?: chii_usergroupWhereInput
  }


  /**
   * chii_usergroup without action
   */
  export type chii_usergroupArgs = {
    /**
     * Select specific fields to fetch from the chii_usergroup
     * 
    **/
    select?: chii_usergroupSelect | null
  }



  /**
   * Model example
   */


  export type AggregateExample = {
    _count: ExampleCountAggregateOutputType | null
    _avg: ExampleAvgAggregateOutputType | null
    _sum: ExampleSumAggregateOutputType | null
    _min: ExampleMinAggregateOutputType | null
    _max: ExampleMaxAggregateOutputType | null
  }

  export type ExampleAvgAggregateOutputType = {
    id: number | null
  }

  export type ExampleSumAggregateOutputType = {
    id: number | null
  }

  export type ExampleMinAggregateOutputType = {
    id: number | null
    time: Date | null
  }

  export type ExampleMaxAggregateOutputType = {
    id: number | null
    time: Date | null
  }

  export type ExampleCountAggregateOutputType = {
    id: number
    time: number
    _all: number
  }


  export type ExampleAvgAggregateInputType = {
    id?: true
  }

  export type ExampleSumAggregateInputType = {
    id?: true
  }

  export type ExampleMinAggregateInputType = {
    id?: true
    time?: true
  }

  export type ExampleMaxAggregateInputType = {
    id?: true
    time?: true
  }

  export type ExampleCountAggregateInputType = {
    id?: true
    time?: true
    _all?: true
  }

  export type ExampleAggregateArgs = {
    /**
     * Filter which example to aggregate.
     * 
    **/
    where?: exampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of examples to fetch.
     * 
    **/
    orderBy?: Enumerable<exampleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: exampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` examples from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` examples.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned examples
    **/
    _count?: true | ExampleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExampleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExampleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExampleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExampleMaxAggregateInputType
  }

  export type GetExampleAggregateType<T extends ExampleAggregateArgs> = {
        [P in keyof T & keyof AggregateExample]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExample[P]>
      : GetScalarType<T[P], AggregateExample[P]>
  }




  export type ExampleGroupByArgs = {
    where?: exampleWhereInput
    orderBy?: Enumerable<exampleOrderByWithAggregationInput>
    by: Array<ExampleScalarFieldEnum>
    having?: exampleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExampleCountAggregateInputType | true
    _avg?: ExampleAvgAggregateInputType
    _sum?: ExampleSumAggregateInputType
    _min?: ExampleMinAggregateInputType
    _max?: ExampleMaxAggregateInputType
  }


  export type ExampleGroupByOutputType = {
    id: number
    time: Date
    _count: ExampleCountAggregateOutputType | null
    _avg: ExampleAvgAggregateOutputType | null
    _sum: ExampleSumAggregateOutputType | null
    _min: ExampleMinAggregateOutputType | null
    _max: ExampleMaxAggregateOutputType | null
  }

  type GetExampleGroupByPayload<T extends ExampleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ExampleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExampleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExampleGroupByOutputType[P]>
            : GetScalarType<T[P], ExampleGroupByOutputType[P]>
        }
      >
    >


  export type exampleSelect = {
    id?: boolean
    time?: boolean
  }


  export type exampleGetPayload<S extends boolean | null | undefined | exampleArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? example :
    S extends undefined ? never :
    S extends { include: any } & (exampleArgs | exampleFindManyArgs)
    ? example 
    : S extends { select: any } & (exampleArgs | exampleFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof example ? example[P] : never
  } 
      : example


  type exampleCountArgs = Merge<
    Omit<exampleFindManyArgs, 'select' | 'include'> & {
      select?: ExampleCountAggregateInputType | true
    }
  >

  export interface exampleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Example that matches the filter.
     * @param {exampleFindUniqueArgs} args - Arguments to find a Example
     * @example
     * // Get one Example
     * const example = await prisma.example.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends exampleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, exampleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'example'> extends True ? Prisma__exampleClient<exampleGetPayload<T>> : Prisma__exampleClient<exampleGetPayload<T> | null, null>

    /**
     * Find one Example that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {exampleFindUniqueOrThrowArgs} args - Arguments to find a Example
     * @example
     * // Get one Example
     * const example = await prisma.example.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends exampleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, exampleFindUniqueOrThrowArgs>
    ): Prisma__exampleClient<exampleGetPayload<T>>

    /**
     * Find the first Example that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exampleFindFirstArgs} args - Arguments to find a Example
     * @example
     * // Get one Example
     * const example = await prisma.example.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends exampleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, exampleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'example'> extends True ? Prisma__exampleClient<exampleGetPayload<T>> : Prisma__exampleClient<exampleGetPayload<T> | null, null>

    /**
     * Find the first Example that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exampleFindFirstOrThrowArgs} args - Arguments to find a Example
     * @example
     * // Get one Example
     * const example = await prisma.example.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends exampleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, exampleFindFirstOrThrowArgs>
    ): Prisma__exampleClient<exampleGetPayload<T>>

    /**
     * Find zero or more Examples that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exampleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Examples
     * const examples = await prisma.example.findMany()
     * 
     * // Get first 10 Examples
     * const examples = await prisma.example.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exampleWithIdOnly = await prisma.example.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends exampleFindManyArgs>(
      args?: SelectSubset<T, exampleFindManyArgs>
    ): PrismaPromise<Array<exampleGetPayload<T>>>

    /**
     * Create a Example.
     * @param {exampleCreateArgs} args - Arguments to create a Example.
     * @example
     * // Create one Example
     * const Example = await prisma.example.create({
     *   data: {
     *     // ... data to create a Example
     *   }
     * })
     * 
    **/
    create<T extends exampleCreateArgs>(
      args: SelectSubset<T, exampleCreateArgs>
    ): Prisma__exampleClient<exampleGetPayload<T>>

    /**
     * Create many Examples.
     *     @param {exampleCreateManyArgs} args - Arguments to create many Examples.
     *     @example
     *     // Create many Examples
     *     const example = await prisma.example.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends exampleCreateManyArgs>(
      args?: SelectSubset<T, exampleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Example.
     * @param {exampleDeleteArgs} args - Arguments to delete one Example.
     * @example
     * // Delete one Example
     * const Example = await prisma.example.delete({
     *   where: {
     *     // ... filter to delete one Example
     *   }
     * })
     * 
    **/
    delete<T extends exampleDeleteArgs>(
      args: SelectSubset<T, exampleDeleteArgs>
    ): Prisma__exampleClient<exampleGetPayload<T>>

    /**
     * Update one Example.
     * @param {exampleUpdateArgs} args - Arguments to update one Example.
     * @example
     * // Update one Example
     * const example = await prisma.example.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends exampleUpdateArgs>(
      args: SelectSubset<T, exampleUpdateArgs>
    ): Prisma__exampleClient<exampleGetPayload<T>>

    /**
     * Delete zero or more Examples.
     * @param {exampleDeleteManyArgs} args - Arguments to filter Examples to delete.
     * @example
     * // Delete a few Examples
     * const { count } = await prisma.example.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends exampleDeleteManyArgs>(
      args?: SelectSubset<T, exampleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Examples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exampleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Examples
     * const example = await prisma.example.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends exampleUpdateManyArgs>(
      args: SelectSubset<T, exampleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Example.
     * @param {exampleUpsertArgs} args - Arguments to update or create a Example.
     * @example
     * // Update or create a Example
     * const example = await prisma.example.upsert({
     *   create: {
     *     // ... data to create a Example
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Example we want to update
     *   }
     * })
    **/
    upsert<T extends exampleUpsertArgs>(
      args: SelectSubset<T, exampleUpsertArgs>
    ): Prisma__exampleClient<exampleGetPayload<T>>

    /**
     * Count the number of Examples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exampleCountArgs} args - Arguments to filter Examples to count.
     * @example
     * // Count the number of Examples
     * const count = await prisma.example.count({
     *   where: {
     *     // ... the filter for the Examples we want to count
     *   }
     * })
    **/
    count<T extends exampleCountArgs>(
      args?: Subset<T, exampleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExampleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Example.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExampleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExampleAggregateArgs>(args: Subset<T, ExampleAggregateArgs>): PrismaPromise<GetExampleAggregateType<T>>

    /**
     * Group by Example.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExampleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExampleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExampleGroupByArgs['orderBy'] }
        : { orderBy?: ExampleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExampleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExampleGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for example.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__exampleClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * example base type for findUnique actions
   */
  export type exampleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the example
     * 
    **/
    select?: exampleSelect | null
    /**
     * Filter, which example to fetch.
     * 
    **/
    where: exampleWhereUniqueInput
  }

  /**
   * example: findUnique
   */
  export interface exampleFindUniqueArgs extends exampleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * example findUniqueOrThrow
   */
  export type exampleFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the example
     * 
    **/
    select?: exampleSelect | null
    /**
     * Filter, which example to fetch.
     * 
    **/
    where: exampleWhereUniqueInput
  }


  /**
   * example base type for findFirst actions
   */
  export type exampleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the example
     * 
    **/
    select?: exampleSelect | null
    /**
     * Filter, which example to fetch.
     * 
    **/
    where?: exampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of examples to fetch.
     * 
    **/
    orderBy?: Enumerable<exampleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for examples.
     * 
    **/
    cursor?: exampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` examples from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` examples.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of examples.
     * 
    **/
    distinct?: Enumerable<ExampleScalarFieldEnum>
  }

  /**
   * example: findFirst
   */
  export interface exampleFindFirstArgs extends exampleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * example findFirstOrThrow
   */
  export type exampleFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the example
     * 
    **/
    select?: exampleSelect | null
    /**
     * Filter, which example to fetch.
     * 
    **/
    where?: exampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of examples to fetch.
     * 
    **/
    orderBy?: Enumerable<exampleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for examples.
     * 
    **/
    cursor?: exampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` examples from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` examples.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of examples.
     * 
    **/
    distinct?: Enumerable<ExampleScalarFieldEnum>
  }


  /**
   * example findMany
   */
  export type exampleFindManyArgs = {
    /**
     * Select specific fields to fetch from the example
     * 
    **/
    select?: exampleSelect | null
    /**
     * Filter, which examples to fetch.
     * 
    **/
    where?: exampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of examples to fetch.
     * 
    **/
    orderBy?: Enumerable<exampleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing examples.
     * 
    **/
    cursor?: exampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` examples from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` examples.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ExampleScalarFieldEnum>
  }


  /**
   * example create
   */
  export type exampleCreateArgs = {
    /**
     * Select specific fields to fetch from the example
     * 
    **/
    select?: exampleSelect | null
    /**
     * The data needed to create a example.
     * 
    **/
    data: XOR<exampleCreateInput, exampleUncheckedCreateInput>
  }


  /**
   * example createMany
   */
  export type exampleCreateManyArgs = {
    /**
     * The data used to create many examples.
     * 
    **/
    data: Enumerable<exampleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * example update
   */
  export type exampleUpdateArgs = {
    /**
     * Select specific fields to fetch from the example
     * 
    **/
    select?: exampleSelect | null
    /**
     * The data needed to update a example.
     * 
    **/
    data: XOR<exampleUpdateInput, exampleUncheckedUpdateInput>
    /**
     * Choose, which example to update.
     * 
    **/
    where: exampleWhereUniqueInput
  }


  /**
   * example updateMany
   */
  export type exampleUpdateManyArgs = {
    /**
     * The data used to update examples.
     * 
    **/
    data: XOR<exampleUpdateManyMutationInput, exampleUncheckedUpdateManyInput>
    /**
     * Filter which examples to update
     * 
    **/
    where?: exampleWhereInput
  }


  /**
   * example upsert
   */
  export type exampleUpsertArgs = {
    /**
     * Select specific fields to fetch from the example
     * 
    **/
    select?: exampleSelect | null
    /**
     * The filter to search for the example to update in case it exists.
     * 
    **/
    where: exampleWhereUniqueInput
    /**
     * In case the example found by the `where` argument doesn't exist, create a new example with this data.
     * 
    **/
    create: XOR<exampleCreateInput, exampleUncheckedCreateInput>
    /**
     * In case the example was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<exampleUpdateInput, exampleUncheckedUpdateInput>
  }


  /**
   * example delete
   */
  export type exampleDeleteArgs = {
    /**
     * Select specific fields to fetch from the example
     * 
    **/
    select?: exampleSelect | null
    /**
     * Filter which example to delete.
     * 
    **/
    where: exampleWhereUniqueInput
  }


  /**
   * example deleteMany
   */
  export type exampleDeleteManyArgs = {
    /**
     * Filter which examples to delete
     * 
    **/
    where?: exampleWhereInput
  }


  /**
   * example without action
   */
  export type exampleArgs = {
    /**
     * Select specific fields to fetch from the example
     * 
    **/
    select?: exampleSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Chii_appsScalarFieldEnum: {
    app_id: 'app_id',
    app_type: 'app_type',
    app_creator: 'app_creator',
    app_name: 'app_name',
    app_desc: 'app_desc',
    app_url: 'app_url',
    app_collects: 'app_collects',
    app_status: 'app_status',
    app_timestamp: 'app_timestamp',
    app_lasttouch: 'app_lasttouch',
    app_ban: 'app_ban'
  };

  export type Chii_appsScalarFieldEnum = (typeof Chii_appsScalarFieldEnum)[keyof typeof Chii_appsScalarFieldEnum]


  export const Chii_charactersScalarFieldEnum: {
    crt_id: 'crt_id',
    crt_name: 'crt_name',
    crt_role: 'crt_role',
    crt_infobox: 'crt_infobox',
    crt_summary: 'crt_summary',
    crt_img: 'crt_img',
    crt_comment: 'crt_comment',
    crt_collects: 'crt_collects',
    crt_dateline: 'crt_dateline',
    crt_lastpost: 'crt_lastpost',
    crt_lock: 'crt_lock',
    crt_img_anidb: 'crt_img_anidb',
    crt_anidb_id: 'crt_anidb_id',
    crt_ban: 'crt_ban',
    crt_redirect: 'crt_redirect',
    crt_nsfw: 'crt_nsfw'
  };

  export type Chii_charactersScalarFieldEnum = (typeof Chii_charactersScalarFieldEnum)[keyof typeof Chii_charactersScalarFieldEnum]


  export const Chii_crt_cast_indexScalarFieldEnum: {
    crt_id: 'crt_id',
    prsn_id: 'prsn_id',
    subject_id: 'subject_id',
    subject_type_id: 'subject_type_id',
    summary: 'summary'
  };

  export type Chii_crt_cast_indexScalarFieldEnum = (typeof Chii_crt_cast_indexScalarFieldEnum)[keyof typeof Chii_crt_cast_indexScalarFieldEnum]


  export const Chii_crt_commentsScalarFieldEnum: {
    crt_pst_id: 'crt_pst_id',
    crt_pst_mid: 'crt_pst_mid',
    crt_pst_uid: 'crt_pst_uid',
    crt_pst_related: 'crt_pst_related',
    crt_pst_dateline: 'crt_pst_dateline',
    crt_pst_content: 'crt_pst_content'
  };

  export type Chii_crt_commentsScalarFieldEnum = (typeof Chii_crt_commentsScalarFieldEnum)[keyof typeof Chii_crt_commentsScalarFieldEnum]


  export const Chii_crt_subject_indexScalarFieldEnum: {
    crt_id: 'crt_id',
    subject_id: 'subject_id',
    subject_type_id: 'subject_type_id',
    crt_type: 'crt_type',
    ctr_appear_eps: 'ctr_appear_eps',
    crt_order: 'crt_order'
  };

  export type Chii_crt_subject_indexScalarFieldEnum = (typeof Chii_crt_subject_indexScalarFieldEnum)[keyof typeof Chii_crt_subject_indexScalarFieldEnum]


  export const Chii_ep_commentsScalarFieldEnum: {
    ep_pst_id: 'ep_pst_id',
    ep_pst_mid: 'ep_pst_mid',
    ep_pst_uid: 'ep_pst_uid',
    ep_pst_related: 'ep_pst_related',
    ep_pst_dateline: 'ep_pst_dateline',
    ep_pst_content: 'ep_pst_content'
  };

  export type Chii_ep_commentsScalarFieldEnum = (typeof Chii_ep_commentsScalarFieldEnum)[keyof typeof Chii_ep_commentsScalarFieldEnum]


  export const Chii_ep_revisionsScalarFieldEnum: {
    ep_rev_id: 'ep_rev_id',
    rev_sid: 'rev_sid',
    rev_eids: 'rev_eids',
    rev_ep_infobox: 'rev_ep_infobox',
    rev_creator: 'rev_creator',
    rev_version: 'rev_version',
    rev_dateline: 'rev_dateline',
    rev_edit_summary: 'rev_edit_summary'
  };

  export type Chii_ep_revisionsScalarFieldEnum = (typeof Chii_ep_revisionsScalarFieldEnum)[keyof typeof Chii_ep_revisionsScalarFieldEnum]


  export const Chii_ep_statusScalarFieldEnum: {
    ep_stt_id: 'ep_stt_id',
    ep_stt_uid: 'ep_stt_uid',
    ep_stt_sid: 'ep_stt_sid',
    ep_stt_on_prg: 'ep_stt_on_prg',
    ep_stt_status: 'ep_stt_status',
    ep_stt_lasttouch: 'ep_stt_lasttouch'
  };

  export type Chii_ep_statusScalarFieldEnum = (typeof Chii_ep_statusScalarFieldEnum)[keyof typeof Chii_ep_statusScalarFieldEnum]


  export const Chii_episodesScalarFieldEnum: {
    ep_id: 'ep_id',
    ep_subject_id: 'ep_subject_id',
    ep_sort: 'ep_sort',
    ep_type: 'ep_type',
    ep_disc: 'ep_disc',
    ep_name: 'ep_name',
    ep_name_cn: 'ep_name_cn',
    ep_rate: 'ep_rate',
    ep_duration: 'ep_duration',
    ep_airdate: 'ep_airdate',
    ep_online: 'ep_online',
    ep_comment: 'ep_comment',
    ep_resources: 'ep_resources',
    ep_desc: 'ep_desc',
    ep_dateline: 'ep_dateline',
    ep_lastpost: 'ep_lastpost',
    ep_lock: 'ep_lock',
    ep_ban: 'ep_ban'
  };

  export type Chii_episodesScalarFieldEnum = (typeof Chii_episodesScalarFieldEnum)[keyof typeof Chii_episodesScalarFieldEnum]


  export const Chii_group_membersScalarFieldEnum: {
    gmb_uid: 'gmb_uid',
    gmb_gid: 'gmb_gid',
    gmb_moderator: 'gmb_moderator',
    gmb_dateline: 'gmb_dateline'
  };

  export type Chii_group_membersScalarFieldEnum = (typeof Chii_group_membersScalarFieldEnum)[keyof typeof Chii_group_membersScalarFieldEnum]


  export const Chii_group_postsScalarFieldEnum: {
    grp_pst_id: 'grp_pst_id',
    grp_pst_mid: 'grp_pst_mid',
    grp_pst_uid: 'grp_pst_uid',
    grp_pst_related: 'grp_pst_related',
    grp_pst_content: 'grp_pst_content',
    grp_pst_state: 'grp_pst_state',
    grp_pst_dateline: 'grp_pst_dateline'
  };

  export type Chii_group_postsScalarFieldEnum = (typeof Chii_group_postsScalarFieldEnum)[keyof typeof Chii_group_postsScalarFieldEnum]


  export const Chii_group_topicsScalarFieldEnum: {
    grp_tpc_id: 'grp_tpc_id',
    grp_tpc_gid: 'grp_tpc_gid',
    grp_tpc_uid: 'grp_tpc_uid',
    grp_tpc_title: 'grp_tpc_title',
    grp_tpc_dateline: 'grp_tpc_dateline',
    grp_tpc_lastpost: 'grp_tpc_lastpost',
    grp_tpc_replies: 'grp_tpc_replies',
    grp_tpc_state: 'grp_tpc_state',
    grp_tpc_display: 'grp_tpc_display'
  };

  export type Chii_group_topicsScalarFieldEnum = (typeof Chii_group_topicsScalarFieldEnum)[keyof typeof Chii_group_topicsScalarFieldEnum]


  export const Chii_groupsScalarFieldEnum: {
    grp_id: 'grp_id',
    grp_cat: 'grp_cat',
    grp_name: 'grp_name',
    grp_title: 'grp_title',
    grp_icon: 'grp_icon',
    grp_creator: 'grp_creator',
    grp_topics: 'grp_topics',
    grp_posts: 'grp_posts',
    grp_members: 'grp_members',
    grp_desc: 'grp_desc',
    grp_lastpost: 'grp_lastpost',
    grp_builddate: 'grp_builddate',
    grp_accessible: 'grp_accessible',
    grp_nsfw: 'grp_nsfw'
  };

  export type Chii_groupsScalarFieldEnum = (typeof Chii_groupsScalarFieldEnum)[keyof typeof Chii_groupsScalarFieldEnum]


  export const Chii_indexScalarFieldEnum: {
    idx_id: 'idx_id',
    idx_type: 'idx_type',
    idx_title: 'idx_title',
    idx_desc: 'idx_desc',
    idx_replies: 'idx_replies',
    idx_subject_total: 'idx_subject_total',
    idx_collects: 'idx_collects',
    idx_stats: 'idx_stats',
    idx_dateline: 'idx_dateline',
    idx_lasttouch: 'idx_lasttouch',
    idx_uid: 'idx_uid',
    idx_ban: 'idx_ban'
  };

  export type Chii_indexScalarFieldEnum = (typeof Chii_indexScalarFieldEnum)[keyof typeof Chii_indexScalarFieldEnum]


  export const Chii_index_collectsScalarFieldEnum: {
    idx_clt_id: 'idx_clt_id',
    idx_clt_mid: 'idx_clt_mid',
    idx_clt_uid: 'idx_clt_uid',
    idx_clt_dateline: 'idx_clt_dateline'
  };

  export type Chii_index_collectsScalarFieldEnum = (typeof Chii_index_collectsScalarFieldEnum)[keyof typeof Chii_index_collectsScalarFieldEnum]


  export const Chii_index_commentsScalarFieldEnum: {
    idx_pst_id: 'idx_pst_id',
    idx_pst_mid: 'idx_pst_mid',
    idx_pst_uid: 'idx_pst_uid',
    idx_pst_related: 'idx_pst_related',
    idx_pst_dateline: 'idx_pst_dateline',
    idx_pst_content: 'idx_pst_content'
  };

  export type Chii_index_commentsScalarFieldEnum = (typeof Chii_index_commentsScalarFieldEnum)[keyof typeof Chii_index_commentsScalarFieldEnum]


  export const Chii_index_relatedScalarFieldEnum: {
    idx_rlt_id: 'idx_rlt_id',
    idx_rlt_cat: 'idx_rlt_cat',
    idx_rlt_rid: 'idx_rlt_rid',
    idx_rlt_type: 'idx_rlt_type',
    idx_rlt_sid: 'idx_rlt_sid',
    idx_rlt_order: 'idx_rlt_order',
    idx_rlt_comment: 'idx_rlt_comment',
    idx_rlt_dateline: 'idx_rlt_dateline'
  };

  export type Chii_index_relatedScalarFieldEnum = (typeof Chii_index_relatedScalarFieldEnum)[keyof typeof Chii_index_relatedScalarFieldEnum]


  export const Chii_memberfieldsScalarFieldEnum: {
    uid: 'uid',
    site: 'site',
    location: 'location',
    bio: 'bio',
    privacy: 'privacy',
    blocklist: 'blocklist'
  };

  export type Chii_memberfieldsScalarFieldEnum = (typeof Chii_memberfieldsScalarFieldEnum)[keyof typeof Chii_memberfieldsScalarFieldEnum]


  export const Chii_membersScalarFieldEnum: {
    uid: 'uid',
    username: 'username',
    nickname: 'nickname',
    avatar: 'avatar',
    groupid: 'groupid',
    regdate: 'regdate',
    lastvisit: 'lastvisit',
    lastactivity: 'lastactivity',
    lastpost: 'lastpost',
    dateformat: 'dateformat',
    timeformat: 'timeformat',
    timeoffset: 'timeoffset',
    newpm: 'newpm',
    new_notify: 'new_notify',
    sign: 'sign',
    password_crypt: 'password_crypt',
    email: 'email'
  };

  export type Chii_membersScalarFieldEnum = (typeof Chii_membersScalarFieldEnum)[keyof typeof Chii_membersScalarFieldEnum]


  export const Chii_oauth_access_tokensScalarFieldEnum: {
    id: 'id',
    type: 'type',
    access_token: 'access_token',
    client_id: 'client_id',
    user_id: 'user_id',
    expires: 'expires',
    scope: 'scope',
    info: 'info'
  };

  export type Chii_oauth_access_tokensScalarFieldEnum = (typeof Chii_oauth_access_tokensScalarFieldEnum)[keyof typeof Chii_oauth_access_tokensScalarFieldEnum]


  export const Chii_oauth_clientsScalarFieldEnum: {
    app_id: 'app_id',
    client_id: 'client_id',
    client_secret: 'client_secret',
    redirect_uri: 'redirect_uri',
    grant_types: 'grant_types',
    scope: 'scope',
    user_id: 'user_id'
  };

  export type Chii_oauth_clientsScalarFieldEnum = (typeof Chii_oauth_clientsScalarFieldEnum)[keyof typeof Chii_oauth_clientsScalarFieldEnum]


  export const Chii_os_web_sessionsScalarFieldEnum: {
    key: 'key',
    user_id: 'user_id',
    value: 'value',
    created_at: 'created_at',
    expired_at: 'expired_at'
  };

  export type Chii_os_web_sessionsScalarFieldEnum = (typeof Chii_os_web_sessionsScalarFieldEnum)[keyof typeof Chii_os_web_sessionsScalarFieldEnum]


  export const Chii_person_collectsScalarFieldEnum: {
    prsn_clt_id: 'prsn_clt_id',
    prsn_clt_cat: 'prsn_clt_cat',
    prsn_clt_mid: 'prsn_clt_mid',
    prsn_clt_uid: 'prsn_clt_uid',
    prsn_clt_dateline: 'prsn_clt_dateline'
  };

  export type Chii_person_collectsScalarFieldEnum = (typeof Chii_person_collectsScalarFieldEnum)[keyof typeof Chii_person_collectsScalarFieldEnum]


  export const Chii_person_cs_indexScalarFieldEnum: {
    prsn_type: 'prsn_type',
    prsn_id: 'prsn_id',
    prsn_position: 'prsn_position',
    subject_id: 'subject_id',
    subject_type_id: 'subject_type_id',
    summary: 'summary',
    prsn_appear_eps: 'prsn_appear_eps'
  };

  export type Chii_person_cs_indexScalarFieldEnum = (typeof Chii_person_cs_indexScalarFieldEnum)[keyof typeof Chii_person_cs_indexScalarFieldEnum]


  export const Chii_person_fieldsScalarFieldEnum: {
    prsn_cat: 'prsn_cat',
    prsn_id: 'prsn_id',
    gender: 'gender',
    bloodtype: 'bloodtype',
    birth_year: 'birth_year',
    birth_mon: 'birth_mon',
    birth_day: 'birth_day'
  };

  export type Chii_person_fieldsScalarFieldEnum = (typeof Chii_person_fieldsScalarFieldEnum)[keyof typeof Chii_person_fieldsScalarFieldEnum]


  export const Chii_personsScalarFieldEnum: {
    prsn_id: 'prsn_id',
    prsn_name: 'prsn_name',
    prsn_type: 'prsn_type',
    prsn_infobox: 'prsn_infobox',
    prsn_producer: 'prsn_producer',
    prsn_mangaka: 'prsn_mangaka',
    prsn_artist: 'prsn_artist',
    prsn_seiyu: 'prsn_seiyu',
    prsn_writer: 'prsn_writer',
    prsn_illustrator: 'prsn_illustrator',
    prsn_actor: 'prsn_actor',
    prsn_summary: 'prsn_summary',
    prsn_img: 'prsn_img',
    prsn_img_anidb: 'prsn_img_anidb',
    prsn_comment: 'prsn_comment',
    prsn_collects: 'prsn_collects',
    prsn_dateline: 'prsn_dateline',
    prsn_lastpost: 'prsn_lastpost',
    prsn_lock: 'prsn_lock',
    prsn_anidb_id: 'prsn_anidb_id',
    prsn_ban: 'prsn_ban',
    prsn_redirect: 'prsn_redirect',
    prsn_nsfw: 'prsn_nsfw'
  };

  export type Chii_personsScalarFieldEnum = (typeof Chii_personsScalarFieldEnum)[keyof typeof Chii_personsScalarFieldEnum]


  export const Chii_prsn_commentsScalarFieldEnum: {
    prsn_pst_id: 'prsn_pst_id',
    prsn_pst_mid: 'prsn_pst_mid',
    prsn_pst_uid: 'prsn_pst_uid',
    prsn_pst_related: 'prsn_pst_related',
    prsn_pst_dateline: 'prsn_pst_dateline',
    prsn_pst_content: 'prsn_pst_content'
  };

  export type Chii_prsn_commentsScalarFieldEnum = (typeof Chii_prsn_commentsScalarFieldEnum)[keyof typeof Chii_prsn_commentsScalarFieldEnum]


  export const Chii_rev_historyScalarFieldEnum: {
    rev_id: 'rev_id',
    rev_type: 'rev_type',
    rev_mid: 'rev_mid',
    rev_text_id: 'rev_text_id',
    rev_dateline: 'rev_dateline',
    rev_creator: 'rev_creator',
    rev_edit_summary: 'rev_edit_summary'
  };

  export type Chii_rev_historyScalarFieldEnum = (typeof Chii_rev_historyScalarFieldEnum)[keyof typeof Chii_rev_historyScalarFieldEnum]


  export const Chii_rev_textScalarFieldEnum: {
    rev_text_id: 'rev_text_id',
    rev_text: 'rev_text'
  };

  export type Chii_rev_textScalarFieldEnum = (typeof Chii_rev_textScalarFieldEnum)[keyof typeof Chii_rev_textScalarFieldEnum]


  export const Chii_subject_fieldsScalarFieldEnum: {
    field_sid: 'field_sid',
    field_tid: 'field_tid',
    field_tags: 'field_tags',
    field_rate_1: 'field_rate_1',
    field_rate_2: 'field_rate_2',
    field_rate_3: 'field_rate_3',
    field_rate_4: 'field_rate_4',
    field_rate_5: 'field_rate_5',
    field_rate_6: 'field_rate_6',
    field_rate_7: 'field_rate_7',
    field_rate_8: 'field_rate_8',
    field_rate_9: 'field_rate_9',
    field_rate_10: 'field_rate_10',
    field_airtime: 'field_airtime',
    field_rank: 'field_rank',
    field_year: 'field_year',
    field_mon: 'field_mon',
    field_week_day: 'field_week_day',
    field_date: 'field_date',
    field_redirect: 'field_redirect'
  };

  export type Chii_subject_fieldsScalarFieldEnum = (typeof Chii_subject_fieldsScalarFieldEnum)[keyof typeof Chii_subject_fieldsScalarFieldEnum]


  export const Chii_subject_interestsScalarFieldEnum: {
    interest_id: 'interest_id',
    interest_uid: 'interest_uid',
    interest_subject_id: 'interest_subject_id',
    interest_subject_type: 'interest_subject_type',
    interest_rate: 'interest_rate',
    interest_type: 'interest_type',
    interest_has_comment: 'interest_has_comment',
    interest_comment: 'interest_comment',
    interest_tag: 'interest_tag',
    interest_ep_status: 'interest_ep_status',
    interest_vol_status: 'interest_vol_status',
    interest_wish_dateline: 'interest_wish_dateline',
    interest_doing_dateline: 'interest_doing_dateline',
    interest_collect_dateline: 'interest_collect_dateline',
    interest_on_hold_dateline: 'interest_on_hold_dateline',
    interest_dropped_dateline: 'interest_dropped_dateline',
    interest_create_ip: 'interest_create_ip',
    interest_lasttouch_ip: 'interest_lasttouch_ip',
    interest_lasttouch: 'interest_lasttouch',
    interest_private: 'interest_private'
  };

  export type Chii_subject_interestsScalarFieldEnum = (typeof Chii_subject_interestsScalarFieldEnum)[keyof typeof Chii_subject_interestsScalarFieldEnum]


  export const Chii_subject_postsScalarFieldEnum: {
    sbj_pst_id: 'sbj_pst_id',
    sbj_pst_mid: 'sbj_pst_mid',
    sbj_pst_uid: 'sbj_pst_uid',
    sbj_pst_related: 'sbj_pst_related',
    sbj_pst_content: 'sbj_pst_content',
    sbj_pst_state: 'sbj_pst_state',
    sbj_pst_dateline: 'sbj_pst_dateline'
  };

  export type Chii_subject_postsScalarFieldEnum = (typeof Chii_subject_postsScalarFieldEnum)[keyof typeof Chii_subject_postsScalarFieldEnum]


  export const Chii_subject_relationsScalarFieldEnum: {
    rlt_subject_id: 'rlt_subject_id',
    rlt_subject_type_id: 'rlt_subject_type_id',
    rlt_relation_type: 'rlt_relation_type',
    rlt_related_subject_id: 'rlt_related_subject_id',
    rlt_related_subject_type_id: 'rlt_related_subject_type_id',
    rlt_vice_versa: 'rlt_vice_versa',
    rlt_order: 'rlt_order'
  };

  export type Chii_subject_relationsScalarFieldEnum = (typeof Chii_subject_relationsScalarFieldEnum)[keyof typeof Chii_subject_relationsScalarFieldEnum]


  export const Chii_subject_revisionsScalarFieldEnum: {
    rev_id: 'rev_id',
    rev_type: 'rev_type',
    rev_subject_id: 'rev_subject_id',
    rev_type_id: 'rev_type_id',
    rev_creator: 'rev_creator',
    rev_dateline: 'rev_dateline',
    rev_name: 'rev_name',
    rev_name_cn: 'rev_name_cn',
    rev_field_infobox: 'rev_field_infobox',
    rev_field_summary: 'rev_field_summary',
    rev_vote_field: 'rev_vote_field',
    rev_field_eps: 'rev_field_eps',
    rev_edit_summary: 'rev_edit_summary',
    rev_platform: 'rev_platform'
  };

  export type Chii_subject_revisionsScalarFieldEnum = (typeof Chii_subject_revisionsScalarFieldEnum)[keyof typeof Chii_subject_revisionsScalarFieldEnum]


  export const Chii_subject_topicsScalarFieldEnum: {
    sbj_tpc_id: 'sbj_tpc_id',
    sbj_tpc_subject_id: 'sbj_tpc_subject_id',
    sbj_tpc_uid: 'sbj_tpc_uid',
    sbj_tpc_title: 'sbj_tpc_title',
    sbj_tpc_dateline: 'sbj_tpc_dateline',
    sbj_tpc_lastpost: 'sbj_tpc_lastpost',
    sbj_tpc_replies: 'sbj_tpc_replies',
    sbj_tpc_state: 'sbj_tpc_state',
    sbj_tpc_display: 'sbj_tpc_display'
  };

  export type Chii_subject_topicsScalarFieldEnum = (typeof Chii_subject_topicsScalarFieldEnum)[keyof typeof Chii_subject_topicsScalarFieldEnum]


  export const Chii_subjectsScalarFieldEnum: {
    subject_id: 'subject_id',
    subject_type_id: 'subject_type_id',
    subject_name: 'subject_name',
    subject_name_cn: 'subject_name_cn',
    subject_uid: 'subject_uid',
    subject_creator: 'subject_creator',
    subject_dateline: 'subject_dateline',
    subject_image: 'subject_image',
    subject_platform: 'subject_platform',
    field_infobox: 'field_infobox',
    field_summary: 'field_summary',
    field_5: 'field_5',
    field_volumes: 'field_volumes',
    field_eps: 'field_eps',
    subject_wish: 'subject_wish',
    subject_collect: 'subject_collect',
    subject_doing: 'subject_doing',
    subject_on_hold: 'subject_on_hold',
    subject_dropped: 'subject_dropped',
    subject_series: 'subject_series',
    subject_series_entry: 'subject_series_entry',
    subject_idx_cn: 'subject_idx_cn',
    subject_airtime: 'subject_airtime',
    subject_nsfw: 'subject_nsfw',
    subject_ban: 'subject_ban'
  };

  export type Chii_subjectsScalarFieldEnum = (typeof Chii_subjectsScalarFieldEnum)[keyof typeof Chii_subjectsScalarFieldEnum]


  export const Chii_timelineScalarFieldEnum: {
    tml_id: 'tml_id',
    tml_uid: 'tml_uid',
    tml_cat: 'tml_cat',
    tml_type: 'tml_type',
    tml_related: 'tml_related',
    tml_memo: 'tml_memo',
    tml_img: 'tml_img',
    tml_batch: 'tml_batch',
    tml_source: 'tml_source',
    tml_replies: 'tml_replies',
    tml_dateline: 'tml_dateline',
    tml_status: 'tml_status'
  };

  export type Chii_timelineScalarFieldEnum = (typeof Chii_timelineScalarFieldEnum)[keyof typeof Chii_timelineScalarFieldEnum]


  export const Chii_usergroupScalarFieldEnum: {
    usr_grp_id: 'usr_grp_id',
    usr_grp_name: 'usr_grp_name',
    usr_grp_perm: 'usr_grp_perm',
    usr_grp_dateline: 'usr_grp_dateline'
  };

  export type Chii_usergroupScalarFieldEnum = (typeof Chii_usergroupScalarFieldEnum)[keyof typeof Chii_usergroupScalarFieldEnum]


  export const ExampleScalarFieldEnum: {
    id: 'id',
    time: 'time'
  };

  export type ExampleScalarFieldEnum = (typeof ExampleScalarFieldEnum)[keyof typeof ExampleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type chii_appsWhereInput = {
    AND?: Enumerable<chii_appsWhereInput>
    OR?: Enumerable<chii_appsWhereInput>
    NOT?: Enumerable<chii_appsWhereInput>
    app_id?: IntFilter | number
    app_type?: BoolFilter | boolean
    app_creator?: IntFilter | number
    app_name?: StringFilter | string
    app_desc?: StringFilter | string
    app_url?: StringFilter | string
    app_collects?: IntFilter | number
    app_status?: BoolFilter | boolean
    app_timestamp?: IntFilter | number
    app_lasttouch?: IntFilter | number
    app_ban?: BoolFilter | boolean
  }

  export type chii_appsOrderByWithRelationInput = {
    app_id?: SortOrder
    app_type?: SortOrder
    app_creator?: SortOrder
    app_name?: SortOrder
    app_desc?: SortOrder
    app_url?: SortOrder
    app_collects?: SortOrder
    app_status?: SortOrder
    app_timestamp?: SortOrder
    app_lasttouch?: SortOrder
    app_ban?: SortOrder
  }

  export type chii_appsWhereUniqueInput = {
    app_id?: number
  }

  export type chii_appsOrderByWithAggregationInput = {
    app_id?: SortOrder
    app_type?: SortOrder
    app_creator?: SortOrder
    app_name?: SortOrder
    app_desc?: SortOrder
    app_url?: SortOrder
    app_collects?: SortOrder
    app_status?: SortOrder
    app_timestamp?: SortOrder
    app_lasttouch?: SortOrder
    app_ban?: SortOrder
    _count?: chii_appsCountOrderByAggregateInput
    _avg?: chii_appsAvgOrderByAggregateInput
    _max?: chii_appsMaxOrderByAggregateInput
    _min?: chii_appsMinOrderByAggregateInput
    _sum?: chii_appsSumOrderByAggregateInput
  }

  export type chii_appsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_appsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_appsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_appsScalarWhereWithAggregatesInput>
    app_id?: IntWithAggregatesFilter | number
    app_type?: BoolWithAggregatesFilter | boolean
    app_creator?: IntWithAggregatesFilter | number
    app_name?: StringWithAggregatesFilter | string
    app_desc?: StringWithAggregatesFilter | string
    app_url?: StringWithAggregatesFilter | string
    app_collects?: IntWithAggregatesFilter | number
    app_status?: BoolWithAggregatesFilter | boolean
    app_timestamp?: IntWithAggregatesFilter | number
    app_lasttouch?: IntWithAggregatesFilter | number
    app_ban?: BoolWithAggregatesFilter | boolean
  }

  export type chii_charactersWhereInput = {
    AND?: Enumerable<chii_charactersWhereInput>
    OR?: Enumerable<chii_charactersWhereInput>
    NOT?: Enumerable<chii_charactersWhereInput>
    crt_id?: IntFilter | number
    crt_name?: StringFilter | string
    crt_role?: IntFilter | number
    crt_infobox?: StringFilter | string
    crt_summary?: StringFilter | string
    crt_img?: StringFilter | string
    crt_comment?: IntFilter | number
    crt_collects?: IntFilter | number
    crt_dateline?: IntFilter | number
    crt_lastpost?: IntFilter | number
    crt_lock?: IntFilter | number
    crt_img_anidb?: StringFilter | string
    crt_anidb_id?: IntFilter | number
    crt_ban?: IntFilter | number
    crt_redirect?: IntFilter | number
    crt_nsfw?: BoolFilter | boolean
  }

  export type chii_charactersOrderByWithRelationInput = {
    crt_id?: SortOrder
    crt_name?: SortOrder
    crt_role?: SortOrder
    crt_infobox?: SortOrder
    crt_summary?: SortOrder
    crt_img?: SortOrder
    crt_comment?: SortOrder
    crt_collects?: SortOrder
    crt_dateline?: SortOrder
    crt_lastpost?: SortOrder
    crt_lock?: SortOrder
    crt_img_anidb?: SortOrder
    crt_anidb_id?: SortOrder
    crt_ban?: SortOrder
    crt_redirect?: SortOrder
    crt_nsfw?: SortOrder
  }

  export type chii_charactersWhereUniqueInput = {
    crt_id?: number
  }

  export type chii_charactersOrderByWithAggregationInput = {
    crt_id?: SortOrder
    crt_name?: SortOrder
    crt_role?: SortOrder
    crt_infobox?: SortOrder
    crt_summary?: SortOrder
    crt_img?: SortOrder
    crt_comment?: SortOrder
    crt_collects?: SortOrder
    crt_dateline?: SortOrder
    crt_lastpost?: SortOrder
    crt_lock?: SortOrder
    crt_img_anidb?: SortOrder
    crt_anidb_id?: SortOrder
    crt_ban?: SortOrder
    crt_redirect?: SortOrder
    crt_nsfw?: SortOrder
    _count?: chii_charactersCountOrderByAggregateInput
    _avg?: chii_charactersAvgOrderByAggregateInput
    _max?: chii_charactersMaxOrderByAggregateInput
    _min?: chii_charactersMinOrderByAggregateInput
    _sum?: chii_charactersSumOrderByAggregateInput
  }

  export type chii_charactersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_charactersScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_charactersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_charactersScalarWhereWithAggregatesInput>
    crt_id?: IntWithAggregatesFilter | number
    crt_name?: StringWithAggregatesFilter | string
    crt_role?: IntWithAggregatesFilter | number
    crt_infobox?: StringWithAggregatesFilter | string
    crt_summary?: StringWithAggregatesFilter | string
    crt_img?: StringWithAggregatesFilter | string
    crt_comment?: IntWithAggregatesFilter | number
    crt_collects?: IntWithAggregatesFilter | number
    crt_dateline?: IntWithAggregatesFilter | number
    crt_lastpost?: IntWithAggregatesFilter | number
    crt_lock?: IntWithAggregatesFilter | number
    crt_img_anidb?: StringWithAggregatesFilter | string
    crt_anidb_id?: IntWithAggregatesFilter | number
    crt_ban?: IntWithAggregatesFilter | number
    crt_redirect?: IntWithAggregatesFilter | number
    crt_nsfw?: BoolWithAggregatesFilter | boolean
  }

  export type chii_crt_cast_indexWhereInput = {
    AND?: Enumerable<chii_crt_cast_indexWhereInput>
    OR?: Enumerable<chii_crt_cast_indexWhereInput>
    NOT?: Enumerable<chii_crt_cast_indexWhereInput>
    crt_id?: IntFilter | number
    prsn_id?: IntFilter | number
    subject_id?: IntFilter | number
    subject_type_id?: IntFilter | number
    summary?: StringFilter | string
  }

  export type chii_crt_cast_indexOrderByWithRelationInput = {
    crt_id?: SortOrder
    prsn_id?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    summary?: SortOrder
  }

  export type chii_crt_cast_indexWhereUniqueInput = {
    crt_id_prsn_id_subject_id?: chii_crt_cast_indexCrt_idPrsn_idSubject_idCompoundUniqueInput
  }

  export type chii_crt_cast_indexOrderByWithAggregationInput = {
    crt_id?: SortOrder
    prsn_id?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    summary?: SortOrder
    _count?: chii_crt_cast_indexCountOrderByAggregateInput
    _avg?: chii_crt_cast_indexAvgOrderByAggregateInput
    _max?: chii_crt_cast_indexMaxOrderByAggregateInput
    _min?: chii_crt_cast_indexMinOrderByAggregateInput
    _sum?: chii_crt_cast_indexSumOrderByAggregateInput
  }

  export type chii_crt_cast_indexScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_crt_cast_indexScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_crt_cast_indexScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_crt_cast_indexScalarWhereWithAggregatesInput>
    crt_id?: IntWithAggregatesFilter | number
    prsn_id?: IntWithAggregatesFilter | number
    subject_id?: IntWithAggregatesFilter | number
    subject_type_id?: IntWithAggregatesFilter | number
    summary?: StringWithAggregatesFilter | string
  }

  export type chii_crt_commentsWhereInput = {
    AND?: Enumerable<chii_crt_commentsWhereInput>
    OR?: Enumerable<chii_crt_commentsWhereInput>
    NOT?: Enumerable<chii_crt_commentsWhereInput>
    crt_pst_id?: IntFilter | number
    crt_pst_mid?: IntFilter | number
    crt_pst_uid?: IntFilter | number
    crt_pst_related?: IntFilter | number
    crt_pst_dateline?: IntFilter | number
    crt_pst_content?: StringFilter | string
  }

  export type chii_crt_commentsOrderByWithRelationInput = {
    crt_pst_id?: SortOrder
    crt_pst_mid?: SortOrder
    crt_pst_uid?: SortOrder
    crt_pst_related?: SortOrder
    crt_pst_dateline?: SortOrder
    crt_pst_content?: SortOrder
  }

  export type chii_crt_commentsWhereUniqueInput = {
    crt_pst_id?: number
  }

  export type chii_crt_commentsOrderByWithAggregationInput = {
    crt_pst_id?: SortOrder
    crt_pst_mid?: SortOrder
    crt_pst_uid?: SortOrder
    crt_pst_related?: SortOrder
    crt_pst_dateline?: SortOrder
    crt_pst_content?: SortOrder
    _count?: chii_crt_commentsCountOrderByAggregateInput
    _avg?: chii_crt_commentsAvgOrderByAggregateInput
    _max?: chii_crt_commentsMaxOrderByAggregateInput
    _min?: chii_crt_commentsMinOrderByAggregateInput
    _sum?: chii_crt_commentsSumOrderByAggregateInput
  }

  export type chii_crt_commentsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_crt_commentsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_crt_commentsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_crt_commentsScalarWhereWithAggregatesInput>
    crt_pst_id?: IntWithAggregatesFilter | number
    crt_pst_mid?: IntWithAggregatesFilter | number
    crt_pst_uid?: IntWithAggregatesFilter | number
    crt_pst_related?: IntWithAggregatesFilter | number
    crt_pst_dateline?: IntWithAggregatesFilter | number
    crt_pst_content?: StringWithAggregatesFilter | string
  }

  export type chii_crt_subject_indexWhereInput = {
    AND?: Enumerable<chii_crt_subject_indexWhereInput>
    OR?: Enumerable<chii_crt_subject_indexWhereInput>
    NOT?: Enumerable<chii_crt_subject_indexWhereInput>
    crt_id?: IntFilter | number
    subject_id?: IntFilter | number
    subject_type_id?: IntFilter | number
    crt_type?: IntFilter | number
    ctr_appear_eps?: StringFilter | string
    crt_order?: IntFilter | number
  }

  export type chii_crt_subject_indexOrderByWithRelationInput = {
    crt_id?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    crt_type?: SortOrder
    ctr_appear_eps?: SortOrder
    crt_order?: SortOrder
  }

  export type chii_crt_subject_indexWhereUniqueInput = {
    crt_id_subject_id?: chii_crt_subject_indexCrt_idSubject_idCompoundUniqueInput
  }

  export type chii_crt_subject_indexOrderByWithAggregationInput = {
    crt_id?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    crt_type?: SortOrder
    ctr_appear_eps?: SortOrder
    crt_order?: SortOrder
    _count?: chii_crt_subject_indexCountOrderByAggregateInput
    _avg?: chii_crt_subject_indexAvgOrderByAggregateInput
    _max?: chii_crt_subject_indexMaxOrderByAggregateInput
    _min?: chii_crt_subject_indexMinOrderByAggregateInput
    _sum?: chii_crt_subject_indexSumOrderByAggregateInput
  }

  export type chii_crt_subject_indexScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_crt_subject_indexScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_crt_subject_indexScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_crt_subject_indexScalarWhereWithAggregatesInput>
    crt_id?: IntWithAggregatesFilter | number
    subject_id?: IntWithAggregatesFilter | number
    subject_type_id?: IntWithAggregatesFilter | number
    crt_type?: IntWithAggregatesFilter | number
    ctr_appear_eps?: StringWithAggregatesFilter | string
    crt_order?: IntWithAggregatesFilter | number
  }

  export type chii_ep_commentsWhereInput = {
    AND?: Enumerable<chii_ep_commentsWhereInput>
    OR?: Enumerable<chii_ep_commentsWhereInput>
    NOT?: Enumerable<chii_ep_commentsWhereInput>
    ep_pst_id?: IntFilter | number
    ep_pst_mid?: IntFilter | number
    ep_pst_uid?: IntFilter | number
    ep_pst_related?: IntFilter | number
    ep_pst_dateline?: IntFilter | number
    ep_pst_content?: StringFilter | string
  }

  export type chii_ep_commentsOrderByWithRelationInput = {
    ep_pst_id?: SortOrder
    ep_pst_mid?: SortOrder
    ep_pst_uid?: SortOrder
    ep_pst_related?: SortOrder
    ep_pst_dateline?: SortOrder
    ep_pst_content?: SortOrder
  }

  export type chii_ep_commentsWhereUniqueInput = {
    ep_pst_id?: number
  }

  export type chii_ep_commentsOrderByWithAggregationInput = {
    ep_pst_id?: SortOrder
    ep_pst_mid?: SortOrder
    ep_pst_uid?: SortOrder
    ep_pst_related?: SortOrder
    ep_pst_dateline?: SortOrder
    ep_pst_content?: SortOrder
    _count?: chii_ep_commentsCountOrderByAggregateInput
    _avg?: chii_ep_commentsAvgOrderByAggregateInput
    _max?: chii_ep_commentsMaxOrderByAggregateInput
    _min?: chii_ep_commentsMinOrderByAggregateInput
    _sum?: chii_ep_commentsSumOrderByAggregateInput
  }

  export type chii_ep_commentsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_ep_commentsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_ep_commentsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_ep_commentsScalarWhereWithAggregatesInput>
    ep_pst_id?: IntWithAggregatesFilter | number
    ep_pst_mid?: IntWithAggregatesFilter | number
    ep_pst_uid?: IntWithAggregatesFilter | number
    ep_pst_related?: IntWithAggregatesFilter | number
    ep_pst_dateline?: IntWithAggregatesFilter | number
    ep_pst_content?: StringWithAggregatesFilter | string
  }

  export type chii_ep_revisionsWhereInput = {
    AND?: Enumerable<chii_ep_revisionsWhereInput>
    OR?: Enumerable<chii_ep_revisionsWhereInput>
    NOT?: Enumerable<chii_ep_revisionsWhereInput>
    ep_rev_id?: IntFilter | number
    rev_sid?: IntFilter | number
    rev_eids?: StringFilter | string
    rev_ep_infobox?: StringFilter | string
    rev_creator?: IntFilter | number
    rev_version?: BoolFilter | boolean
    rev_dateline?: IntFilter | number
    rev_edit_summary?: StringFilter | string
  }

  export type chii_ep_revisionsOrderByWithRelationInput = {
    ep_rev_id?: SortOrder
    rev_sid?: SortOrder
    rev_eids?: SortOrder
    rev_ep_infobox?: SortOrder
    rev_creator?: SortOrder
    rev_version?: SortOrder
    rev_dateline?: SortOrder
    rev_edit_summary?: SortOrder
  }

  export type chii_ep_revisionsWhereUniqueInput = {
    ep_rev_id?: number
  }

  export type chii_ep_revisionsOrderByWithAggregationInput = {
    ep_rev_id?: SortOrder
    rev_sid?: SortOrder
    rev_eids?: SortOrder
    rev_ep_infobox?: SortOrder
    rev_creator?: SortOrder
    rev_version?: SortOrder
    rev_dateline?: SortOrder
    rev_edit_summary?: SortOrder
    _count?: chii_ep_revisionsCountOrderByAggregateInput
    _avg?: chii_ep_revisionsAvgOrderByAggregateInput
    _max?: chii_ep_revisionsMaxOrderByAggregateInput
    _min?: chii_ep_revisionsMinOrderByAggregateInput
    _sum?: chii_ep_revisionsSumOrderByAggregateInput
  }

  export type chii_ep_revisionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_ep_revisionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_ep_revisionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_ep_revisionsScalarWhereWithAggregatesInput>
    ep_rev_id?: IntWithAggregatesFilter | number
    rev_sid?: IntWithAggregatesFilter | number
    rev_eids?: StringWithAggregatesFilter | string
    rev_ep_infobox?: StringWithAggregatesFilter | string
    rev_creator?: IntWithAggregatesFilter | number
    rev_version?: BoolWithAggregatesFilter | boolean
    rev_dateline?: IntWithAggregatesFilter | number
    rev_edit_summary?: StringWithAggregatesFilter | string
  }

  export type chii_ep_statusWhereInput = {
    AND?: Enumerable<chii_ep_statusWhereInput>
    OR?: Enumerable<chii_ep_statusWhereInput>
    NOT?: Enumerable<chii_ep_statusWhereInput>
    ep_stt_id?: IntFilter | number
    ep_stt_uid?: IntFilter | number
    ep_stt_sid?: IntFilter | number
    ep_stt_on_prg?: BoolFilter | boolean
    ep_stt_status?: StringFilter | string
    ep_stt_lasttouch?: IntFilter | number
  }

  export type chii_ep_statusOrderByWithRelationInput = {
    ep_stt_id?: SortOrder
    ep_stt_uid?: SortOrder
    ep_stt_sid?: SortOrder
    ep_stt_on_prg?: SortOrder
    ep_stt_status?: SortOrder
    ep_stt_lasttouch?: SortOrder
  }

  export type chii_ep_statusWhereUniqueInput = {
    ep_stt_id?: number
    ep_stt_uid_ep_stt_sid?: chii_ep_statusEp_stt_uidEp_stt_sidCompoundUniqueInput
  }

  export type chii_ep_statusOrderByWithAggregationInput = {
    ep_stt_id?: SortOrder
    ep_stt_uid?: SortOrder
    ep_stt_sid?: SortOrder
    ep_stt_on_prg?: SortOrder
    ep_stt_status?: SortOrder
    ep_stt_lasttouch?: SortOrder
    _count?: chii_ep_statusCountOrderByAggregateInput
    _avg?: chii_ep_statusAvgOrderByAggregateInput
    _max?: chii_ep_statusMaxOrderByAggregateInput
    _min?: chii_ep_statusMinOrderByAggregateInput
    _sum?: chii_ep_statusSumOrderByAggregateInput
  }

  export type chii_ep_statusScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_ep_statusScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_ep_statusScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_ep_statusScalarWhereWithAggregatesInput>
    ep_stt_id?: IntWithAggregatesFilter | number
    ep_stt_uid?: IntWithAggregatesFilter | number
    ep_stt_sid?: IntWithAggregatesFilter | number
    ep_stt_on_prg?: BoolWithAggregatesFilter | boolean
    ep_stt_status?: StringWithAggregatesFilter | string
    ep_stt_lasttouch?: IntWithAggregatesFilter | number
  }

  export type chii_episodesWhereInput = {
    AND?: Enumerable<chii_episodesWhereInput>
    OR?: Enumerable<chii_episodesWhereInput>
    NOT?: Enumerable<chii_episodesWhereInput>
    ep_id?: IntFilter | number
    ep_subject_id?: IntFilter | number
    ep_sort?: FloatFilter | number
    ep_type?: IntFilter | number
    ep_disc?: IntFilter | number
    ep_name?: StringFilter | string
    ep_name_cn?: StringFilter | string
    ep_rate?: IntFilter | number
    ep_duration?: StringFilter | string
    ep_airdate?: StringFilter | string
    ep_online?: StringFilter | string
    ep_comment?: IntFilter | number
    ep_resources?: IntFilter | number
    ep_desc?: StringFilter | string
    ep_dateline?: IntFilter | number
    ep_lastpost?: IntFilter | number
    ep_lock?: IntFilter | number
    ep_ban?: IntFilter | number
  }

  export type chii_episodesOrderByWithRelationInput = {
    ep_id?: SortOrder
    ep_subject_id?: SortOrder
    ep_sort?: SortOrder
    ep_type?: SortOrder
    ep_disc?: SortOrder
    ep_name?: SortOrder
    ep_name_cn?: SortOrder
    ep_rate?: SortOrder
    ep_duration?: SortOrder
    ep_airdate?: SortOrder
    ep_online?: SortOrder
    ep_comment?: SortOrder
    ep_resources?: SortOrder
    ep_desc?: SortOrder
    ep_dateline?: SortOrder
    ep_lastpost?: SortOrder
    ep_lock?: SortOrder
    ep_ban?: SortOrder
  }

  export type chii_episodesWhereUniqueInput = {
    ep_id?: number
  }

  export type chii_episodesOrderByWithAggregationInput = {
    ep_id?: SortOrder
    ep_subject_id?: SortOrder
    ep_sort?: SortOrder
    ep_type?: SortOrder
    ep_disc?: SortOrder
    ep_name?: SortOrder
    ep_name_cn?: SortOrder
    ep_rate?: SortOrder
    ep_duration?: SortOrder
    ep_airdate?: SortOrder
    ep_online?: SortOrder
    ep_comment?: SortOrder
    ep_resources?: SortOrder
    ep_desc?: SortOrder
    ep_dateline?: SortOrder
    ep_lastpost?: SortOrder
    ep_lock?: SortOrder
    ep_ban?: SortOrder
    _count?: chii_episodesCountOrderByAggregateInput
    _avg?: chii_episodesAvgOrderByAggregateInput
    _max?: chii_episodesMaxOrderByAggregateInput
    _min?: chii_episodesMinOrderByAggregateInput
    _sum?: chii_episodesSumOrderByAggregateInput
  }

  export type chii_episodesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_episodesScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_episodesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_episodesScalarWhereWithAggregatesInput>
    ep_id?: IntWithAggregatesFilter | number
    ep_subject_id?: IntWithAggregatesFilter | number
    ep_sort?: FloatWithAggregatesFilter | number
    ep_type?: IntWithAggregatesFilter | number
    ep_disc?: IntWithAggregatesFilter | number
    ep_name?: StringWithAggregatesFilter | string
    ep_name_cn?: StringWithAggregatesFilter | string
    ep_rate?: IntWithAggregatesFilter | number
    ep_duration?: StringWithAggregatesFilter | string
    ep_airdate?: StringWithAggregatesFilter | string
    ep_online?: StringWithAggregatesFilter | string
    ep_comment?: IntWithAggregatesFilter | number
    ep_resources?: IntWithAggregatesFilter | number
    ep_desc?: StringWithAggregatesFilter | string
    ep_dateline?: IntWithAggregatesFilter | number
    ep_lastpost?: IntWithAggregatesFilter | number
    ep_lock?: IntWithAggregatesFilter | number
    ep_ban?: IntWithAggregatesFilter | number
  }

  export type chii_group_membersWhereInput = {
    AND?: Enumerable<chii_group_membersWhereInput>
    OR?: Enumerable<chii_group_membersWhereInput>
    NOT?: Enumerable<chii_group_membersWhereInput>
    gmb_uid?: IntFilter | number
    gmb_gid?: IntFilter | number
    gmb_moderator?: BoolFilter | boolean
    gmb_dateline?: IntFilter | number
  }

  export type chii_group_membersOrderByWithRelationInput = {
    gmb_uid?: SortOrder
    gmb_gid?: SortOrder
    gmb_moderator?: SortOrder
    gmb_dateline?: SortOrder
  }

  export type chii_group_membersWhereUniqueInput = {
    gmb_uid_gmb_gid?: chii_group_membersGmb_uidGmb_gidCompoundUniqueInput
  }

  export type chii_group_membersOrderByWithAggregationInput = {
    gmb_uid?: SortOrder
    gmb_gid?: SortOrder
    gmb_moderator?: SortOrder
    gmb_dateline?: SortOrder
    _count?: chii_group_membersCountOrderByAggregateInput
    _avg?: chii_group_membersAvgOrderByAggregateInput
    _max?: chii_group_membersMaxOrderByAggregateInput
    _min?: chii_group_membersMinOrderByAggregateInput
    _sum?: chii_group_membersSumOrderByAggregateInput
  }

  export type chii_group_membersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_group_membersScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_group_membersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_group_membersScalarWhereWithAggregatesInput>
    gmb_uid?: IntWithAggregatesFilter | number
    gmb_gid?: IntWithAggregatesFilter | number
    gmb_moderator?: BoolWithAggregatesFilter | boolean
    gmb_dateline?: IntWithAggregatesFilter | number
  }

  export type chii_group_postsWhereInput = {
    AND?: Enumerable<chii_group_postsWhereInput>
    OR?: Enumerable<chii_group_postsWhereInput>
    NOT?: Enumerable<chii_group_postsWhereInput>
    grp_pst_id?: IntFilter | number
    grp_pst_mid?: IntFilter | number
    grp_pst_uid?: IntFilter | number
    grp_pst_related?: IntFilter | number
    grp_pst_content?: StringFilter | string
    grp_pst_state?: BoolFilter | boolean
    grp_pst_dateline?: IntFilter | number
  }

  export type chii_group_postsOrderByWithRelationInput = {
    grp_pst_id?: SortOrder
    grp_pst_mid?: SortOrder
    grp_pst_uid?: SortOrder
    grp_pst_related?: SortOrder
    grp_pst_content?: SortOrder
    grp_pst_state?: SortOrder
    grp_pst_dateline?: SortOrder
  }

  export type chii_group_postsWhereUniqueInput = {
    grp_pst_id?: number
  }

  export type chii_group_postsOrderByWithAggregationInput = {
    grp_pst_id?: SortOrder
    grp_pst_mid?: SortOrder
    grp_pst_uid?: SortOrder
    grp_pst_related?: SortOrder
    grp_pst_content?: SortOrder
    grp_pst_state?: SortOrder
    grp_pst_dateline?: SortOrder
    _count?: chii_group_postsCountOrderByAggregateInput
    _avg?: chii_group_postsAvgOrderByAggregateInput
    _max?: chii_group_postsMaxOrderByAggregateInput
    _min?: chii_group_postsMinOrderByAggregateInput
    _sum?: chii_group_postsSumOrderByAggregateInput
  }

  export type chii_group_postsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_group_postsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_group_postsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_group_postsScalarWhereWithAggregatesInput>
    grp_pst_id?: IntWithAggregatesFilter | number
    grp_pst_mid?: IntWithAggregatesFilter | number
    grp_pst_uid?: IntWithAggregatesFilter | number
    grp_pst_related?: IntWithAggregatesFilter | number
    grp_pst_content?: StringWithAggregatesFilter | string
    grp_pst_state?: BoolWithAggregatesFilter | boolean
    grp_pst_dateline?: IntWithAggregatesFilter | number
  }

  export type chii_group_topicsWhereInput = {
    AND?: Enumerable<chii_group_topicsWhereInput>
    OR?: Enumerable<chii_group_topicsWhereInput>
    NOT?: Enumerable<chii_group_topicsWhereInput>
    grp_tpc_id?: IntFilter | number
    grp_tpc_gid?: IntFilter | number
    grp_tpc_uid?: IntFilter | number
    grp_tpc_title?: StringFilter | string
    grp_tpc_dateline?: IntFilter | number
    grp_tpc_lastpost?: IntFilter | number
    grp_tpc_replies?: IntFilter | number
    grp_tpc_state?: BoolFilter | boolean
    grp_tpc_display?: BoolFilter | boolean
  }

  export type chii_group_topicsOrderByWithRelationInput = {
    grp_tpc_id?: SortOrder
    grp_tpc_gid?: SortOrder
    grp_tpc_uid?: SortOrder
    grp_tpc_title?: SortOrder
    grp_tpc_dateline?: SortOrder
    grp_tpc_lastpost?: SortOrder
    grp_tpc_replies?: SortOrder
    grp_tpc_state?: SortOrder
    grp_tpc_display?: SortOrder
  }

  export type chii_group_topicsWhereUniqueInput = {
    grp_tpc_id?: number
  }

  export type chii_group_topicsOrderByWithAggregationInput = {
    grp_tpc_id?: SortOrder
    grp_tpc_gid?: SortOrder
    grp_tpc_uid?: SortOrder
    grp_tpc_title?: SortOrder
    grp_tpc_dateline?: SortOrder
    grp_tpc_lastpost?: SortOrder
    grp_tpc_replies?: SortOrder
    grp_tpc_state?: SortOrder
    grp_tpc_display?: SortOrder
    _count?: chii_group_topicsCountOrderByAggregateInput
    _avg?: chii_group_topicsAvgOrderByAggregateInput
    _max?: chii_group_topicsMaxOrderByAggregateInput
    _min?: chii_group_topicsMinOrderByAggregateInput
    _sum?: chii_group_topicsSumOrderByAggregateInput
  }

  export type chii_group_topicsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_group_topicsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_group_topicsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_group_topicsScalarWhereWithAggregatesInput>
    grp_tpc_id?: IntWithAggregatesFilter | number
    grp_tpc_gid?: IntWithAggregatesFilter | number
    grp_tpc_uid?: IntWithAggregatesFilter | number
    grp_tpc_title?: StringWithAggregatesFilter | string
    grp_tpc_dateline?: IntWithAggregatesFilter | number
    grp_tpc_lastpost?: IntWithAggregatesFilter | number
    grp_tpc_replies?: IntWithAggregatesFilter | number
    grp_tpc_state?: BoolWithAggregatesFilter | boolean
    grp_tpc_display?: BoolWithAggregatesFilter | boolean
  }

  export type chii_groupsWhereInput = {
    AND?: Enumerable<chii_groupsWhereInput>
    OR?: Enumerable<chii_groupsWhereInput>
    NOT?: Enumerable<chii_groupsWhereInput>
    grp_id?: IntFilter | number
    grp_cat?: IntFilter | number
    grp_name?: StringFilter | string
    grp_title?: StringFilter | string
    grp_icon?: StringFilter | string
    grp_creator?: IntFilter | number
    grp_topics?: IntFilter | number
    grp_posts?: IntFilter | number
    grp_members?: IntFilter | number
    grp_desc?: StringFilter | string
    grp_lastpost?: IntFilter | number
    grp_builddate?: IntFilter | number
    grp_accessible?: BoolFilter | boolean
    grp_nsfw?: BoolFilter | boolean
  }

  export type chii_groupsOrderByWithRelationInput = {
    grp_id?: SortOrder
    grp_cat?: SortOrder
    grp_name?: SortOrder
    grp_title?: SortOrder
    grp_icon?: SortOrder
    grp_creator?: SortOrder
    grp_topics?: SortOrder
    grp_posts?: SortOrder
    grp_members?: SortOrder
    grp_desc?: SortOrder
    grp_lastpost?: SortOrder
    grp_builddate?: SortOrder
    grp_accessible?: SortOrder
    grp_nsfw?: SortOrder
  }

  export type chii_groupsWhereUniqueInput = {
    grp_id?: number
  }

  export type chii_groupsOrderByWithAggregationInput = {
    grp_id?: SortOrder
    grp_cat?: SortOrder
    grp_name?: SortOrder
    grp_title?: SortOrder
    grp_icon?: SortOrder
    grp_creator?: SortOrder
    grp_topics?: SortOrder
    grp_posts?: SortOrder
    grp_members?: SortOrder
    grp_desc?: SortOrder
    grp_lastpost?: SortOrder
    grp_builddate?: SortOrder
    grp_accessible?: SortOrder
    grp_nsfw?: SortOrder
    _count?: chii_groupsCountOrderByAggregateInput
    _avg?: chii_groupsAvgOrderByAggregateInput
    _max?: chii_groupsMaxOrderByAggregateInput
    _min?: chii_groupsMinOrderByAggregateInput
    _sum?: chii_groupsSumOrderByAggregateInput
  }

  export type chii_groupsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_groupsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_groupsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_groupsScalarWhereWithAggregatesInput>
    grp_id?: IntWithAggregatesFilter | number
    grp_cat?: IntWithAggregatesFilter | number
    grp_name?: StringWithAggregatesFilter | string
    grp_title?: StringWithAggregatesFilter | string
    grp_icon?: StringWithAggregatesFilter | string
    grp_creator?: IntWithAggregatesFilter | number
    grp_topics?: IntWithAggregatesFilter | number
    grp_posts?: IntWithAggregatesFilter | number
    grp_members?: IntWithAggregatesFilter | number
    grp_desc?: StringWithAggregatesFilter | string
    grp_lastpost?: IntWithAggregatesFilter | number
    grp_builddate?: IntWithAggregatesFilter | number
    grp_accessible?: BoolWithAggregatesFilter | boolean
    grp_nsfw?: BoolWithAggregatesFilter | boolean
  }

  export type chii_indexWhereInput = {
    AND?: Enumerable<chii_indexWhereInput>
    OR?: Enumerable<chii_indexWhereInput>
    NOT?: Enumerable<chii_indexWhereInput>
    idx_id?: IntFilter | number
    idx_type?: IntFilter | number
    idx_title?: StringFilter | string
    idx_desc?: StringFilter | string
    idx_replies?: IntFilter | number
    idx_subject_total?: IntFilter | number
    idx_collects?: IntFilter | number
    idx_stats?: StringFilter | string
    idx_dateline?: IntFilter | number
    idx_lasttouch?: IntFilter | number
    idx_uid?: IntFilter | number
    idx_ban?: BoolFilter | boolean
  }

  export type chii_indexOrderByWithRelationInput = {
    idx_id?: SortOrder
    idx_type?: SortOrder
    idx_title?: SortOrder
    idx_desc?: SortOrder
    idx_replies?: SortOrder
    idx_subject_total?: SortOrder
    idx_collects?: SortOrder
    idx_stats?: SortOrder
    idx_dateline?: SortOrder
    idx_lasttouch?: SortOrder
    idx_uid?: SortOrder
    idx_ban?: SortOrder
  }

  export type chii_indexWhereUniqueInput = {
    idx_id?: number
  }

  export type chii_indexOrderByWithAggregationInput = {
    idx_id?: SortOrder
    idx_type?: SortOrder
    idx_title?: SortOrder
    idx_desc?: SortOrder
    idx_replies?: SortOrder
    idx_subject_total?: SortOrder
    idx_collects?: SortOrder
    idx_stats?: SortOrder
    idx_dateline?: SortOrder
    idx_lasttouch?: SortOrder
    idx_uid?: SortOrder
    idx_ban?: SortOrder
    _count?: chii_indexCountOrderByAggregateInput
    _avg?: chii_indexAvgOrderByAggregateInput
    _max?: chii_indexMaxOrderByAggregateInput
    _min?: chii_indexMinOrderByAggregateInput
    _sum?: chii_indexSumOrderByAggregateInput
  }

  export type chii_indexScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_indexScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_indexScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_indexScalarWhereWithAggregatesInput>
    idx_id?: IntWithAggregatesFilter | number
    idx_type?: IntWithAggregatesFilter | number
    idx_title?: StringWithAggregatesFilter | string
    idx_desc?: StringWithAggregatesFilter | string
    idx_replies?: IntWithAggregatesFilter | number
    idx_subject_total?: IntWithAggregatesFilter | number
    idx_collects?: IntWithAggregatesFilter | number
    idx_stats?: StringWithAggregatesFilter | string
    idx_dateline?: IntWithAggregatesFilter | number
    idx_lasttouch?: IntWithAggregatesFilter | number
    idx_uid?: IntWithAggregatesFilter | number
    idx_ban?: BoolWithAggregatesFilter | boolean
  }

  export type chii_index_collectsWhereInput = {
    AND?: Enumerable<chii_index_collectsWhereInput>
    OR?: Enumerable<chii_index_collectsWhereInput>
    NOT?: Enumerable<chii_index_collectsWhereInput>
    idx_clt_id?: IntFilter | number
    idx_clt_mid?: IntFilter | number
    idx_clt_uid?: IntFilter | number
    idx_clt_dateline?: IntFilter | number
  }

  export type chii_index_collectsOrderByWithRelationInput = {
    idx_clt_id?: SortOrder
    idx_clt_mid?: SortOrder
    idx_clt_uid?: SortOrder
    idx_clt_dateline?: SortOrder
  }

  export type chii_index_collectsWhereUniqueInput = {
    idx_clt_id?: number
  }

  export type chii_index_collectsOrderByWithAggregationInput = {
    idx_clt_id?: SortOrder
    idx_clt_mid?: SortOrder
    idx_clt_uid?: SortOrder
    idx_clt_dateline?: SortOrder
    _count?: chii_index_collectsCountOrderByAggregateInput
    _avg?: chii_index_collectsAvgOrderByAggregateInput
    _max?: chii_index_collectsMaxOrderByAggregateInput
    _min?: chii_index_collectsMinOrderByAggregateInput
    _sum?: chii_index_collectsSumOrderByAggregateInput
  }

  export type chii_index_collectsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_index_collectsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_index_collectsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_index_collectsScalarWhereWithAggregatesInput>
    idx_clt_id?: IntWithAggregatesFilter | number
    idx_clt_mid?: IntWithAggregatesFilter | number
    idx_clt_uid?: IntWithAggregatesFilter | number
    idx_clt_dateline?: IntWithAggregatesFilter | number
  }

  export type chii_index_commentsWhereInput = {
    AND?: Enumerable<chii_index_commentsWhereInput>
    OR?: Enumerable<chii_index_commentsWhereInput>
    NOT?: Enumerable<chii_index_commentsWhereInput>
    idx_pst_id?: IntFilter | number
    idx_pst_mid?: IntFilter | number
    idx_pst_uid?: IntFilter | number
    idx_pst_related?: IntFilter | number
    idx_pst_dateline?: IntFilter | number
    idx_pst_content?: StringFilter | string
  }

  export type chii_index_commentsOrderByWithRelationInput = {
    idx_pst_id?: SortOrder
    idx_pst_mid?: SortOrder
    idx_pst_uid?: SortOrder
    idx_pst_related?: SortOrder
    idx_pst_dateline?: SortOrder
    idx_pst_content?: SortOrder
  }

  export type chii_index_commentsWhereUniqueInput = {
    idx_pst_id?: number
  }

  export type chii_index_commentsOrderByWithAggregationInput = {
    idx_pst_id?: SortOrder
    idx_pst_mid?: SortOrder
    idx_pst_uid?: SortOrder
    idx_pst_related?: SortOrder
    idx_pst_dateline?: SortOrder
    idx_pst_content?: SortOrder
    _count?: chii_index_commentsCountOrderByAggregateInput
    _avg?: chii_index_commentsAvgOrderByAggregateInput
    _max?: chii_index_commentsMaxOrderByAggregateInput
    _min?: chii_index_commentsMinOrderByAggregateInput
    _sum?: chii_index_commentsSumOrderByAggregateInput
  }

  export type chii_index_commentsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_index_commentsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_index_commentsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_index_commentsScalarWhereWithAggregatesInput>
    idx_pst_id?: IntWithAggregatesFilter | number
    idx_pst_mid?: IntWithAggregatesFilter | number
    idx_pst_uid?: IntWithAggregatesFilter | number
    idx_pst_related?: IntWithAggregatesFilter | number
    idx_pst_dateline?: IntWithAggregatesFilter | number
    idx_pst_content?: StringWithAggregatesFilter | string
  }

  export type chii_index_relatedWhereInput = {
    AND?: Enumerable<chii_index_relatedWhereInput>
    OR?: Enumerable<chii_index_relatedWhereInput>
    NOT?: Enumerable<chii_index_relatedWhereInput>
    idx_rlt_id?: IntFilter | number
    idx_rlt_cat?: IntFilter | number
    idx_rlt_rid?: IntFilter | number
    idx_rlt_type?: IntFilter | number
    idx_rlt_sid?: IntFilter | number
    idx_rlt_order?: IntFilter | number
    idx_rlt_comment?: StringFilter | string
    idx_rlt_dateline?: IntFilter | number
  }

  export type chii_index_relatedOrderByWithRelationInput = {
    idx_rlt_id?: SortOrder
    idx_rlt_cat?: SortOrder
    idx_rlt_rid?: SortOrder
    idx_rlt_type?: SortOrder
    idx_rlt_sid?: SortOrder
    idx_rlt_order?: SortOrder
    idx_rlt_comment?: SortOrder
    idx_rlt_dateline?: SortOrder
  }

  export type chii_index_relatedWhereUniqueInput = {
    idx_rlt_id?: number
  }

  export type chii_index_relatedOrderByWithAggregationInput = {
    idx_rlt_id?: SortOrder
    idx_rlt_cat?: SortOrder
    idx_rlt_rid?: SortOrder
    idx_rlt_type?: SortOrder
    idx_rlt_sid?: SortOrder
    idx_rlt_order?: SortOrder
    idx_rlt_comment?: SortOrder
    idx_rlt_dateline?: SortOrder
    _count?: chii_index_relatedCountOrderByAggregateInput
    _avg?: chii_index_relatedAvgOrderByAggregateInput
    _max?: chii_index_relatedMaxOrderByAggregateInput
    _min?: chii_index_relatedMinOrderByAggregateInput
    _sum?: chii_index_relatedSumOrderByAggregateInput
  }

  export type chii_index_relatedScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_index_relatedScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_index_relatedScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_index_relatedScalarWhereWithAggregatesInput>
    idx_rlt_id?: IntWithAggregatesFilter | number
    idx_rlt_cat?: IntWithAggregatesFilter | number
    idx_rlt_rid?: IntWithAggregatesFilter | number
    idx_rlt_type?: IntWithAggregatesFilter | number
    idx_rlt_sid?: IntWithAggregatesFilter | number
    idx_rlt_order?: IntWithAggregatesFilter | number
    idx_rlt_comment?: StringWithAggregatesFilter | string
    idx_rlt_dateline?: IntWithAggregatesFilter | number
  }

  export type chii_memberfieldsWhereInput = {
    AND?: Enumerable<chii_memberfieldsWhereInput>
    OR?: Enumerable<chii_memberfieldsWhereInput>
    NOT?: Enumerable<chii_memberfieldsWhereInput>
    uid?: IntFilter | number
    site?: StringFilter | string
    location?: StringFilter | string
    bio?: StringFilter | string
    privacy?: StringFilter | string
    blocklist?: StringFilter | string
  }

  export type chii_memberfieldsOrderByWithRelationInput = {
    uid?: SortOrder
    site?: SortOrder
    location?: SortOrder
    bio?: SortOrder
    privacy?: SortOrder
    blocklist?: SortOrder
  }

  export type chii_memberfieldsWhereUniqueInput = {
    uid?: number
  }

  export type chii_memberfieldsOrderByWithAggregationInput = {
    uid?: SortOrder
    site?: SortOrder
    location?: SortOrder
    bio?: SortOrder
    privacy?: SortOrder
    blocklist?: SortOrder
    _count?: chii_memberfieldsCountOrderByAggregateInput
    _avg?: chii_memberfieldsAvgOrderByAggregateInput
    _max?: chii_memberfieldsMaxOrderByAggregateInput
    _min?: chii_memberfieldsMinOrderByAggregateInput
    _sum?: chii_memberfieldsSumOrderByAggregateInput
  }

  export type chii_memberfieldsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_memberfieldsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_memberfieldsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_memberfieldsScalarWhereWithAggregatesInput>
    uid?: IntWithAggregatesFilter | number
    site?: StringWithAggregatesFilter | string
    location?: StringWithAggregatesFilter | string
    bio?: StringWithAggregatesFilter | string
    privacy?: StringWithAggregatesFilter | string
    blocklist?: StringWithAggregatesFilter | string
  }

  export type chii_membersWhereInput = {
    AND?: Enumerable<chii_membersWhereInput>
    OR?: Enumerable<chii_membersWhereInput>
    NOT?: Enumerable<chii_membersWhereInput>
    uid?: IntFilter | number
    username?: StringFilter | string
    nickname?: StringFilter | string
    avatar?: StringFilter | string
    groupid?: IntFilter | number
    regdate?: IntFilter | number
    lastvisit?: IntFilter | number
    lastactivity?: IntFilter | number
    lastpost?: IntFilter | number
    dateformat?: StringFilter | string
    timeformat?: BoolFilter | boolean
    timeoffset?: StringFilter | string
    newpm?: BoolFilter | boolean
    new_notify?: IntFilter | number
    sign?: StringFilter | string
    password_crypt?: StringFilter | string
    email?: StringFilter | string
  }

  export type chii_membersOrderByWithRelationInput = {
    uid?: SortOrder
    username?: SortOrder
    nickname?: SortOrder
    avatar?: SortOrder
    groupid?: SortOrder
    regdate?: SortOrder
    lastvisit?: SortOrder
    lastactivity?: SortOrder
    lastpost?: SortOrder
    dateformat?: SortOrder
    timeformat?: SortOrder
    timeoffset?: SortOrder
    newpm?: SortOrder
    new_notify?: SortOrder
    sign?: SortOrder
    password_crypt?: SortOrder
    email?: SortOrder
  }

  export type chii_membersWhereUniqueInput = {
    uid?: number
    username?: string
  }

  export type chii_membersOrderByWithAggregationInput = {
    uid?: SortOrder
    username?: SortOrder
    nickname?: SortOrder
    avatar?: SortOrder
    groupid?: SortOrder
    regdate?: SortOrder
    lastvisit?: SortOrder
    lastactivity?: SortOrder
    lastpost?: SortOrder
    dateformat?: SortOrder
    timeformat?: SortOrder
    timeoffset?: SortOrder
    newpm?: SortOrder
    new_notify?: SortOrder
    sign?: SortOrder
    password_crypt?: SortOrder
    email?: SortOrder
    _count?: chii_membersCountOrderByAggregateInput
    _avg?: chii_membersAvgOrderByAggregateInput
    _max?: chii_membersMaxOrderByAggregateInput
    _min?: chii_membersMinOrderByAggregateInput
    _sum?: chii_membersSumOrderByAggregateInput
  }

  export type chii_membersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_membersScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_membersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_membersScalarWhereWithAggregatesInput>
    uid?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    nickname?: StringWithAggregatesFilter | string
    avatar?: StringWithAggregatesFilter | string
    groupid?: IntWithAggregatesFilter | number
    regdate?: IntWithAggregatesFilter | number
    lastvisit?: IntWithAggregatesFilter | number
    lastactivity?: IntWithAggregatesFilter | number
    lastpost?: IntWithAggregatesFilter | number
    dateformat?: StringWithAggregatesFilter | string
    timeformat?: BoolWithAggregatesFilter | boolean
    timeoffset?: StringWithAggregatesFilter | string
    newpm?: BoolWithAggregatesFilter | boolean
    new_notify?: IntWithAggregatesFilter | number
    sign?: StringWithAggregatesFilter | string
    password_crypt?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
  }

  export type chii_oauth_access_tokensWhereInput = {
    AND?: Enumerable<chii_oauth_access_tokensWhereInput>
    OR?: Enumerable<chii_oauth_access_tokensWhereInput>
    NOT?: Enumerable<chii_oauth_access_tokensWhereInput>
    id?: IntFilter | number
    type?: BoolFilter | boolean
    access_token?: StringFilter | string
    client_id?: StringFilter | string
    user_id?: StringNullableFilter | string | null
    expires?: DateTimeFilter | Date | string
    scope?: StringNullableFilter | string | null
    info?: StringFilter | string
  }

  export type chii_oauth_access_tokensOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    access_token?: SortOrder
    client_id?: SortOrder
    user_id?: SortOrder
    expires?: SortOrder
    scope?: SortOrder
    info?: SortOrder
  }

  export type chii_oauth_access_tokensWhereUniqueInput = {
    id?: number
    access_token?: string
  }

  export type chii_oauth_access_tokensOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    access_token?: SortOrder
    client_id?: SortOrder
    user_id?: SortOrder
    expires?: SortOrder
    scope?: SortOrder
    info?: SortOrder
    _count?: chii_oauth_access_tokensCountOrderByAggregateInput
    _avg?: chii_oauth_access_tokensAvgOrderByAggregateInput
    _max?: chii_oauth_access_tokensMaxOrderByAggregateInput
    _min?: chii_oauth_access_tokensMinOrderByAggregateInput
    _sum?: chii_oauth_access_tokensSumOrderByAggregateInput
  }

  export type chii_oauth_access_tokensScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_oauth_access_tokensScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_oauth_access_tokensScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_oauth_access_tokensScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    type?: BoolWithAggregatesFilter | boolean
    access_token?: StringWithAggregatesFilter | string
    client_id?: StringWithAggregatesFilter | string
    user_id?: StringNullableWithAggregatesFilter | string | null
    expires?: DateTimeWithAggregatesFilter | Date | string
    scope?: StringNullableWithAggregatesFilter | string | null
    info?: StringWithAggregatesFilter | string
  }

  export type chii_oauth_clientsWhereInput = {
    AND?: Enumerable<chii_oauth_clientsWhereInput>
    OR?: Enumerable<chii_oauth_clientsWhereInput>
    NOT?: Enumerable<chii_oauth_clientsWhereInput>
    app_id?: IntFilter | number
    client_id?: StringFilter | string
    client_secret?: StringNullableFilter | string | null
    redirect_uri?: StringNullableFilter | string | null
    grant_types?: StringNullableFilter | string | null
    scope?: StringNullableFilter | string | null
    user_id?: StringNullableFilter | string | null
  }

  export type chii_oauth_clientsOrderByWithRelationInput = {
    app_id?: SortOrder
    client_id?: SortOrder
    client_secret?: SortOrder
    redirect_uri?: SortOrder
    grant_types?: SortOrder
    scope?: SortOrder
    user_id?: SortOrder
  }

  export type chii_oauth_clientsWhereUniqueInput = {
    app_id?: number
  }

  export type chii_oauth_clientsOrderByWithAggregationInput = {
    app_id?: SortOrder
    client_id?: SortOrder
    client_secret?: SortOrder
    redirect_uri?: SortOrder
    grant_types?: SortOrder
    scope?: SortOrder
    user_id?: SortOrder
    _count?: chii_oauth_clientsCountOrderByAggregateInput
    _avg?: chii_oauth_clientsAvgOrderByAggregateInput
    _max?: chii_oauth_clientsMaxOrderByAggregateInput
    _min?: chii_oauth_clientsMinOrderByAggregateInput
    _sum?: chii_oauth_clientsSumOrderByAggregateInput
  }

  export type chii_oauth_clientsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_oauth_clientsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_oauth_clientsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_oauth_clientsScalarWhereWithAggregatesInput>
    app_id?: IntWithAggregatesFilter | number
    client_id?: StringWithAggregatesFilter | string
    client_secret?: StringNullableWithAggregatesFilter | string | null
    redirect_uri?: StringNullableWithAggregatesFilter | string | null
    grant_types?: StringNullableWithAggregatesFilter | string | null
    scope?: StringNullableWithAggregatesFilter | string | null
    user_id?: StringNullableWithAggregatesFilter | string | null
  }

  export type chii_os_web_sessionsWhereInput = {
    AND?: Enumerable<chii_os_web_sessionsWhereInput>
    OR?: Enumerable<chii_os_web_sessionsWhereInput>
    NOT?: Enumerable<chii_os_web_sessionsWhereInput>
    key?: StringFilter | string
    user_id?: IntFilter | number
    value?: BytesFilter | Buffer
    created_at?: BigIntFilter | bigint | number
    expired_at?: BigIntFilter | bigint | number
  }

  export type chii_os_web_sessionsOrderByWithRelationInput = {
    key?: SortOrder
    user_id?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    expired_at?: SortOrder
  }

  export type chii_os_web_sessionsWhereUniqueInput = {
    key?: string
  }

  export type chii_os_web_sessionsOrderByWithAggregationInput = {
    key?: SortOrder
    user_id?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    expired_at?: SortOrder
    _count?: chii_os_web_sessionsCountOrderByAggregateInput
    _avg?: chii_os_web_sessionsAvgOrderByAggregateInput
    _max?: chii_os_web_sessionsMaxOrderByAggregateInput
    _min?: chii_os_web_sessionsMinOrderByAggregateInput
    _sum?: chii_os_web_sessionsSumOrderByAggregateInput
  }

  export type chii_os_web_sessionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_os_web_sessionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_os_web_sessionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_os_web_sessionsScalarWhereWithAggregatesInput>
    key?: StringWithAggregatesFilter | string
    user_id?: IntWithAggregatesFilter | number
    value?: BytesWithAggregatesFilter | Buffer
    created_at?: BigIntWithAggregatesFilter | bigint | number
    expired_at?: BigIntWithAggregatesFilter | bigint | number
  }

  export type chii_person_collectsWhereInput = {
    AND?: Enumerable<chii_person_collectsWhereInput>
    OR?: Enumerable<chii_person_collectsWhereInput>
    NOT?: Enumerable<chii_person_collectsWhereInput>
    prsn_clt_id?: IntFilter | number
    prsn_clt_cat?: Enumchii_person_collects_prsn_clt_catFilter | chii_person_collects_prsn_clt_cat
    prsn_clt_mid?: IntFilter | number
    prsn_clt_uid?: IntFilter | number
    prsn_clt_dateline?: IntFilter | number
  }

  export type chii_person_collectsOrderByWithRelationInput = {
    prsn_clt_id?: SortOrder
    prsn_clt_cat?: SortOrder
    prsn_clt_mid?: SortOrder
    prsn_clt_uid?: SortOrder
    prsn_clt_dateline?: SortOrder
  }

  export type chii_person_collectsWhereUniqueInput = {
    prsn_clt_id?: number
  }

  export type chii_person_collectsOrderByWithAggregationInput = {
    prsn_clt_id?: SortOrder
    prsn_clt_cat?: SortOrder
    prsn_clt_mid?: SortOrder
    prsn_clt_uid?: SortOrder
    prsn_clt_dateline?: SortOrder
    _count?: chii_person_collectsCountOrderByAggregateInput
    _avg?: chii_person_collectsAvgOrderByAggregateInput
    _max?: chii_person_collectsMaxOrderByAggregateInput
    _min?: chii_person_collectsMinOrderByAggregateInput
    _sum?: chii_person_collectsSumOrderByAggregateInput
  }

  export type chii_person_collectsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_person_collectsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_person_collectsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_person_collectsScalarWhereWithAggregatesInput>
    prsn_clt_id?: IntWithAggregatesFilter | number
    prsn_clt_cat?: Enumchii_person_collects_prsn_clt_catWithAggregatesFilter | chii_person_collects_prsn_clt_cat
    prsn_clt_mid?: IntWithAggregatesFilter | number
    prsn_clt_uid?: IntWithAggregatesFilter | number
    prsn_clt_dateline?: IntWithAggregatesFilter | number
  }

  export type chii_person_cs_indexWhereInput = {
    AND?: Enumerable<chii_person_cs_indexWhereInput>
    OR?: Enumerable<chii_person_cs_indexWhereInput>
    NOT?: Enumerable<chii_person_cs_indexWhereInput>
    prsn_type?: Enumchii_person_cs_index_prsn_typeFilter | chii_person_cs_index_prsn_type
    prsn_id?: IntFilter | number
    prsn_position?: IntFilter | number
    subject_id?: IntFilter | number
    subject_type_id?: IntFilter | number
    summary?: StringFilter | string
    prsn_appear_eps?: StringFilter | string
  }

  export type chii_person_cs_indexOrderByWithRelationInput = {
    prsn_type?: SortOrder
    prsn_id?: SortOrder
    prsn_position?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    summary?: SortOrder
    prsn_appear_eps?: SortOrder
  }

  export type chii_person_cs_indexWhereUniqueInput = {
    prsn_type_prsn_id_subject_id_prsn_position?: chii_person_cs_indexPrsn_typePrsn_idSubject_idPrsn_positionCompoundUniqueInput
  }

  export type chii_person_cs_indexOrderByWithAggregationInput = {
    prsn_type?: SortOrder
    prsn_id?: SortOrder
    prsn_position?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    summary?: SortOrder
    prsn_appear_eps?: SortOrder
    _count?: chii_person_cs_indexCountOrderByAggregateInput
    _avg?: chii_person_cs_indexAvgOrderByAggregateInput
    _max?: chii_person_cs_indexMaxOrderByAggregateInput
    _min?: chii_person_cs_indexMinOrderByAggregateInput
    _sum?: chii_person_cs_indexSumOrderByAggregateInput
  }

  export type chii_person_cs_indexScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_person_cs_indexScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_person_cs_indexScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_person_cs_indexScalarWhereWithAggregatesInput>
    prsn_type?: Enumchii_person_cs_index_prsn_typeWithAggregatesFilter | chii_person_cs_index_prsn_type
    prsn_id?: IntWithAggregatesFilter | number
    prsn_position?: IntWithAggregatesFilter | number
    subject_id?: IntWithAggregatesFilter | number
    subject_type_id?: IntWithAggregatesFilter | number
    summary?: StringWithAggregatesFilter | string
    prsn_appear_eps?: StringWithAggregatesFilter | string
  }

  export type chii_person_fieldsWhereInput = {
    AND?: Enumerable<chii_person_fieldsWhereInput>
    OR?: Enumerable<chii_person_fieldsWhereInput>
    NOT?: Enumerable<chii_person_fieldsWhereInput>
    prsn_cat?: Enumchii_person_fields_prsn_catFilter | chii_person_fields_prsn_cat
    prsn_id?: IntFilter | number
    gender?: IntFilter | number
    bloodtype?: IntFilter | number
    birth_year?: IntFilter | number
    birth_mon?: IntFilter | number
    birth_day?: IntFilter | number
  }

  export type chii_person_fieldsOrderByWithRelationInput = {
    prsn_cat?: SortOrder
    prsn_id?: SortOrder
    gender?: SortOrder
    bloodtype?: SortOrder
    birth_year?: SortOrder
    birth_mon?: SortOrder
    birth_day?: SortOrder
  }

  export type chii_person_fieldsWhereUniqueInput = {
    prsn_cat_prsn_id?: chii_person_fieldsPrsn_catPrsn_idCompoundUniqueInput
  }

  export type chii_person_fieldsOrderByWithAggregationInput = {
    prsn_cat?: SortOrder
    prsn_id?: SortOrder
    gender?: SortOrder
    bloodtype?: SortOrder
    birth_year?: SortOrder
    birth_mon?: SortOrder
    birth_day?: SortOrder
    _count?: chii_person_fieldsCountOrderByAggregateInput
    _avg?: chii_person_fieldsAvgOrderByAggregateInput
    _max?: chii_person_fieldsMaxOrderByAggregateInput
    _min?: chii_person_fieldsMinOrderByAggregateInput
    _sum?: chii_person_fieldsSumOrderByAggregateInput
  }

  export type chii_person_fieldsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_person_fieldsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_person_fieldsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_person_fieldsScalarWhereWithAggregatesInput>
    prsn_cat?: Enumchii_person_fields_prsn_catWithAggregatesFilter | chii_person_fields_prsn_cat
    prsn_id?: IntWithAggregatesFilter | number
    gender?: IntWithAggregatesFilter | number
    bloodtype?: IntWithAggregatesFilter | number
    birth_year?: IntWithAggregatesFilter | number
    birth_mon?: IntWithAggregatesFilter | number
    birth_day?: IntWithAggregatesFilter | number
  }

  export type chii_personsWhereInput = {
    AND?: Enumerable<chii_personsWhereInput>
    OR?: Enumerable<chii_personsWhereInput>
    NOT?: Enumerable<chii_personsWhereInput>
    prsn_id?: IntFilter | number
    prsn_name?: StringFilter | string
    prsn_type?: IntFilter | number
    prsn_infobox?: StringFilter | string
    prsn_producer?: BoolFilter | boolean
    prsn_mangaka?: BoolFilter | boolean
    prsn_artist?: BoolFilter | boolean
    prsn_seiyu?: BoolFilter | boolean
    prsn_writer?: IntFilter | number
    prsn_illustrator?: IntFilter | number
    prsn_actor?: BoolFilter | boolean
    prsn_summary?: StringFilter | string
    prsn_img?: StringFilter | string
    prsn_img_anidb?: StringFilter | string
    prsn_comment?: IntFilter | number
    prsn_collects?: IntFilter | number
    prsn_dateline?: IntFilter | number
    prsn_lastpost?: IntFilter | number
    prsn_lock?: IntFilter | number
    prsn_anidb_id?: IntFilter | number
    prsn_ban?: IntFilter | number
    prsn_redirect?: IntFilter | number
    prsn_nsfw?: BoolFilter | boolean
  }

  export type chii_personsOrderByWithRelationInput = {
    prsn_id?: SortOrder
    prsn_name?: SortOrder
    prsn_type?: SortOrder
    prsn_infobox?: SortOrder
    prsn_producer?: SortOrder
    prsn_mangaka?: SortOrder
    prsn_artist?: SortOrder
    prsn_seiyu?: SortOrder
    prsn_writer?: SortOrder
    prsn_illustrator?: SortOrder
    prsn_actor?: SortOrder
    prsn_summary?: SortOrder
    prsn_img?: SortOrder
    prsn_img_anidb?: SortOrder
    prsn_comment?: SortOrder
    prsn_collects?: SortOrder
    prsn_dateline?: SortOrder
    prsn_lastpost?: SortOrder
    prsn_lock?: SortOrder
    prsn_anidb_id?: SortOrder
    prsn_ban?: SortOrder
    prsn_redirect?: SortOrder
    prsn_nsfw?: SortOrder
  }

  export type chii_personsWhereUniqueInput = {
    prsn_id?: number
  }

  export type chii_personsOrderByWithAggregationInput = {
    prsn_id?: SortOrder
    prsn_name?: SortOrder
    prsn_type?: SortOrder
    prsn_infobox?: SortOrder
    prsn_producer?: SortOrder
    prsn_mangaka?: SortOrder
    prsn_artist?: SortOrder
    prsn_seiyu?: SortOrder
    prsn_writer?: SortOrder
    prsn_illustrator?: SortOrder
    prsn_actor?: SortOrder
    prsn_summary?: SortOrder
    prsn_img?: SortOrder
    prsn_img_anidb?: SortOrder
    prsn_comment?: SortOrder
    prsn_collects?: SortOrder
    prsn_dateline?: SortOrder
    prsn_lastpost?: SortOrder
    prsn_lock?: SortOrder
    prsn_anidb_id?: SortOrder
    prsn_ban?: SortOrder
    prsn_redirect?: SortOrder
    prsn_nsfw?: SortOrder
    _count?: chii_personsCountOrderByAggregateInput
    _avg?: chii_personsAvgOrderByAggregateInput
    _max?: chii_personsMaxOrderByAggregateInput
    _min?: chii_personsMinOrderByAggregateInput
    _sum?: chii_personsSumOrderByAggregateInput
  }

  export type chii_personsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_personsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_personsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_personsScalarWhereWithAggregatesInput>
    prsn_id?: IntWithAggregatesFilter | number
    prsn_name?: StringWithAggregatesFilter | string
    prsn_type?: IntWithAggregatesFilter | number
    prsn_infobox?: StringWithAggregatesFilter | string
    prsn_producer?: BoolWithAggregatesFilter | boolean
    prsn_mangaka?: BoolWithAggregatesFilter | boolean
    prsn_artist?: BoolWithAggregatesFilter | boolean
    prsn_seiyu?: BoolWithAggregatesFilter | boolean
    prsn_writer?: IntWithAggregatesFilter | number
    prsn_illustrator?: IntWithAggregatesFilter | number
    prsn_actor?: BoolWithAggregatesFilter | boolean
    prsn_summary?: StringWithAggregatesFilter | string
    prsn_img?: StringWithAggregatesFilter | string
    prsn_img_anidb?: StringWithAggregatesFilter | string
    prsn_comment?: IntWithAggregatesFilter | number
    prsn_collects?: IntWithAggregatesFilter | number
    prsn_dateline?: IntWithAggregatesFilter | number
    prsn_lastpost?: IntWithAggregatesFilter | number
    prsn_lock?: IntWithAggregatesFilter | number
    prsn_anidb_id?: IntWithAggregatesFilter | number
    prsn_ban?: IntWithAggregatesFilter | number
    prsn_redirect?: IntWithAggregatesFilter | number
    prsn_nsfw?: BoolWithAggregatesFilter | boolean
  }

  export type chii_prsn_commentsWhereInput = {
    AND?: Enumerable<chii_prsn_commentsWhereInput>
    OR?: Enumerable<chii_prsn_commentsWhereInput>
    NOT?: Enumerable<chii_prsn_commentsWhereInput>
    prsn_pst_id?: IntFilter | number
    prsn_pst_mid?: IntFilter | number
    prsn_pst_uid?: IntFilter | number
    prsn_pst_related?: IntFilter | number
    prsn_pst_dateline?: IntFilter | number
    prsn_pst_content?: StringFilter | string
  }

  export type chii_prsn_commentsOrderByWithRelationInput = {
    prsn_pst_id?: SortOrder
    prsn_pst_mid?: SortOrder
    prsn_pst_uid?: SortOrder
    prsn_pst_related?: SortOrder
    prsn_pst_dateline?: SortOrder
    prsn_pst_content?: SortOrder
  }

  export type chii_prsn_commentsWhereUniqueInput = {
    prsn_pst_id?: number
  }

  export type chii_prsn_commentsOrderByWithAggregationInput = {
    prsn_pst_id?: SortOrder
    prsn_pst_mid?: SortOrder
    prsn_pst_uid?: SortOrder
    prsn_pst_related?: SortOrder
    prsn_pst_dateline?: SortOrder
    prsn_pst_content?: SortOrder
    _count?: chii_prsn_commentsCountOrderByAggregateInput
    _avg?: chii_prsn_commentsAvgOrderByAggregateInput
    _max?: chii_prsn_commentsMaxOrderByAggregateInput
    _min?: chii_prsn_commentsMinOrderByAggregateInput
    _sum?: chii_prsn_commentsSumOrderByAggregateInput
  }

  export type chii_prsn_commentsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_prsn_commentsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_prsn_commentsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_prsn_commentsScalarWhereWithAggregatesInput>
    prsn_pst_id?: IntWithAggregatesFilter | number
    prsn_pst_mid?: IntWithAggregatesFilter | number
    prsn_pst_uid?: IntWithAggregatesFilter | number
    prsn_pst_related?: IntWithAggregatesFilter | number
    prsn_pst_dateline?: IntWithAggregatesFilter | number
    prsn_pst_content?: StringWithAggregatesFilter | string
  }

  export type chii_rev_historyWhereInput = {
    AND?: Enumerable<chii_rev_historyWhereInput>
    OR?: Enumerable<chii_rev_historyWhereInput>
    NOT?: Enumerable<chii_rev_historyWhereInput>
    rev_id?: IntFilter | number
    rev_type?: IntFilter | number
    rev_mid?: IntFilter | number
    rev_text_id?: IntFilter | number
    rev_dateline?: IntFilter | number
    rev_creator?: IntFilter | number
    rev_edit_summary?: StringFilter | string
  }

  export type chii_rev_historyOrderByWithRelationInput = {
    rev_id?: SortOrder
    rev_type?: SortOrder
    rev_mid?: SortOrder
    rev_text_id?: SortOrder
    rev_dateline?: SortOrder
    rev_creator?: SortOrder
    rev_edit_summary?: SortOrder
  }

  export type chii_rev_historyWhereUniqueInput = {
    rev_id?: number
  }

  export type chii_rev_historyOrderByWithAggregationInput = {
    rev_id?: SortOrder
    rev_type?: SortOrder
    rev_mid?: SortOrder
    rev_text_id?: SortOrder
    rev_dateline?: SortOrder
    rev_creator?: SortOrder
    rev_edit_summary?: SortOrder
    _count?: chii_rev_historyCountOrderByAggregateInput
    _avg?: chii_rev_historyAvgOrderByAggregateInput
    _max?: chii_rev_historyMaxOrderByAggregateInput
    _min?: chii_rev_historyMinOrderByAggregateInput
    _sum?: chii_rev_historySumOrderByAggregateInput
  }

  export type chii_rev_historyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_rev_historyScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_rev_historyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_rev_historyScalarWhereWithAggregatesInput>
    rev_id?: IntWithAggregatesFilter | number
    rev_type?: IntWithAggregatesFilter | number
    rev_mid?: IntWithAggregatesFilter | number
    rev_text_id?: IntWithAggregatesFilter | number
    rev_dateline?: IntWithAggregatesFilter | number
    rev_creator?: IntWithAggregatesFilter | number
    rev_edit_summary?: StringWithAggregatesFilter | string
  }

  export type chii_rev_textWhereInput = {
    AND?: Enumerable<chii_rev_textWhereInput>
    OR?: Enumerable<chii_rev_textWhereInput>
    NOT?: Enumerable<chii_rev_textWhereInput>
    rev_text_id?: IntFilter | number
    rev_text?: BytesFilter | Buffer
  }

  export type chii_rev_textOrderByWithRelationInput = {
    rev_text_id?: SortOrder
    rev_text?: SortOrder
  }

  export type chii_rev_textWhereUniqueInput = {
    rev_text_id?: number
  }

  export type chii_rev_textOrderByWithAggregationInput = {
    rev_text_id?: SortOrder
    rev_text?: SortOrder
    _count?: chii_rev_textCountOrderByAggregateInput
    _avg?: chii_rev_textAvgOrderByAggregateInput
    _max?: chii_rev_textMaxOrderByAggregateInput
    _min?: chii_rev_textMinOrderByAggregateInput
    _sum?: chii_rev_textSumOrderByAggregateInput
  }

  export type chii_rev_textScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_rev_textScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_rev_textScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_rev_textScalarWhereWithAggregatesInput>
    rev_text_id?: IntWithAggregatesFilter | number
    rev_text?: BytesWithAggregatesFilter | Buffer
  }

  export type chii_subject_fieldsWhereInput = {
    AND?: Enumerable<chii_subject_fieldsWhereInput>
    OR?: Enumerable<chii_subject_fieldsWhereInput>
    NOT?: Enumerable<chii_subject_fieldsWhereInput>
    field_sid?: IntFilter | number
    field_tid?: IntFilter | number
    field_tags?: StringFilter | string
    field_rate_1?: IntFilter | number
    field_rate_2?: IntFilter | number
    field_rate_3?: IntFilter | number
    field_rate_4?: IntFilter | number
    field_rate_5?: IntFilter | number
    field_rate_6?: IntFilter | number
    field_rate_7?: IntFilter | number
    field_rate_8?: IntFilter | number
    field_rate_9?: IntFilter | number
    field_rate_10?: IntFilter | number
    field_airtime?: BoolFilter | boolean
    field_rank?: IntFilter | number
    field_year?: IntFilter | number
    field_mon?: IntFilter | number
    field_week_day?: BoolFilter | boolean
    field_date?: DateTimeFilter | Date | string
    field_redirect?: IntFilter | number
  }

  export type chii_subject_fieldsOrderByWithRelationInput = {
    field_sid?: SortOrder
    field_tid?: SortOrder
    field_tags?: SortOrder
    field_rate_1?: SortOrder
    field_rate_2?: SortOrder
    field_rate_3?: SortOrder
    field_rate_4?: SortOrder
    field_rate_5?: SortOrder
    field_rate_6?: SortOrder
    field_rate_7?: SortOrder
    field_rate_8?: SortOrder
    field_rate_9?: SortOrder
    field_rate_10?: SortOrder
    field_airtime?: SortOrder
    field_rank?: SortOrder
    field_year?: SortOrder
    field_mon?: SortOrder
    field_week_day?: SortOrder
    field_date?: SortOrder
    field_redirect?: SortOrder
  }

  export type chii_subject_fieldsWhereUniqueInput = {
    field_sid?: number
  }

  export type chii_subject_fieldsOrderByWithAggregationInput = {
    field_sid?: SortOrder
    field_tid?: SortOrder
    field_tags?: SortOrder
    field_rate_1?: SortOrder
    field_rate_2?: SortOrder
    field_rate_3?: SortOrder
    field_rate_4?: SortOrder
    field_rate_5?: SortOrder
    field_rate_6?: SortOrder
    field_rate_7?: SortOrder
    field_rate_8?: SortOrder
    field_rate_9?: SortOrder
    field_rate_10?: SortOrder
    field_airtime?: SortOrder
    field_rank?: SortOrder
    field_year?: SortOrder
    field_mon?: SortOrder
    field_week_day?: SortOrder
    field_date?: SortOrder
    field_redirect?: SortOrder
    _count?: chii_subject_fieldsCountOrderByAggregateInput
    _avg?: chii_subject_fieldsAvgOrderByAggregateInput
    _max?: chii_subject_fieldsMaxOrderByAggregateInput
    _min?: chii_subject_fieldsMinOrderByAggregateInput
    _sum?: chii_subject_fieldsSumOrderByAggregateInput
  }

  export type chii_subject_fieldsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_subject_fieldsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_subject_fieldsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_subject_fieldsScalarWhereWithAggregatesInput>
    field_sid?: IntWithAggregatesFilter | number
    field_tid?: IntWithAggregatesFilter | number
    field_tags?: StringWithAggregatesFilter | string
    field_rate_1?: IntWithAggregatesFilter | number
    field_rate_2?: IntWithAggregatesFilter | number
    field_rate_3?: IntWithAggregatesFilter | number
    field_rate_4?: IntWithAggregatesFilter | number
    field_rate_5?: IntWithAggregatesFilter | number
    field_rate_6?: IntWithAggregatesFilter | number
    field_rate_7?: IntWithAggregatesFilter | number
    field_rate_8?: IntWithAggregatesFilter | number
    field_rate_9?: IntWithAggregatesFilter | number
    field_rate_10?: IntWithAggregatesFilter | number
    field_airtime?: BoolWithAggregatesFilter | boolean
    field_rank?: IntWithAggregatesFilter | number
    field_year?: IntWithAggregatesFilter | number
    field_mon?: IntWithAggregatesFilter | number
    field_week_day?: BoolWithAggregatesFilter | boolean
    field_date?: DateTimeWithAggregatesFilter | Date | string
    field_redirect?: IntWithAggregatesFilter | number
  }

  export type chii_subject_interestsWhereInput = {
    AND?: Enumerable<chii_subject_interestsWhereInput>
    OR?: Enumerable<chii_subject_interestsWhereInput>
    NOT?: Enumerable<chii_subject_interestsWhereInput>
    interest_id?: IntFilter | number
    interest_uid?: IntFilter | number
    interest_subject_id?: IntFilter | number
    interest_subject_type?: IntFilter | number
    interest_rate?: IntFilter | number
    interest_type?: BoolFilter | boolean
    interest_has_comment?: BoolFilter | boolean
    interest_comment?: StringFilter | string
    interest_tag?: StringFilter | string
    interest_ep_status?: IntFilter | number
    interest_vol_status?: IntFilter | number
    interest_wish_dateline?: IntFilter | number
    interest_doing_dateline?: IntFilter | number
    interest_collect_dateline?: IntFilter | number
    interest_on_hold_dateline?: IntFilter | number
    interest_dropped_dateline?: IntFilter | number
    interest_create_ip?: StringFilter | string
    interest_lasttouch_ip?: StringFilter | string
    interest_lasttouch?: IntFilter | number
    interest_private?: BoolFilter | boolean
  }

  export type chii_subject_interestsOrderByWithRelationInput = {
    interest_id?: SortOrder
    interest_uid?: SortOrder
    interest_subject_id?: SortOrder
    interest_subject_type?: SortOrder
    interest_rate?: SortOrder
    interest_type?: SortOrder
    interest_has_comment?: SortOrder
    interest_comment?: SortOrder
    interest_tag?: SortOrder
    interest_ep_status?: SortOrder
    interest_vol_status?: SortOrder
    interest_wish_dateline?: SortOrder
    interest_doing_dateline?: SortOrder
    interest_collect_dateline?: SortOrder
    interest_on_hold_dateline?: SortOrder
    interest_dropped_dateline?: SortOrder
    interest_create_ip?: SortOrder
    interest_lasttouch_ip?: SortOrder
    interest_lasttouch?: SortOrder
    interest_private?: SortOrder
  }

  export type chii_subject_interestsWhereUniqueInput = {
    interest_id?: number
    interest_uid_interest_subject_id?: chii_subject_interestsInterest_uidInterest_subject_idCompoundUniqueInput
  }

  export type chii_subject_interestsOrderByWithAggregationInput = {
    interest_id?: SortOrder
    interest_uid?: SortOrder
    interest_subject_id?: SortOrder
    interest_subject_type?: SortOrder
    interest_rate?: SortOrder
    interest_type?: SortOrder
    interest_has_comment?: SortOrder
    interest_comment?: SortOrder
    interest_tag?: SortOrder
    interest_ep_status?: SortOrder
    interest_vol_status?: SortOrder
    interest_wish_dateline?: SortOrder
    interest_doing_dateline?: SortOrder
    interest_collect_dateline?: SortOrder
    interest_on_hold_dateline?: SortOrder
    interest_dropped_dateline?: SortOrder
    interest_create_ip?: SortOrder
    interest_lasttouch_ip?: SortOrder
    interest_lasttouch?: SortOrder
    interest_private?: SortOrder
    _count?: chii_subject_interestsCountOrderByAggregateInput
    _avg?: chii_subject_interestsAvgOrderByAggregateInput
    _max?: chii_subject_interestsMaxOrderByAggregateInput
    _min?: chii_subject_interestsMinOrderByAggregateInput
    _sum?: chii_subject_interestsSumOrderByAggregateInput
  }

  export type chii_subject_interestsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_subject_interestsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_subject_interestsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_subject_interestsScalarWhereWithAggregatesInput>
    interest_id?: IntWithAggregatesFilter | number
    interest_uid?: IntWithAggregatesFilter | number
    interest_subject_id?: IntWithAggregatesFilter | number
    interest_subject_type?: IntWithAggregatesFilter | number
    interest_rate?: IntWithAggregatesFilter | number
    interest_type?: BoolWithAggregatesFilter | boolean
    interest_has_comment?: BoolWithAggregatesFilter | boolean
    interest_comment?: StringWithAggregatesFilter | string
    interest_tag?: StringWithAggregatesFilter | string
    interest_ep_status?: IntWithAggregatesFilter | number
    interest_vol_status?: IntWithAggregatesFilter | number
    interest_wish_dateline?: IntWithAggregatesFilter | number
    interest_doing_dateline?: IntWithAggregatesFilter | number
    interest_collect_dateline?: IntWithAggregatesFilter | number
    interest_on_hold_dateline?: IntWithAggregatesFilter | number
    interest_dropped_dateline?: IntWithAggregatesFilter | number
    interest_create_ip?: StringWithAggregatesFilter | string
    interest_lasttouch_ip?: StringWithAggregatesFilter | string
    interest_lasttouch?: IntWithAggregatesFilter | number
    interest_private?: BoolWithAggregatesFilter | boolean
  }

  export type chii_subject_postsWhereInput = {
    AND?: Enumerable<chii_subject_postsWhereInput>
    OR?: Enumerable<chii_subject_postsWhereInput>
    NOT?: Enumerable<chii_subject_postsWhereInput>
    sbj_pst_id?: IntFilter | number
    sbj_pst_mid?: IntFilter | number
    sbj_pst_uid?: IntFilter | number
    sbj_pst_related?: IntFilter | number
    sbj_pst_content?: StringFilter | string
    sbj_pst_state?: BoolFilter | boolean
    sbj_pst_dateline?: IntFilter | number
  }

  export type chii_subject_postsOrderByWithRelationInput = {
    sbj_pst_id?: SortOrder
    sbj_pst_mid?: SortOrder
    sbj_pst_uid?: SortOrder
    sbj_pst_related?: SortOrder
    sbj_pst_content?: SortOrder
    sbj_pst_state?: SortOrder
    sbj_pst_dateline?: SortOrder
  }

  export type chii_subject_postsWhereUniqueInput = {
    sbj_pst_id?: number
  }

  export type chii_subject_postsOrderByWithAggregationInput = {
    sbj_pst_id?: SortOrder
    sbj_pst_mid?: SortOrder
    sbj_pst_uid?: SortOrder
    sbj_pst_related?: SortOrder
    sbj_pst_content?: SortOrder
    sbj_pst_state?: SortOrder
    sbj_pst_dateline?: SortOrder
    _count?: chii_subject_postsCountOrderByAggregateInput
    _avg?: chii_subject_postsAvgOrderByAggregateInput
    _max?: chii_subject_postsMaxOrderByAggregateInput
    _min?: chii_subject_postsMinOrderByAggregateInput
    _sum?: chii_subject_postsSumOrderByAggregateInput
  }

  export type chii_subject_postsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_subject_postsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_subject_postsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_subject_postsScalarWhereWithAggregatesInput>
    sbj_pst_id?: IntWithAggregatesFilter | number
    sbj_pst_mid?: IntWithAggregatesFilter | number
    sbj_pst_uid?: IntWithAggregatesFilter | number
    sbj_pst_related?: IntWithAggregatesFilter | number
    sbj_pst_content?: StringWithAggregatesFilter | string
    sbj_pst_state?: BoolWithAggregatesFilter | boolean
    sbj_pst_dateline?: IntWithAggregatesFilter | number
  }

  export type chii_subject_relationsWhereInput = {
    AND?: Enumerable<chii_subject_relationsWhereInput>
    OR?: Enumerable<chii_subject_relationsWhereInput>
    NOT?: Enumerable<chii_subject_relationsWhereInput>
    rlt_subject_id?: IntFilter | number
    rlt_subject_type_id?: IntFilter | number
    rlt_relation_type?: IntFilter | number
    rlt_related_subject_id?: IntFilter | number
    rlt_related_subject_type_id?: IntFilter | number
    rlt_vice_versa?: BoolFilter | boolean
    rlt_order?: IntFilter | number
  }

  export type chii_subject_relationsOrderByWithRelationInput = {
    rlt_subject_id?: SortOrder
    rlt_subject_type_id?: SortOrder
    rlt_relation_type?: SortOrder
    rlt_related_subject_id?: SortOrder
    rlt_related_subject_type_id?: SortOrder
    rlt_vice_versa?: SortOrder
    rlt_order?: SortOrder
  }

  export type chii_subject_relationsWhereUniqueInput = {
    rlt_subject_id_rlt_related_subject_id_rlt_vice_versa?: chii_subject_relationsRlt_subject_idRlt_related_subject_idRlt_vice_versaCompoundUniqueInput
  }

  export type chii_subject_relationsOrderByWithAggregationInput = {
    rlt_subject_id?: SortOrder
    rlt_subject_type_id?: SortOrder
    rlt_relation_type?: SortOrder
    rlt_related_subject_id?: SortOrder
    rlt_related_subject_type_id?: SortOrder
    rlt_vice_versa?: SortOrder
    rlt_order?: SortOrder
    _count?: chii_subject_relationsCountOrderByAggregateInput
    _avg?: chii_subject_relationsAvgOrderByAggregateInput
    _max?: chii_subject_relationsMaxOrderByAggregateInput
    _min?: chii_subject_relationsMinOrderByAggregateInput
    _sum?: chii_subject_relationsSumOrderByAggregateInput
  }

  export type chii_subject_relationsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_subject_relationsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_subject_relationsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_subject_relationsScalarWhereWithAggregatesInput>
    rlt_subject_id?: IntWithAggregatesFilter | number
    rlt_subject_type_id?: IntWithAggregatesFilter | number
    rlt_relation_type?: IntWithAggregatesFilter | number
    rlt_related_subject_id?: IntWithAggregatesFilter | number
    rlt_related_subject_type_id?: IntWithAggregatesFilter | number
    rlt_vice_versa?: BoolWithAggregatesFilter | boolean
    rlt_order?: IntWithAggregatesFilter | number
  }

  export type chii_subject_revisionsWhereInput = {
    AND?: Enumerable<chii_subject_revisionsWhereInput>
    OR?: Enumerable<chii_subject_revisionsWhereInput>
    NOT?: Enumerable<chii_subject_revisionsWhereInput>
    rev_id?: IntFilter | number
    rev_type?: IntFilter | number
    rev_subject_id?: IntFilter | number
    rev_type_id?: IntFilter | number
    rev_creator?: IntFilter | number
    rev_dateline?: IntFilter | number
    rev_name?: StringFilter | string
    rev_name_cn?: StringFilter | string
    rev_field_infobox?: StringFilter | string
    rev_field_summary?: StringFilter | string
    rev_vote_field?: StringFilter | string
    rev_field_eps?: IntFilter | number
    rev_edit_summary?: StringFilter | string
    rev_platform?: IntFilter | number
  }

  export type chii_subject_revisionsOrderByWithRelationInput = {
    rev_id?: SortOrder
    rev_type?: SortOrder
    rev_subject_id?: SortOrder
    rev_type_id?: SortOrder
    rev_creator?: SortOrder
    rev_dateline?: SortOrder
    rev_name?: SortOrder
    rev_name_cn?: SortOrder
    rev_field_infobox?: SortOrder
    rev_field_summary?: SortOrder
    rev_vote_field?: SortOrder
    rev_field_eps?: SortOrder
    rev_edit_summary?: SortOrder
    rev_platform?: SortOrder
  }

  export type chii_subject_revisionsWhereUniqueInput = {
    rev_id?: number
  }

  export type chii_subject_revisionsOrderByWithAggregationInput = {
    rev_id?: SortOrder
    rev_type?: SortOrder
    rev_subject_id?: SortOrder
    rev_type_id?: SortOrder
    rev_creator?: SortOrder
    rev_dateline?: SortOrder
    rev_name?: SortOrder
    rev_name_cn?: SortOrder
    rev_field_infobox?: SortOrder
    rev_field_summary?: SortOrder
    rev_vote_field?: SortOrder
    rev_field_eps?: SortOrder
    rev_edit_summary?: SortOrder
    rev_platform?: SortOrder
    _count?: chii_subject_revisionsCountOrderByAggregateInput
    _avg?: chii_subject_revisionsAvgOrderByAggregateInput
    _max?: chii_subject_revisionsMaxOrderByAggregateInput
    _min?: chii_subject_revisionsMinOrderByAggregateInput
    _sum?: chii_subject_revisionsSumOrderByAggregateInput
  }

  export type chii_subject_revisionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_subject_revisionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_subject_revisionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_subject_revisionsScalarWhereWithAggregatesInput>
    rev_id?: IntWithAggregatesFilter | number
    rev_type?: IntWithAggregatesFilter | number
    rev_subject_id?: IntWithAggregatesFilter | number
    rev_type_id?: IntWithAggregatesFilter | number
    rev_creator?: IntWithAggregatesFilter | number
    rev_dateline?: IntWithAggregatesFilter | number
    rev_name?: StringWithAggregatesFilter | string
    rev_name_cn?: StringWithAggregatesFilter | string
    rev_field_infobox?: StringWithAggregatesFilter | string
    rev_field_summary?: StringWithAggregatesFilter | string
    rev_vote_field?: StringWithAggregatesFilter | string
    rev_field_eps?: IntWithAggregatesFilter | number
    rev_edit_summary?: StringWithAggregatesFilter | string
    rev_platform?: IntWithAggregatesFilter | number
  }

  export type chii_subject_topicsWhereInput = {
    AND?: Enumerable<chii_subject_topicsWhereInput>
    OR?: Enumerable<chii_subject_topicsWhereInput>
    NOT?: Enumerable<chii_subject_topicsWhereInput>
    sbj_tpc_id?: IntFilter | number
    sbj_tpc_subject_id?: IntFilter | number
    sbj_tpc_uid?: IntFilter | number
    sbj_tpc_title?: StringFilter | string
    sbj_tpc_dateline?: IntFilter | number
    sbj_tpc_lastpost?: IntFilter | number
    sbj_tpc_replies?: IntFilter | number
    sbj_tpc_state?: BoolFilter | boolean
    sbj_tpc_display?: BoolFilter | boolean
  }

  export type chii_subject_topicsOrderByWithRelationInput = {
    sbj_tpc_id?: SortOrder
    sbj_tpc_subject_id?: SortOrder
    sbj_tpc_uid?: SortOrder
    sbj_tpc_title?: SortOrder
    sbj_tpc_dateline?: SortOrder
    sbj_tpc_lastpost?: SortOrder
    sbj_tpc_replies?: SortOrder
    sbj_tpc_state?: SortOrder
    sbj_tpc_display?: SortOrder
  }

  export type chii_subject_topicsWhereUniqueInput = {
    sbj_tpc_id?: number
  }

  export type chii_subject_topicsOrderByWithAggregationInput = {
    sbj_tpc_id?: SortOrder
    sbj_tpc_subject_id?: SortOrder
    sbj_tpc_uid?: SortOrder
    sbj_tpc_title?: SortOrder
    sbj_tpc_dateline?: SortOrder
    sbj_tpc_lastpost?: SortOrder
    sbj_tpc_replies?: SortOrder
    sbj_tpc_state?: SortOrder
    sbj_tpc_display?: SortOrder
    _count?: chii_subject_topicsCountOrderByAggregateInput
    _avg?: chii_subject_topicsAvgOrderByAggregateInput
    _max?: chii_subject_topicsMaxOrderByAggregateInput
    _min?: chii_subject_topicsMinOrderByAggregateInput
    _sum?: chii_subject_topicsSumOrderByAggregateInput
  }

  export type chii_subject_topicsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_subject_topicsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_subject_topicsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_subject_topicsScalarWhereWithAggregatesInput>
    sbj_tpc_id?: IntWithAggregatesFilter | number
    sbj_tpc_subject_id?: IntWithAggregatesFilter | number
    sbj_tpc_uid?: IntWithAggregatesFilter | number
    sbj_tpc_title?: StringWithAggregatesFilter | string
    sbj_tpc_dateline?: IntWithAggregatesFilter | number
    sbj_tpc_lastpost?: IntWithAggregatesFilter | number
    sbj_tpc_replies?: IntWithAggregatesFilter | number
    sbj_tpc_state?: BoolWithAggregatesFilter | boolean
    sbj_tpc_display?: BoolWithAggregatesFilter | boolean
  }

  export type chii_subjectsWhereInput = {
    AND?: Enumerable<chii_subjectsWhereInput>
    OR?: Enumerable<chii_subjectsWhereInput>
    NOT?: Enumerable<chii_subjectsWhereInput>
    subject_id?: IntFilter | number
    subject_type_id?: IntFilter | number
    subject_name?: StringFilter | string
    subject_name_cn?: StringFilter | string
    subject_uid?: StringFilter | string
    subject_creator?: IntFilter | number
    subject_dateline?: IntFilter | number
    subject_image?: StringFilter | string
    subject_platform?: IntFilter | number
    field_infobox?: StringFilter | string
    field_summary?: StringFilter | string
    field_5?: StringFilter | string
    field_volumes?: IntFilter | number
    field_eps?: IntFilter | number
    subject_wish?: IntFilter | number
    subject_collect?: IntFilter | number
    subject_doing?: IntFilter | number
    subject_on_hold?: IntFilter | number
    subject_dropped?: IntFilter | number
    subject_series?: BoolFilter | boolean
    subject_series_entry?: IntFilter | number
    subject_idx_cn?: StringFilter | string
    subject_airtime?: BoolFilter | boolean
    subject_nsfw?: BoolFilter | boolean
    subject_ban?: BoolFilter | boolean
  }

  export type chii_subjectsOrderByWithRelationInput = {
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    subject_name?: SortOrder
    subject_name_cn?: SortOrder
    subject_uid?: SortOrder
    subject_creator?: SortOrder
    subject_dateline?: SortOrder
    subject_image?: SortOrder
    subject_platform?: SortOrder
    field_infobox?: SortOrder
    field_summary?: SortOrder
    field_5?: SortOrder
    field_volumes?: SortOrder
    field_eps?: SortOrder
    subject_wish?: SortOrder
    subject_collect?: SortOrder
    subject_doing?: SortOrder
    subject_on_hold?: SortOrder
    subject_dropped?: SortOrder
    subject_series?: SortOrder
    subject_series_entry?: SortOrder
    subject_idx_cn?: SortOrder
    subject_airtime?: SortOrder
    subject_nsfw?: SortOrder
    subject_ban?: SortOrder
  }

  export type chii_subjectsWhereUniqueInput = {
    subject_id?: number
  }

  export type chii_subjectsOrderByWithAggregationInput = {
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    subject_name?: SortOrder
    subject_name_cn?: SortOrder
    subject_uid?: SortOrder
    subject_creator?: SortOrder
    subject_dateline?: SortOrder
    subject_image?: SortOrder
    subject_platform?: SortOrder
    field_infobox?: SortOrder
    field_summary?: SortOrder
    field_5?: SortOrder
    field_volumes?: SortOrder
    field_eps?: SortOrder
    subject_wish?: SortOrder
    subject_collect?: SortOrder
    subject_doing?: SortOrder
    subject_on_hold?: SortOrder
    subject_dropped?: SortOrder
    subject_series?: SortOrder
    subject_series_entry?: SortOrder
    subject_idx_cn?: SortOrder
    subject_airtime?: SortOrder
    subject_nsfw?: SortOrder
    subject_ban?: SortOrder
    _count?: chii_subjectsCountOrderByAggregateInput
    _avg?: chii_subjectsAvgOrderByAggregateInput
    _max?: chii_subjectsMaxOrderByAggregateInput
    _min?: chii_subjectsMinOrderByAggregateInput
    _sum?: chii_subjectsSumOrderByAggregateInput
  }

  export type chii_subjectsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_subjectsScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_subjectsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_subjectsScalarWhereWithAggregatesInput>
    subject_id?: IntWithAggregatesFilter | number
    subject_type_id?: IntWithAggregatesFilter | number
    subject_name?: StringWithAggregatesFilter | string
    subject_name_cn?: StringWithAggregatesFilter | string
    subject_uid?: StringWithAggregatesFilter | string
    subject_creator?: IntWithAggregatesFilter | number
    subject_dateline?: IntWithAggregatesFilter | number
    subject_image?: StringWithAggregatesFilter | string
    subject_platform?: IntWithAggregatesFilter | number
    field_infobox?: StringWithAggregatesFilter | string
    field_summary?: StringWithAggregatesFilter | string
    field_5?: StringWithAggregatesFilter | string
    field_volumes?: IntWithAggregatesFilter | number
    field_eps?: IntWithAggregatesFilter | number
    subject_wish?: IntWithAggregatesFilter | number
    subject_collect?: IntWithAggregatesFilter | number
    subject_doing?: IntWithAggregatesFilter | number
    subject_on_hold?: IntWithAggregatesFilter | number
    subject_dropped?: IntWithAggregatesFilter | number
    subject_series?: BoolWithAggregatesFilter | boolean
    subject_series_entry?: IntWithAggregatesFilter | number
    subject_idx_cn?: StringWithAggregatesFilter | string
    subject_airtime?: BoolWithAggregatesFilter | boolean
    subject_nsfw?: BoolWithAggregatesFilter | boolean
    subject_ban?: BoolWithAggregatesFilter | boolean
  }

  export type chii_timelineWhereInput = {
    AND?: Enumerable<chii_timelineWhereInput>
    OR?: Enumerable<chii_timelineWhereInput>
    NOT?: Enumerable<chii_timelineWhereInput>
    tml_id?: IntFilter | number
    tml_uid?: IntFilter | number
    tml_cat?: IntFilter | number
    tml_type?: IntFilter | number
    tml_related?: StringFilter | string
    tml_memo?: StringFilter | string
    tml_img?: StringFilter | string
    tml_batch?: IntFilter | number
    tml_source?: IntFilter | number
    tml_replies?: IntFilter | number
    tml_dateline?: IntFilter | number
    tml_status?: IntFilter | number
  }

  export type chii_timelineOrderByWithRelationInput = {
    tml_id?: SortOrder
    tml_uid?: SortOrder
    tml_cat?: SortOrder
    tml_type?: SortOrder
    tml_related?: SortOrder
    tml_memo?: SortOrder
    tml_img?: SortOrder
    tml_batch?: SortOrder
    tml_source?: SortOrder
    tml_replies?: SortOrder
    tml_dateline?: SortOrder
    tml_status?: SortOrder
  }

  export type chii_timelineWhereUniqueInput = {
    tml_id?: number
  }

  export type chii_timelineOrderByWithAggregationInput = {
    tml_id?: SortOrder
    tml_uid?: SortOrder
    tml_cat?: SortOrder
    tml_type?: SortOrder
    tml_related?: SortOrder
    tml_memo?: SortOrder
    tml_img?: SortOrder
    tml_batch?: SortOrder
    tml_source?: SortOrder
    tml_replies?: SortOrder
    tml_dateline?: SortOrder
    tml_status?: SortOrder
    _count?: chii_timelineCountOrderByAggregateInput
    _avg?: chii_timelineAvgOrderByAggregateInput
    _max?: chii_timelineMaxOrderByAggregateInput
    _min?: chii_timelineMinOrderByAggregateInput
    _sum?: chii_timelineSumOrderByAggregateInput
  }

  export type chii_timelineScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_timelineScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_timelineScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_timelineScalarWhereWithAggregatesInput>
    tml_id?: IntWithAggregatesFilter | number
    tml_uid?: IntWithAggregatesFilter | number
    tml_cat?: IntWithAggregatesFilter | number
    tml_type?: IntWithAggregatesFilter | number
    tml_related?: StringWithAggregatesFilter | string
    tml_memo?: StringWithAggregatesFilter | string
    tml_img?: StringWithAggregatesFilter | string
    tml_batch?: IntWithAggregatesFilter | number
    tml_source?: IntWithAggregatesFilter | number
    tml_replies?: IntWithAggregatesFilter | number
    tml_dateline?: IntWithAggregatesFilter | number
    tml_status?: IntWithAggregatesFilter | number
  }

  export type chii_usergroupWhereInput = {
    AND?: Enumerable<chii_usergroupWhereInput>
    OR?: Enumerable<chii_usergroupWhereInput>
    NOT?: Enumerable<chii_usergroupWhereInput>
    usr_grp_id?: IntFilter | number
    usr_grp_name?: StringFilter | string
    usr_grp_perm?: StringFilter | string
    usr_grp_dateline?: IntFilter | number
  }

  export type chii_usergroupOrderByWithRelationInput = {
    usr_grp_id?: SortOrder
    usr_grp_name?: SortOrder
    usr_grp_perm?: SortOrder
    usr_grp_dateline?: SortOrder
  }

  export type chii_usergroupWhereUniqueInput = {
    usr_grp_id?: number
  }

  export type chii_usergroupOrderByWithAggregationInput = {
    usr_grp_id?: SortOrder
    usr_grp_name?: SortOrder
    usr_grp_perm?: SortOrder
    usr_grp_dateline?: SortOrder
    _count?: chii_usergroupCountOrderByAggregateInput
    _avg?: chii_usergroupAvgOrderByAggregateInput
    _max?: chii_usergroupMaxOrderByAggregateInput
    _min?: chii_usergroupMinOrderByAggregateInput
    _sum?: chii_usergroupSumOrderByAggregateInput
  }

  export type chii_usergroupScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chii_usergroupScalarWhereWithAggregatesInput>
    OR?: Enumerable<chii_usergroupScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chii_usergroupScalarWhereWithAggregatesInput>
    usr_grp_id?: IntWithAggregatesFilter | number
    usr_grp_name?: StringWithAggregatesFilter | string
    usr_grp_perm?: StringWithAggregatesFilter | string
    usr_grp_dateline?: IntWithAggregatesFilter | number
  }

  export type exampleWhereInput = {
    AND?: Enumerable<exampleWhereInput>
    OR?: Enumerable<exampleWhereInput>
    NOT?: Enumerable<exampleWhereInput>
    id?: IntFilter | number
    time?: DateTimeFilter | Date | string
  }

  export type exampleOrderByWithRelationInput = {
    id?: SortOrder
    time?: SortOrder
  }

  export type exampleWhereUniqueInput = {
    id?: number
  }

  export type exampleOrderByWithAggregationInput = {
    id?: SortOrder
    time?: SortOrder
    _count?: exampleCountOrderByAggregateInput
    _avg?: exampleAvgOrderByAggregateInput
    _max?: exampleMaxOrderByAggregateInput
    _min?: exampleMinOrderByAggregateInput
    _sum?: exampleSumOrderByAggregateInput
  }

  export type exampleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<exampleScalarWhereWithAggregatesInput>
    OR?: Enumerable<exampleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<exampleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    time?: DateTimeWithAggregatesFilter | Date | string
  }

  export type chii_appsCreateInput = {
    app_type: boolean
    app_creator: number
    app_name: string
    app_desc: string
    app_url: string
    app_collects: number
    app_status: boolean
    app_timestamp: number
    app_lasttouch: number
    app_ban: boolean
  }

  export type chii_appsUncheckedCreateInput = {
    app_id?: number
    app_type: boolean
    app_creator: number
    app_name: string
    app_desc: string
    app_url: string
    app_collects: number
    app_status: boolean
    app_timestamp: number
    app_lasttouch: number
    app_ban: boolean
  }

  export type chii_appsUpdateInput = {
    app_type?: BoolFieldUpdateOperationsInput | boolean
    app_creator?: IntFieldUpdateOperationsInput | number
    app_name?: StringFieldUpdateOperationsInput | string
    app_desc?: StringFieldUpdateOperationsInput | string
    app_url?: StringFieldUpdateOperationsInput | string
    app_collects?: IntFieldUpdateOperationsInput | number
    app_status?: BoolFieldUpdateOperationsInput | boolean
    app_timestamp?: IntFieldUpdateOperationsInput | number
    app_lasttouch?: IntFieldUpdateOperationsInput | number
    app_ban?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_appsUncheckedUpdateInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    app_type?: BoolFieldUpdateOperationsInput | boolean
    app_creator?: IntFieldUpdateOperationsInput | number
    app_name?: StringFieldUpdateOperationsInput | string
    app_desc?: StringFieldUpdateOperationsInput | string
    app_url?: StringFieldUpdateOperationsInput | string
    app_collects?: IntFieldUpdateOperationsInput | number
    app_status?: BoolFieldUpdateOperationsInput | boolean
    app_timestamp?: IntFieldUpdateOperationsInput | number
    app_lasttouch?: IntFieldUpdateOperationsInput | number
    app_ban?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_appsCreateManyInput = {
    app_id?: number
    app_type: boolean
    app_creator: number
    app_name: string
    app_desc: string
    app_url: string
    app_collects: number
    app_status: boolean
    app_timestamp: number
    app_lasttouch: number
    app_ban: boolean
  }

  export type chii_appsUpdateManyMutationInput = {
    app_type?: BoolFieldUpdateOperationsInput | boolean
    app_creator?: IntFieldUpdateOperationsInput | number
    app_name?: StringFieldUpdateOperationsInput | string
    app_desc?: StringFieldUpdateOperationsInput | string
    app_url?: StringFieldUpdateOperationsInput | string
    app_collects?: IntFieldUpdateOperationsInput | number
    app_status?: BoolFieldUpdateOperationsInput | boolean
    app_timestamp?: IntFieldUpdateOperationsInput | number
    app_lasttouch?: IntFieldUpdateOperationsInput | number
    app_ban?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_appsUncheckedUpdateManyInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    app_type?: BoolFieldUpdateOperationsInput | boolean
    app_creator?: IntFieldUpdateOperationsInput | number
    app_name?: StringFieldUpdateOperationsInput | string
    app_desc?: StringFieldUpdateOperationsInput | string
    app_url?: StringFieldUpdateOperationsInput | string
    app_collects?: IntFieldUpdateOperationsInput | number
    app_status?: BoolFieldUpdateOperationsInput | boolean
    app_timestamp?: IntFieldUpdateOperationsInput | number
    app_lasttouch?: IntFieldUpdateOperationsInput | number
    app_ban?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_charactersCreateInput = {
    crt_name: string
    crt_role: number
    crt_infobox: string
    crt_summary: string
    crt_img: string
    crt_comment?: number
    crt_collects: number
    crt_dateline: number
    crt_lastpost: number
    crt_lock?: number
    crt_img_anidb: string
    crt_anidb_id: number
    crt_ban?: number
    crt_redirect?: number
    crt_nsfw: boolean
  }

  export type chii_charactersUncheckedCreateInput = {
    crt_id?: number
    crt_name: string
    crt_role: number
    crt_infobox: string
    crt_summary: string
    crt_img: string
    crt_comment?: number
    crt_collects: number
    crt_dateline: number
    crt_lastpost: number
    crt_lock?: number
    crt_img_anidb: string
    crt_anidb_id: number
    crt_ban?: number
    crt_redirect?: number
    crt_nsfw: boolean
  }

  export type chii_charactersUpdateInput = {
    crt_name?: StringFieldUpdateOperationsInput | string
    crt_role?: IntFieldUpdateOperationsInput | number
    crt_infobox?: StringFieldUpdateOperationsInput | string
    crt_summary?: StringFieldUpdateOperationsInput | string
    crt_img?: StringFieldUpdateOperationsInput | string
    crt_comment?: IntFieldUpdateOperationsInput | number
    crt_collects?: IntFieldUpdateOperationsInput | number
    crt_dateline?: IntFieldUpdateOperationsInput | number
    crt_lastpost?: IntFieldUpdateOperationsInput | number
    crt_lock?: IntFieldUpdateOperationsInput | number
    crt_img_anidb?: StringFieldUpdateOperationsInput | string
    crt_anidb_id?: IntFieldUpdateOperationsInput | number
    crt_ban?: IntFieldUpdateOperationsInput | number
    crt_redirect?: IntFieldUpdateOperationsInput | number
    crt_nsfw?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_charactersUncheckedUpdateInput = {
    crt_id?: IntFieldUpdateOperationsInput | number
    crt_name?: StringFieldUpdateOperationsInput | string
    crt_role?: IntFieldUpdateOperationsInput | number
    crt_infobox?: StringFieldUpdateOperationsInput | string
    crt_summary?: StringFieldUpdateOperationsInput | string
    crt_img?: StringFieldUpdateOperationsInput | string
    crt_comment?: IntFieldUpdateOperationsInput | number
    crt_collects?: IntFieldUpdateOperationsInput | number
    crt_dateline?: IntFieldUpdateOperationsInput | number
    crt_lastpost?: IntFieldUpdateOperationsInput | number
    crt_lock?: IntFieldUpdateOperationsInput | number
    crt_img_anidb?: StringFieldUpdateOperationsInput | string
    crt_anidb_id?: IntFieldUpdateOperationsInput | number
    crt_ban?: IntFieldUpdateOperationsInput | number
    crt_redirect?: IntFieldUpdateOperationsInput | number
    crt_nsfw?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_charactersCreateManyInput = {
    crt_id?: number
    crt_name: string
    crt_role: number
    crt_infobox: string
    crt_summary: string
    crt_img: string
    crt_comment?: number
    crt_collects: number
    crt_dateline: number
    crt_lastpost: number
    crt_lock?: number
    crt_img_anidb: string
    crt_anidb_id: number
    crt_ban?: number
    crt_redirect?: number
    crt_nsfw: boolean
  }

  export type chii_charactersUpdateManyMutationInput = {
    crt_name?: StringFieldUpdateOperationsInput | string
    crt_role?: IntFieldUpdateOperationsInput | number
    crt_infobox?: StringFieldUpdateOperationsInput | string
    crt_summary?: StringFieldUpdateOperationsInput | string
    crt_img?: StringFieldUpdateOperationsInput | string
    crt_comment?: IntFieldUpdateOperationsInput | number
    crt_collects?: IntFieldUpdateOperationsInput | number
    crt_dateline?: IntFieldUpdateOperationsInput | number
    crt_lastpost?: IntFieldUpdateOperationsInput | number
    crt_lock?: IntFieldUpdateOperationsInput | number
    crt_img_anidb?: StringFieldUpdateOperationsInput | string
    crt_anidb_id?: IntFieldUpdateOperationsInput | number
    crt_ban?: IntFieldUpdateOperationsInput | number
    crt_redirect?: IntFieldUpdateOperationsInput | number
    crt_nsfw?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_charactersUncheckedUpdateManyInput = {
    crt_id?: IntFieldUpdateOperationsInput | number
    crt_name?: StringFieldUpdateOperationsInput | string
    crt_role?: IntFieldUpdateOperationsInput | number
    crt_infobox?: StringFieldUpdateOperationsInput | string
    crt_summary?: StringFieldUpdateOperationsInput | string
    crt_img?: StringFieldUpdateOperationsInput | string
    crt_comment?: IntFieldUpdateOperationsInput | number
    crt_collects?: IntFieldUpdateOperationsInput | number
    crt_dateline?: IntFieldUpdateOperationsInput | number
    crt_lastpost?: IntFieldUpdateOperationsInput | number
    crt_lock?: IntFieldUpdateOperationsInput | number
    crt_img_anidb?: StringFieldUpdateOperationsInput | string
    crt_anidb_id?: IntFieldUpdateOperationsInput | number
    crt_ban?: IntFieldUpdateOperationsInput | number
    crt_redirect?: IntFieldUpdateOperationsInput | number
    crt_nsfw?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_crt_cast_indexCreateInput = {
    crt_id: number
    prsn_id: number
    subject_id: number
    subject_type_id: number
    summary: string
  }

  export type chii_crt_cast_indexUncheckedCreateInput = {
    crt_id: number
    prsn_id: number
    subject_id: number
    subject_type_id: number
    summary: string
  }

  export type chii_crt_cast_indexUpdateInput = {
    crt_id?: IntFieldUpdateOperationsInput | number
    prsn_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    subject_type_id?: IntFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
  }

  export type chii_crt_cast_indexUncheckedUpdateInput = {
    crt_id?: IntFieldUpdateOperationsInput | number
    prsn_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    subject_type_id?: IntFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
  }

  export type chii_crt_cast_indexCreateManyInput = {
    crt_id: number
    prsn_id: number
    subject_id: number
    subject_type_id: number
    summary: string
  }

  export type chii_crt_cast_indexUpdateManyMutationInput = {
    crt_id?: IntFieldUpdateOperationsInput | number
    prsn_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    subject_type_id?: IntFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
  }

  export type chii_crt_cast_indexUncheckedUpdateManyInput = {
    crt_id?: IntFieldUpdateOperationsInput | number
    prsn_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    subject_type_id?: IntFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
  }

  export type chii_crt_commentsCreateInput = {
    crt_pst_mid: number
    crt_pst_uid: number
    crt_pst_related?: number
    crt_pst_dateline: number
    crt_pst_content: string
  }

  export type chii_crt_commentsUncheckedCreateInput = {
    crt_pst_id?: number
    crt_pst_mid: number
    crt_pst_uid: number
    crt_pst_related?: number
    crt_pst_dateline: number
    crt_pst_content: string
  }

  export type chii_crt_commentsUpdateInput = {
    crt_pst_mid?: IntFieldUpdateOperationsInput | number
    crt_pst_uid?: IntFieldUpdateOperationsInput | number
    crt_pst_related?: IntFieldUpdateOperationsInput | number
    crt_pst_dateline?: IntFieldUpdateOperationsInput | number
    crt_pst_content?: StringFieldUpdateOperationsInput | string
  }

  export type chii_crt_commentsUncheckedUpdateInput = {
    crt_pst_id?: IntFieldUpdateOperationsInput | number
    crt_pst_mid?: IntFieldUpdateOperationsInput | number
    crt_pst_uid?: IntFieldUpdateOperationsInput | number
    crt_pst_related?: IntFieldUpdateOperationsInput | number
    crt_pst_dateline?: IntFieldUpdateOperationsInput | number
    crt_pst_content?: StringFieldUpdateOperationsInput | string
  }

  export type chii_crt_commentsCreateManyInput = {
    crt_pst_id?: number
    crt_pst_mid: number
    crt_pst_uid: number
    crt_pst_related?: number
    crt_pst_dateline: number
    crt_pst_content: string
  }

  export type chii_crt_commentsUpdateManyMutationInput = {
    crt_pst_mid?: IntFieldUpdateOperationsInput | number
    crt_pst_uid?: IntFieldUpdateOperationsInput | number
    crt_pst_related?: IntFieldUpdateOperationsInput | number
    crt_pst_dateline?: IntFieldUpdateOperationsInput | number
    crt_pst_content?: StringFieldUpdateOperationsInput | string
  }

  export type chii_crt_commentsUncheckedUpdateManyInput = {
    crt_pst_id?: IntFieldUpdateOperationsInput | number
    crt_pst_mid?: IntFieldUpdateOperationsInput | number
    crt_pst_uid?: IntFieldUpdateOperationsInput | number
    crt_pst_related?: IntFieldUpdateOperationsInput | number
    crt_pst_dateline?: IntFieldUpdateOperationsInput | number
    crt_pst_content?: StringFieldUpdateOperationsInput | string
  }

  export type chii_crt_subject_indexCreateInput = {
    crt_id: number
    subject_id: number
    subject_type_id: number
    crt_type: number
    ctr_appear_eps: string
    crt_order: number
  }

  export type chii_crt_subject_indexUncheckedCreateInput = {
    crt_id: number
    subject_id: number
    subject_type_id: number
    crt_type: number
    ctr_appear_eps: string
    crt_order: number
  }

  export type chii_crt_subject_indexUpdateInput = {
    crt_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    subject_type_id?: IntFieldUpdateOperationsInput | number
    crt_type?: IntFieldUpdateOperationsInput | number
    ctr_appear_eps?: StringFieldUpdateOperationsInput | string
    crt_order?: IntFieldUpdateOperationsInput | number
  }

  export type chii_crt_subject_indexUncheckedUpdateInput = {
    crt_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    subject_type_id?: IntFieldUpdateOperationsInput | number
    crt_type?: IntFieldUpdateOperationsInput | number
    ctr_appear_eps?: StringFieldUpdateOperationsInput | string
    crt_order?: IntFieldUpdateOperationsInput | number
  }

  export type chii_crt_subject_indexCreateManyInput = {
    crt_id: number
    subject_id: number
    subject_type_id: number
    crt_type: number
    ctr_appear_eps: string
    crt_order: number
  }

  export type chii_crt_subject_indexUpdateManyMutationInput = {
    crt_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    subject_type_id?: IntFieldUpdateOperationsInput | number
    crt_type?: IntFieldUpdateOperationsInput | number
    ctr_appear_eps?: StringFieldUpdateOperationsInput | string
    crt_order?: IntFieldUpdateOperationsInput | number
  }

  export type chii_crt_subject_indexUncheckedUpdateManyInput = {
    crt_id?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    subject_type_id?: IntFieldUpdateOperationsInput | number
    crt_type?: IntFieldUpdateOperationsInput | number
    ctr_appear_eps?: StringFieldUpdateOperationsInput | string
    crt_order?: IntFieldUpdateOperationsInput | number
  }

  export type chii_ep_commentsCreateInput = {
    ep_pst_mid: number
    ep_pst_uid: number
    ep_pst_related?: number
    ep_pst_dateline: number
    ep_pst_content: string
  }

  export type chii_ep_commentsUncheckedCreateInput = {
    ep_pst_id?: number
    ep_pst_mid: number
    ep_pst_uid: number
    ep_pst_related?: number
    ep_pst_dateline: number
    ep_pst_content: string
  }

  export type chii_ep_commentsUpdateInput = {
    ep_pst_mid?: IntFieldUpdateOperationsInput | number
    ep_pst_uid?: IntFieldUpdateOperationsInput | number
    ep_pst_related?: IntFieldUpdateOperationsInput | number
    ep_pst_dateline?: IntFieldUpdateOperationsInput | number
    ep_pst_content?: StringFieldUpdateOperationsInput | string
  }

  export type chii_ep_commentsUncheckedUpdateInput = {
    ep_pst_id?: IntFieldUpdateOperationsInput | number
    ep_pst_mid?: IntFieldUpdateOperationsInput | number
    ep_pst_uid?: IntFieldUpdateOperationsInput | number
    ep_pst_related?: IntFieldUpdateOperationsInput | number
    ep_pst_dateline?: IntFieldUpdateOperationsInput | number
    ep_pst_content?: StringFieldUpdateOperationsInput | string
  }

  export type chii_ep_commentsCreateManyInput = {
    ep_pst_id?: number
    ep_pst_mid: number
    ep_pst_uid: number
    ep_pst_related?: number
    ep_pst_dateline: number
    ep_pst_content: string
  }

  export type chii_ep_commentsUpdateManyMutationInput = {
    ep_pst_mid?: IntFieldUpdateOperationsInput | number
    ep_pst_uid?: IntFieldUpdateOperationsInput | number
    ep_pst_related?: IntFieldUpdateOperationsInput | number
    ep_pst_dateline?: IntFieldUpdateOperationsInput | number
    ep_pst_content?: StringFieldUpdateOperationsInput | string
  }

  export type chii_ep_commentsUncheckedUpdateManyInput = {
    ep_pst_id?: IntFieldUpdateOperationsInput | number
    ep_pst_mid?: IntFieldUpdateOperationsInput | number
    ep_pst_uid?: IntFieldUpdateOperationsInput | number
    ep_pst_related?: IntFieldUpdateOperationsInput | number
    ep_pst_dateline?: IntFieldUpdateOperationsInput | number
    ep_pst_content?: StringFieldUpdateOperationsInput | string
  }

  export type chii_ep_revisionsCreateInput = {
    rev_sid: number
    rev_eids: string
    rev_ep_infobox: string
    rev_creator: number
    rev_version?: boolean
    rev_dateline: number
    rev_edit_summary: string
  }

  export type chii_ep_revisionsUncheckedCreateInput = {
    ep_rev_id?: number
    rev_sid: number
    rev_eids: string
    rev_ep_infobox: string
    rev_creator: number
    rev_version?: boolean
    rev_dateline: number
    rev_edit_summary: string
  }

  export type chii_ep_revisionsUpdateInput = {
    rev_sid?: IntFieldUpdateOperationsInput | number
    rev_eids?: StringFieldUpdateOperationsInput | string
    rev_ep_infobox?: StringFieldUpdateOperationsInput | string
    rev_creator?: IntFieldUpdateOperationsInput | number
    rev_version?: BoolFieldUpdateOperationsInput | boolean
    rev_dateline?: IntFieldUpdateOperationsInput | number
    rev_edit_summary?: StringFieldUpdateOperationsInput | string
  }

  export type chii_ep_revisionsUncheckedUpdateInput = {
    ep_rev_id?: IntFieldUpdateOperationsInput | number
    rev_sid?: IntFieldUpdateOperationsInput | number
    rev_eids?: StringFieldUpdateOperationsInput | string
    rev_ep_infobox?: StringFieldUpdateOperationsInput | string
    rev_creator?: IntFieldUpdateOperationsInput | number
    rev_version?: BoolFieldUpdateOperationsInput | boolean
    rev_dateline?: IntFieldUpdateOperationsInput | number
    rev_edit_summary?: StringFieldUpdateOperationsInput | string
  }

  export type chii_ep_revisionsCreateManyInput = {
    ep_rev_id?: number
    rev_sid: number
    rev_eids: string
    rev_ep_infobox: string
    rev_creator: number
    rev_version?: boolean
    rev_dateline: number
    rev_edit_summary: string
  }

  export type chii_ep_revisionsUpdateManyMutationInput = {
    rev_sid?: IntFieldUpdateOperationsInput | number
    rev_eids?: StringFieldUpdateOperationsInput | string
    rev_ep_infobox?: StringFieldUpdateOperationsInput | string
    rev_creator?: IntFieldUpdateOperationsInput | number
    rev_version?: BoolFieldUpdateOperationsInput | boolean
    rev_dateline?: IntFieldUpdateOperationsInput | number
    rev_edit_summary?: StringFieldUpdateOperationsInput | string
  }

  export type chii_ep_revisionsUncheckedUpdateManyInput = {
    ep_rev_id?: IntFieldUpdateOperationsInput | number
    rev_sid?: IntFieldUpdateOperationsInput | number
    rev_eids?: StringFieldUpdateOperationsInput | string
    rev_ep_infobox?: StringFieldUpdateOperationsInput | string
    rev_creator?: IntFieldUpdateOperationsInput | number
    rev_version?: BoolFieldUpdateOperationsInput | boolean
    rev_dateline?: IntFieldUpdateOperationsInput | number
    rev_edit_summary?: StringFieldUpdateOperationsInput | string
  }

  export type chii_ep_statusCreateInput = {
    ep_stt_uid: number
    ep_stt_sid: number
    ep_stt_on_prg?: boolean
    ep_stt_status: string
    ep_stt_lasttouch: number
  }

  export type chii_ep_statusUncheckedCreateInput = {
    ep_stt_id?: number
    ep_stt_uid: number
    ep_stt_sid: number
    ep_stt_on_prg?: boolean
    ep_stt_status: string
    ep_stt_lasttouch: number
  }

  export type chii_ep_statusUpdateInput = {
    ep_stt_uid?: IntFieldUpdateOperationsInput | number
    ep_stt_sid?: IntFieldUpdateOperationsInput | number
    ep_stt_on_prg?: BoolFieldUpdateOperationsInput | boolean
    ep_stt_status?: StringFieldUpdateOperationsInput | string
    ep_stt_lasttouch?: IntFieldUpdateOperationsInput | number
  }

  export type chii_ep_statusUncheckedUpdateInput = {
    ep_stt_id?: IntFieldUpdateOperationsInput | number
    ep_stt_uid?: IntFieldUpdateOperationsInput | number
    ep_stt_sid?: IntFieldUpdateOperationsInput | number
    ep_stt_on_prg?: BoolFieldUpdateOperationsInput | boolean
    ep_stt_status?: StringFieldUpdateOperationsInput | string
    ep_stt_lasttouch?: IntFieldUpdateOperationsInput | number
  }

  export type chii_ep_statusCreateManyInput = {
    ep_stt_id?: number
    ep_stt_uid: number
    ep_stt_sid: number
    ep_stt_on_prg?: boolean
    ep_stt_status: string
    ep_stt_lasttouch: number
  }

  export type chii_ep_statusUpdateManyMutationInput = {
    ep_stt_uid?: IntFieldUpdateOperationsInput | number
    ep_stt_sid?: IntFieldUpdateOperationsInput | number
    ep_stt_on_prg?: BoolFieldUpdateOperationsInput | boolean
    ep_stt_status?: StringFieldUpdateOperationsInput | string
    ep_stt_lasttouch?: IntFieldUpdateOperationsInput | number
  }

  export type chii_ep_statusUncheckedUpdateManyInput = {
    ep_stt_id?: IntFieldUpdateOperationsInput | number
    ep_stt_uid?: IntFieldUpdateOperationsInput | number
    ep_stt_sid?: IntFieldUpdateOperationsInput | number
    ep_stt_on_prg?: BoolFieldUpdateOperationsInput | boolean
    ep_stt_status?: StringFieldUpdateOperationsInput | string
    ep_stt_lasttouch?: IntFieldUpdateOperationsInput | number
  }

  export type chii_episodesCreateInput = {
    ep_subject_id: number
    ep_sort?: number
    ep_type: number
    ep_disc?: number
    ep_name: string
    ep_name_cn: string
    ep_rate: number
    ep_duration: string
    ep_airdate: string
    ep_online: string
    ep_comment: number
    ep_resources: number
    ep_desc: string
    ep_dateline: number
    ep_lastpost: number
    ep_lock?: number
    ep_ban?: number
  }

  export type chii_episodesUncheckedCreateInput = {
    ep_id?: number
    ep_subject_id: number
    ep_sort?: number
    ep_type: number
    ep_disc?: number
    ep_name: string
    ep_name_cn: string
    ep_rate: number
    ep_duration: string
    ep_airdate: string
    ep_online: string
    ep_comment: number
    ep_resources: number
    ep_desc: string
    ep_dateline: number
    ep_lastpost: number
    ep_lock?: number
    ep_ban?: number
  }

  export type chii_episodesUpdateInput = {
    ep_subject_id?: IntFieldUpdateOperationsInput | number
    ep_sort?: FloatFieldUpdateOperationsInput | number
    ep_type?: IntFieldUpdateOperationsInput | number
    ep_disc?: IntFieldUpdateOperationsInput | number
    ep_name?: StringFieldUpdateOperationsInput | string
    ep_name_cn?: StringFieldUpdateOperationsInput | string
    ep_rate?: IntFieldUpdateOperationsInput | number
    ep_duration?: StringFieldUpdateOperationsInput | string
    ep_airdate?: StringFieldUpdateOperationsInput | string
    ep_online?: StringFieldUpdateOperationsInput | string
    ep_comment?: IntFieldUpdateOperationsInput | number
    ep_resources?: IntFieldUpdateOperationsInput | number
    ep_desc?: StringFieldUpdateOperationsInput | string
    ep_dateline?: IntFieldUpdateOperationsInput | number
    ep_lastpost?: IntFieldUpdateOperationsInput | number
    ep_lock?: IntFieldUpdateOperationsInput | number
    ep_ban?: IntFieldUpdateOperationsInput | number
  }

  export type chii_episodesUncheckedUpdateInput = {
    ep_id?: IntFieldUpdateOperationsInput | number
    ep_subject_id?: IntFieldUpdateOperationsInput | number
    ep_sort?: FloatFieldUpdateOperationsInput | number
    ep_type?: IntFieldUpdateOperationsInput | number
    ep_disc?: IntFieldUpdateOperationsInput | number
    ep_name?: StringFieldUpdateOperationsInput | string
    ep_name_cn?: StringFieldUpdateOperationsInput | string
    ep_rate?: IntFieldUpdateOperationsInput | number
    ep_duration?: StringFieldUpdateOperationsInput | string
    ep_airdate?: StringFieldUpdateOperationsInput | string
    ep_online?: StringFieldUpdateOperationsInput | string
    ep_comment?: IntFieldUpdateOperationsInput | number
    ep_resources?: IntFieldUpdateOperationsInput | number
    ep_desc?: StringFieldUpdateOperationsInput | string
    ep_dateline?: IntFieldUpdateOperationsInput | number
    ep_lastpost?: IntFieldUpdateOperationsInput | number
    ep_lock?: IntFieldUpdateOperationsInput | number
    ep_ban?: IntFieldUpdateOperationsInput | number
  }

  export type chii_episodesCreateManyInput = {
    ep_id?: number
    ep_subject_id: number
    ep_sort?: number
    ep_type: number
    ep_disc?: number
    ep_name: string
    ep_name_cn: string
    ep_rate: number
    ep_duration: string
    ep_airdate: string
    ep_online: string
    ep_comment: number
    ep_resources: number
    ep_desc: string
    ep_dateline: number
    ep_lastpost: number
    ep_lock?: number
    ep_ban?: number
  }

  export type chii_episodesUpdateManyMutationInput = {
    ep_subject_id?: IntFieldUpdateOperationsInput | number
    ep_sort?: FloatFieldUpdateOperationsInput | number
    ep_type?: IntFieldUpdateOperationsInput | number
    ep_disc?: IntFieldUpdateOperationsInput | number
    ep_name?: StringFieldUpdateOperationsInput | string
    ep_name_cn?: StringFieldUpdateOperationsInput | string
    ep_rate?: IntFieldUpdateOperationsInput | number
    ep_duration?: StringFieldUpdateOperationsInput | string
    ep_airdate?: StringFieldUpdateOperationsInput | string
    ep_online?: StringFieldUpdateOperationsInput | string
    ep_comment?: IntFieldUpdateOperationsInput | number
    ep_resources?: IntFieldUpdateOperationsInput | number
    ep_desc?: StringFieldUpdateOperationsInput | string
    ep_dateline?: IntFieldUpdateOperationsInput | number
    ep_lastpost?: IntFieldUpdateOperationsInput | number
    ep_lock?: IntFieldUpdateOperationsInput | number
    ep_ban?: IntFieldUpdateOperationsInput | number
  }

  export type chii_episodesUncheckedUpdateManyInput = {
    ep_id?: IntFieldUpdateOperationsInput | number
    ep_subject_id?: IntFieldUpdateOperationsInput | number
    ep_sort?: FloatFieldUpdateOperationsInput | number
    ep_type?: IntFieldUpdateOperationsInput | number
    ep_disc?: IntFieldUpdateOperationsInput | number
    ep_name?: StringFieldUpdateOperationsInput | string
    ep_name_cn?: StringFieldUpdateOperationsInput | string
    ep_rate?: IntFieldUpdateOperationsInput | number
    ep_duration?: StringFieldUpdateOperationsInput | string
    ep_airdate?: StringFieldUpdateOperationsInput | string
    ep_online?: StringFieldUpdateOperationsInput | string
    ep_comment?: IntFieldUpdateOperationsInput | number
    ep_resources?: IntFieldUpdateOperationsInput | number
    ep_desc?: StringFieldUpdateOperationsInput | string
    ep_dateline?: IntFieldUpdateOperationsInput | number
    ep_lastpost?: IntFieldUpdateOperationsInput | number
    ep_lock?: IntFieldUpdateOperationsInput | number
    ep_ban?: IntFieldUpdateOperationsInput | number
  }

  export type chii_group_membersCreateInput = {
    gmb_uid?: number
    gmb_gid?: number
    gmb_moderator?: boolean
    gmb_dateline?: number
  }

  export type chii_group_membersUncheckedCreateInput = {
    gmb_uid?: number
    gmb_gid?: number
    gmb_moderator?: boolean
    gmb_dateline?: number
  }

  export type chii_group_membersUpdateInput = {
    gmb_uid?: IntFieldUpdateOperationsInput | number
    gmb_gid?: IntFieldUpdateOperationsInput | number
    gmb_moderator?: BoolFieldUpdateOperationsInput | boolean
    gmb_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_group_membersUncheckedUpdateInput = {
    gmb_uid?: IntFieldUpdateOperationsInput | number
    gmb_gid?: IntFieldUpdateOperationsInput | number
    gmb_moderator?: BoolFieldUpdateOperationsInput | boolean
    gmb_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_group_membersCreateManyInput = {
    gmb_uid?: number
    gmb_gid?: number
    gmb_moderator?: boolean
    gmb_dateline?: number
  }

  export type chii_group_membersUpdateManyMutationInput = {
    gmb_uid?: IntFieldUpdateOperationsInput | number
    gmb_gid?: IntFieldUpdateOperationsInput | number
    gmb_moderator?: BoolFieldUpdateOperationsInput | boolean
    gmb_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_group_membersUncheckedUpdateManyInput = {
    gmb_uid?: IntFieldUpdateOperationsInput | number
    gmb_gid?: IntFieldUpdateOperationsInput | number
    gmb_moderator?: BoolFieldUpdateOperationsInput | boolean
    gmb_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_group_postsCreateInput = {
    grp_pst_mid: number
    grp_pst_uid: number
    grp_pst_related?: number
    grp_pst_content: string
    grp_pst_state: boolean
    grp_pst_dateline?: number
  }

  export type chii_group_postsUncheckedCreateInput = {
    grp_pst_id?: number
    grp_pst_mid: number
    grp_pst_uid: number
    grp_pst_related?: number
    grp_pst_content: string
    grp_pst_state: boolean
    grp_pst_dateline?: number
  }

  export type chii_group_postsUpdateInput = {
    grp_pst_mid?: IntFieldUpdateOperationsInput | number
    grp_pst_uid?: IntFieldUpdateOperationsInput | number
    grp_pst_related?: IntFieldUpdateOperationsInput | number
    grp_pst_content?: StringFieldUpdateOperationsInput | string
    grp_pst_state?: BoolFieldUpdateOperationsInput | boolean
    grp_pst_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_group_postsUncheckedUpdateInput = {
    grp_pst_id?: IntFieldUpdateOperationsInput | number
    grp_pst_mid?: IntFieldUpdateOperationsInput | number
    grp_pst_uid?: IntFieldUpdateOperationsInput | number
    grp_pst_related?: IntFieldUpdateOperationsInput | number
    grp_pst_content?: StringFieldUpdateOperationsInput | string
    grp_pst_state?: BoolFieldUpdateOperationsInput | boolean
    grp_pst_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_group_postsCreateManyInput = {
    grp_pst_id?: number
    grp_pst_mid: number
    grp_pst_uid: number
    grp_pst_related?: number
    grp_pst_content: string
    grp_pst_state: boolean
    grp_pst_dateline?: number
  }

  export type chii_group_postsUpdateManyMutationInput = {
    grp_pst_mid?: IntFieldUpdateOperationsInput | number
    grp_pst_uid?: IntFieldUpdateOperationsInput | number
    grp_pst_related?: IntFieldUpdateOperationsInput | number
    grp_pst_content?: StringFieldUpdateOperationsInput | string
    grp_pst_state?: BoolFieldUpdateOperationsInput | boolean
    grp_pst_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_group_postsUncheckedUpdateManyInput = {
    grp_pst_id?: IntFieldUpdateOperationsInput | number
    grp_pst_mid?: IntFieldUpdateOperationsInput | number
    grp_pst_uid?: IntFieldUpdateOperationsInput | number
    grp_pst_related?: IntFieldUpdateOperationsInput | number
    grp_pst_content?: StringFieldUpdateOperationsInput | string
    grp_pst_state?: BoolFieldUpdateOperationsInput | boolean
    grp_pst_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_group_topicsCreateInput = {
    grp_tpc_gid: number
    grp_tpc_uid: number
    grp_tpc_title: string
    grp_tpc_dateline?: number
    grp_tpc_lastpost?: number
    grp_tpc_replies?: number
    grp_tpc_state: boolean
    grp_tpc_display?: boolean
  }

  export type chii_group_topicsUncheckedCreateInput = {
    grp_tpc_id?: number
    grp_tpc_gid: number
    grp_tpc_uid: number
    grp_tpc_title: string
    grp_tpc_dateline?: number
    grp_tpc_lastpost?: number
    grp_tpc_replies?: number
    grp_tpc_state: boolean
    grp_tpc_display?: boolean
  }

  export type chii_group_topicsUpdateInput = {
    grp_tpc_gid?: IntFieldUpdateOperationsInput | number
    grp_tpc_uid?: IntFieldUpdateOperationsInput | number
    grp_tpc_title?: StringFieldUpdateOperationsInput | string
    grp_tpc_dateline?: IntFieldUpdateOperationsInput | number
    grp_tpc_lastpost?: IntFieldUpdateOperationsInput | number
    grp_tpc_replies?: IntFieldUpdateOperationsInput | number
    grp_tpc_state?: BoolFieldUpdateOperationsInput | boolean
    grp_tpc_display?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_group_topicsUncheckedUpdateInput = {
    grp_tpc_id?: IntFieldUpdateOperationsInput | number
    grp_tpc_gid?: IntFieldUpdateOperationsInput | number
    grp_tpc_uid?: IntFieldUpdateOperationsInput | number
    grp_tpc_title?: StringFieldUpdateOperationsInput | string
    grp_tpc_dateline?: IntFieldUpdateOperationsInput | number
    grp_tpc_lastpost?: IntFieldUpdateOperationsInput | number
    grp_tpc_replies?: IntFieldUpdateOperationsInput | number
    grp_tpc_state?: BoolFieldUpdateOperationsInput | boolean
    grp_tpc_display?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_group_topicsCreateManyInput = {
    grp_tpc_id?: number
    grp_tpc_gid: number
    grp_tpc_uid: number
    grp_tpc_title: string
    grp_tpc_dateline?: number
    grp_tpc_lastpost?: number
    grp_tpc_replies?: number
    grp_tpc_state: boolean
    grp_tpc_display?: boolean
  }

  export type chii_group_topicsUpdateManyMutationInput = {
    grp_tpc_gid?: IntFieldUpdateOperationsInput | number
    grp_tpc_uid?: IntFieldUpdateOperationsInput | number
    grp_tpc_title?: StringFieldUpdateOperationsInput | string
    grp_tpc_dateline?: IntFieldUpdateOperationsInput | number
    grp_tpc_lastpost?: IntFieldUpdateOperationsInput | number
    grp_tpc_replies?: IntFieldUpdateOperationsInput | number
    grp_tpc_state?: BoolFieldUpdateOperationsInput | boolean
    grp_tpc_display?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_group_topicsUncheckedUpdateManyInput = {
    grp_tpc_id?: IntFieldUpdateOperationsInput | number
    grp_tpc_gid?: IntFieldUpdateOperationsInput | number
    grp_tpc_uid?: IntFieldUpdateOperationsInput | number
    grp_tpc_title?: StringFieldUpdateOperationsInput | string
    grp_tpc_dateline?: IntFieldUpdateOperationsInput | number
    grp_tpc_lastpost?: IntFieldUpdateOperationsInput | number
    grp_tpc_replies?: IntFieldUpdateOperationsInput | number
    grp_tpc_state?: BoolFieldUpdateOperationsInput | boolean
    grp_tpc_display?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_groupsCreateInput = {
    grp_cat?: number
    grp_name: string
    grp_title: string
    grp_icon: string
    grp_creator?: number
    grp_topics?: number
    grp_posts?: number
    grp_members?: number
    grp_desc: string
    grp_lastpost: number
    grp_builddate: number
    grp_accessible?: boolean
    grp_nsfw: boolean
  }

  export type chii_groupsUncheckedCreateInput = {
    grp_id?: number
    grp_cat?: number
    grp_name: string
    grp_title: string
    grp_icon: string
    grp_creator?: number
    grp_topics?: number
    grp_posts?: number
    grp_members?: number
    grp_desc: string
    grp_lastpost: number
    grp_builddate: number
    grp_accessible?: boolean
    grp_nsfw: boolean
  }

  export type chii_groupsUpdateInput = {
    grp_cat?: IntFieldUpdateOperationsInput | number
    grp_name?: StringFieldUpdateOperationsInput | string
    grp_title?: StringFieldUpdateOperationsInput | string
    grp_icon?: StringFieldUpdateOperationsInput | string
    grp_creator?: IntFieldUpdateOperationsInput | number
    grp_topics?: IntFieldUpdateOperationsInput | number
    grp_posts?: IntFieldUpdateOperationsInput | number
    grp_members?: IntFieldUpdateOperationsInput | number
    grp_desc?: StringFieldUpdateOperationsInput | string
    grp_lastpost?: IntFieldUpdateOperationsInput | number
    grp_builddate?: IntFieldUpdateOperationsInput | number
    grp_accessible?: BoolFieldUpdateOperationsInput | boolean
    grp_nsfw?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_groupsUncheckedUpdateInput = {
    grp_id?: IntFieldUpdateOperationsInput | number
    grp_cat?: IntFieldUpdateOperationsInput | number
    grp_name?: StringFieldUpdateOperationsInput | string
    grp_title?: StringFieldUpdateOperationsInput | string
    grp_icon?: StringFieldUpdateOperationsInput | string
    grp_creator?: IntFieldUpdateOperationsInput | number
    grp_topics?: IntFieldUpdateOperationsInput | number
    grp_posts?: IntFieldUpdateOperationsInput | number
    grp_members?: IntFieldUpdateOperationsInput | number
    grp_desc?: StringFieldUpdateOperationsInput | string
    grp_lastpost?: IntFieldUpdateOperationsInput | number
    grp_builddate?: IntFieldUpdateOperationsInput | number
    grp_accessible?: BoolFieldUpdateOperationsInput | boolean
    grp_nsfw?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_groupsCreateManyInput = {
    grp_id?: number
    grp_cat?: number
    grp_name: string
    grp_title: string
    grp_icon: string
    grp_creator?: number
    grp_topics?: number
    grp_posts?: number
    grp_members?: number
    grp_desc: string
    grp_lastpost: number
    grp_builddate: number
    grp_accessible?: boolean
    grp_nsfw: boolean
  }

  export type chii_groupsUpdateManyMutationInput = {
    grp_cat?: IntFieldUpdateOperationsInput | number
    grp_name?: StringFieldUpdateOperationsInput | string
    grp_title?: StringFieldUpdateOperationsInput | string
    grp_icon?: StringFieldUpdateOperationsInput | string
    grp_creator?: IntFieldUpdateOperationsInput | number
    grp_topics?: IntFieldUpdateOperationsInput | number
    grp_posts?: IntFieldUpdateOperationsInput | number
    grp_members?: IntFieldUpdateOperationsInput | number
    grp_desc?: StringFieldUpdateOperationsInput | string
    grp_lastpost?: IntFieldUpdateOperationsInput | number
    grp_builddate?: IntFieldUpdateOperationsInput | number
    grp_accessible?: BoolFieldUpdateOperationsInput | boolean
    grp_nsfw?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_groupsUncheckedUpdateManyInput = {
    grp_id?: IntFieldUpdateOperationsInput | number
    grp_cat?: IntFieldUpdateOperationsInput | number
    grp_name?: StringFieldUpdateOperationsInput | string
    grp_title?: StringFieldUpdateOperationsInput | string
    grp_icon?: StringFieldUpdateOperationsInput | string
    grp_creator?: IntFieldUpdateOperationsInput | number
    grp_topics?: IntFieldUpdateOperationsInput | number
    grp_posts?: IntFieldUpdateOperationsInput | number
    grp_members?: IntFieldUpdateOperationsInput | number
    grp_desc?: StringFieldUpdateOperationsInput | string
    grp_lastpost?: IntFieldUpdateOperationsInput | number
    grp_builddate?: IntFieldUpdateOperationsInput | number
    grp_accessible?: BoolFieldUpdateOperationsInput | boolean
    grp_nsfw?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_indexCreateInput = {
    idx_id?: number
    idx_type?: number
    idx_title: string
    idx_desc: string
    idx_replies?: number
    idx_subject_total?: number
    idx_collects?: number
    idx_stats: string
    idx_dateline: number
    idx_lasttouch: number
    idx_uid: number
    idx_ban?: boolean
  }

  export type chii_indexUncheckedCreateInput = {
    idx_id?: number
    idx_type?: number
    idx_title: string
    idx_desc: string
    idx_replies?: number
    idx_subject_total?: number
    idx_collects?: number
    idx_stats: string
    idx_dateline: number
    idx_lasttouch: number
    idx_uid: number
    idx_ban?: boolean
  }

  export type chii_indexUpdateInput = {
    idx_type?: IntFieldUpdateOperationsInput | number
    idx_title?: StringFieldUpdateOperationsInput | string
    idx_desc?: StringFieldUpdateOperationsInput | string
    idx_replies?: IntFieldUpdateOperationsInput | number
    idx_subject_total?: IntFieldUpdateOperationsInput | number
    idx_collects?: IntFieldUpdateOperationsInput | number
    idx_stats?: StringFieldUpdateOperationsInput | string
    idx_dateline?: IntFieldUpdateOperationsInput | number
    idx_lasttouch?: IntFieldUpdateOperationsInput | number
    idx_uid?: IntFieldUpdateOperationsInput | number
    idx_ban?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_indexUncheckedUpdateInput = {
    idx_id?: IntFieldUpdateOperationsInput | number
    idx_type?: IntFieldUpdateOperationsInput | number
    idx_title?: StringFieldUpdateOperationsInput | string
    idx_desc?: StringFieldUpdateOperationsInput | string
    idx_replies?: IntFieldUpdateOperationsInput | number
    idx_subject_total?: IntFieldUpdateOperationsInput | number
    idx_collects?: IntFieldUpdateOperationsInput | number
    idx_stats?: StringFieldUpdateOperationsInput | string
    idx_dateline?: IntFieldUpdateOperationsInput | number
    idx_lasttouch?: IntFieldUpdateOperationsInput | number
    idx_uid?: IntFieldUpdateOperationsInput | number
    idx_ban?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_indexCreateManyInput = {
    idx_id?: number
    idx_type?: number
    idx_title: string
    idx_desc: string
    idx_replies?: number
    idx_subject_total?: number
    idx_collects?: number
    idx_stats: string
    idx_dateline: number
    idx_lasttouch: number
    idx_uid: number
    idx_ban?: boolean
  }

  export type chii_indexUpdateManyMutationInput = {
    idx_type?: IntFieldUpdateOperationsInput | number
    idx_title?: StringFieldUpdateOperationsInput | string
    idx_desc?: StringFieldUpdateOperationsInput | string
    idx_replies?: IntFieldUpdateOperationsInput | number
    idx_subject_total?: IntFieldUpdateOperationsInput | number
    idx_collects?: IntFieldUpdateOperationsInput | number
    idx_stats?: StringFieldUpdateOperationsInput | string
    idx_dateline?: IntFieldUpdateOperationsInput | number
    idx_lasttouch?: IntFieldUpdateOperationsInput | number
    idx_uid?: IntFieldUpdateOperationsInput | number
    idx_ban?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_indexUncheckedUpdateManyInput = {
    idx_id?: IntFieldUpdateOperationsInput | number
    idx_type?: IntFieldUpdateOperationsInput | number
    idx_title?: StringFieldUpdateOperationsInput | string
    idx_desc?: StringFieldUpdateOperationsInput | string
    idx_replies?: IntFieldUpdateOperationsInput | number
    idx_subject_total?: IntFieldUpdateOperationsInput | number
    idx_collects?: IntFieldUpdateOperationsInput | number
    idx_stats?: StringFieldUpdateOperationsInput | string
    idx_dateline?: IntFieldUpdateOperationsInput | number
    idx_lasttouch?: IntFieldUpdateOperationsInput | number
    idx_uid?: IntFieldUpdateOperationsInput | number
    idx_ban?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_index_collectsCreateInput = {
    idx_clt_mid: number
    idx_clt_uid: number
    idx_clt_dateline: number
  }

  export type chii_index_collectsUncheckedCreateInput = {
    idx_clt_id?: number
    idx_clt_mid: number
    idx_clt_uid: number
    idx_clt_dateline: number
  }

  export type chii_index_collectsUpdateInput = {
    idx_clt_mid?: IntFieldUpdateOperationsInput | number
    idx_clt_uid?: IntFieldUpdateOperationsInput | number
    idx_clt_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_index_collectsUncheckedUpdateInput = {
    idx_clt_id?: IntFieldUpdateOperationsInput | number
    idx_clt_mid?: IntFieldUpdateOperationsInput | number
    idx_clt_uid?: IntFieldUpdateOperationsInput | number
    idx_clt_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_index_collectsCreateManyInput = {
    idx_clt_id?: number
    idx_clt_mid: number
    idx_clt_uid: number
    idx_clt_dateline: number
  }

  export type chii_index_collectsUpdateManyMutationInput = {
    idx_clt_mid?: IntFieldUpdateOperationsInput | number
    idx_clt_uid?: IntFieldUpdateOperationsInput | number
    idx_clt_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_index_collectsUncheckedUpdateManyInput = {
    idx_clt_id?: IntFieldUpdateOperationsInput | number
    idx_clt_mid?: IntFieldUpdateOperationsInput | number
    idx_clt_uid?: IntFieldUpdateOperationsInput | number
    idx_clt_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_index_commentsCreateInput = {
    idx_pst_mid: number
    idx_pst_uid: number
    idx_pst_related?: number
    idx_pst_dateline: number
    idx_pst_content: string
  }

  export type chii_index_commentsUncheckedCreateInput = {
    idx_pst_id?: number
    idx_pst_mid: number
    idx_pst_uid: number
    idx_pst_related?: number
    idx_pst_dateline: number
    idx_pst_content: string
  }

  export type chii_index_commentsUpdateInput = {
    idx_pst_mid?: IntFieldUpdateOperationsInput | number
    idx_pst_uid?: IntFieldUpdateOperationsInput | number
    idx_pst_related?: IntFieldUpdateOperationsInput | number
    idx_pst_dateline?: IntFieldUpdateOperationsInput | number
    idx_pst_content?: StringFieldUpdateOperationsInput | string
  }

  export type chii_index_commentsUncheckedUpdateInput = {
    idx_pst_id?: IntFieldUpdateOperationsInput | number
    idx_pst_mid?: IntFieldUpdateOperationsInput | number
    idx_pst_uid?: IntFieldUpdateOperationsInput | number
    idx_pst_related?: IntFieldUpdateOperationsInput | number
    idx_pst_dateline?: IntFieldUpdateOperationsInput | number
    idx_pst_content?: StringFieldUpdateOperationsInput | string
  }

  export type chii_index_commentsCreateManyInput = {
    idx_pst_id?: number
    idx_pst_mid: number
    idx_pst_uid: number
    idx_pst_related?: number
    idx_pst_dateline: number
    idx_pst_content: string
  }

  export type chii_index_commentsUpdateManyMutationInput = {
    idx_pst_mid?: IntFieldUpdateOperationsInput | number
    idx_pst_uid?: IntFieldUpdateOperationsInput | number
    idx_pst_related?: IntFieldUpdateOperationsInput | number
    idx_pst_dateline?: IntFieldUpdateOperationsInput | number
    idx_pst_content?: StringFieldUpdateOperationsInput | string
  }

  export type chii_index_commentsUncheckedUpdateManyInput = {
    idx_pst_id?: IntFieldUpdateOperationsInput | number
    idx_pst_mid?: IntFieldUpdateOperationsInput | number
    idx_pst_uid?: IntFieldUpdateOperationsInput | number
    idx_pst_related?: IntFieldUpdateOperationsInput | number
    idx_pst_dateline?: IntFieldUpdateOperationsInput | number
    idx_pst_content?: StringFieldUpdateOperationsInput | string
  }

  export type chii_index_relatedCreateInput = {
    idx_rlt_cat: number
    idx_rlt_rid: number
    idx_rlt_type: number
    idx_rlt_sid: number
    idx_rlt_order?: number
    idx_rlt_comment: string
    idx_rlt_dateline: number
  }

  export type chii_index_relatedUncheckedCreateInput = {
    idx_rlt_id?: number
    idx_rlt_cat: number
    idx_rlt_rid: number
    idx_rlt_type: number
    idx_rlt_sid: number
    idx_rlt_order?: number
    idx_rlt_comment: string
    idx_rlt_dateline: number
  }

  export type chii_index_relatedUpdateInput = {
    idx_rlt_cat?: IntFieldUpdateOperationsInput | number
    idx_rlt_rid?: IntFieldUpdateOperationsInput | number
    idx_rlt_type?: IntFieldUpdateOperationsInput | number
    idx_rlt_sid?: IntFieldUpdateOperationsInput | number
    idx_rlt_order?: IntFieldUpdateOperationsInput | number
    idx_rlt_comment?: StringFieldUpdateOperationsInput | string
    idx_rlt_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_index_relatedUncheckedUpdateInput = {
    idx_rlt_id?: IntFieldUpdateOperationsInput | number
    idx_rlt_cat?: IntFieldUpdateOperationsInput | number
    idx_rlt_rid?: IntFieldUpdateOperationsInput | number
    idx_rlt_type?: IntFieldUpdateOperationsInput | number
    idx_rlt_sid?: IntFieldUpdateOperationsInput | number
    idx_rlt_order?: IntFieldUpdateOperationsInput | number
    idx_rlt_comment?: StringFieldUpdateOperationsInput | string
    idx_rlt_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_index_relatedCreateManyInput = {
    idx_rlt_id?: number
    idx_rlt_cat: number
    idx_rlt_rid: number
    idx_rlt_type: number
    idx_rlt_sid: number
    idx_rlt_order?: number
    idx_rlt_comment: string
    idx_rlt_dateline: number
  }

  export type chii_index_relatedUpdateManyMutationInput = {
    idx_rlt_cat?: IntFieldUpdateOperationsInput | number
    idx_rlt_rid?: IntFieldUpdateOperationsInput | number
    idx_rlt_type?: IntFieldUpdateOperationsInput | number
    idx_rlt_sid?: IntFieldUpdateOperationsInput | number
    idx_rlt_order?: IntFieldUpdateOperationsInput | number
    idx_rlt_comment?: StringFieldUpdateOperationsInput | string
    idx_rlt_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_index_relatedUncheckedUpdateManyInput = {
    idx_rlt_id?: IntFieldUpdateOperationsInput | number
    idx_rlt_cat?: IntFieldUpdateOperationsInput | number
    idx_rlt_rid?: IntFieldUpdateOperationsInput | number
    idx_rlt_type?: IntFieldUpdateOperationsInput | number
    idx_rlt_sid?: IntFieldUpdateOperationsInput | number
    idx_rlt_order?: IntFieldUpdateOperationsInput | number
    idx_rlt_comment?: StringFieldUpdateOperationsInput | string
    idx_rlt_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_memberfieldsCreateInput = {
    uid?: number
    site?: string
    location?: string
    bio: string
    privacy: string
    blocklist: string
  }

  export type chii_memberfieldsUncheckedCreateInput = {
    uid?: number
    site?: string
    location?: string
    bio: string
    privacy: string
    blocklist: string
  }

  export type chii_memberfieldsUpdateInput = {
    uid?: IntFieldUpdateOperationsInput | number
    site?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    privacy?: StringFieldUpdateOperationsInput | string
    blocklist?: StringFieldUpdateOperationsInput | string
  }

  export type chii_memberfieldsUncheckedUpdateInput = {
    uid?: IntFieldUpdateOperationsInput | number
    site?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    privacy?: StringFieldUpdateOperationsInput | string
    blocklist?: StringFieldUpdateOperationsInput | string
  }

  export type chii_memberfieldsCreateManyInput = {
    uid?: number
    site?: string
    location?: string
    bio: string
    privacy: string
    blocklist: string
  }

  export type chii_memberfieldsUpdateManyMutationInput = {
    uid?: IntFieldUpdateOperationsInput | number
    site?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    privacy?: StringFieldUpdateOperationsInput | string
    blocklist?: StringFieldUpdateOperationsInput | string
  }

  export type chii_memberfieldsUncheckedUpdateManyInput = {
    uid?: IntFieldUpdateOperationsInput | number
    site?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    privacy?: StringFieldUpdateOperationsInput | string
    blocklist?: StringFieldUpdateOperationsInput | string
  }

  export type chii_membersCreateInput = {
    username?: string
    nickname: string
    avatar: string
    groupid?: number
    regdate?: number
    lastvisit?: number
    lastactivity?: number
    lastpost?: number
    dateformat?: string
    timeformat?: boolean
    timeoffset?: string
    newpm?: boolean
    new_notify?: number
    sign: string
    password_crypt: string
    email?: string
  }

  export type chii_membersUncheckedCreateInput = {
    uid?: number
    username?: string
    nickname: string
    avatar: string
    groupid?: number
    regdate?: number
    lastvisit?: number
    lastactivity?: number
    lastpost?: number
    dateformat?: string
    timeformat?: boolean
    timeoffset?: string
    newpm?: boolean
    new_notify?: number
    sign: string
    password_crypt: string
    email?: string
  }

  export type chii_membersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    groupid?: IntFieldUpdateOperationsInput | number
    regdate?: IntFieldUpdateOperationsInput | number
    lastvisit?: IntFieldUpdateOperationsInput | number
    lastactivity?: IntFieldUpdateOperationsInput | number
    lastpost?: IntFieldUpdateOperationsInput | number
    dateformat?: StringFieldUpdateOperationsInput | string
    timeformat?: BoolFieldUpdateOperationsInput | boolean
    timeoffset?: StringFieldUpdateOperationsInput | string
    newpm?: BoolFieldUpdateOperationsInput | boolean
    new_notify?: IntFieldUpdateOperationsInput | number
    sign?: StringFieldUpdateOperationsInput | string
    password_crypt?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type chii_membersUncheckedUpdateInput = {
    uid?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    groupid?: IntFieldUpdateOperationsInput | number
    regdate?: IntFieldUpdateOperationsInput | number
    lastvisit?: IntFieldUpdateOperationsInput | number
    lastactivity?: IntFieldUpdateOperationsInput | number
    lastpost?: IntFieldUpdateOperationsInput | number
    dateformat?: StringFieldUpdateOperationsInput | string
    timeformat?: BoolFieldUpdateOperationsInput | boolean
    timeoffset?: StringFieldUpdateOperationsInput | string
    newpm?: BoolFieldUpdateOperationsInput | boolean
    new_notify?: IntFieldUpdateOperationsInput | number
    sign?: StringFieldUpdateOperationsInput | string
    password_crypt?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type chii_membersCreateManyInput = {
    uid?: number
    username?: string
    nickname: string
    avatar: string
    groupid?: number
    regdate?: number
    lastvisit?: number
    lastactivity?: number
    lastpost?: number
    dateformat?: string
    timeformat?: boolean
    timeoffset?: string
    newpm?: boolean
    new_notify?: number
    sign: string
    password_crypt: string
    email?: string
  }

  export type chii_membersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    groupid?: IntFieldUpdateOperationsInput | number
    regdate?: IntFieldUpdateOperationsInput | number
    lastvisit?: IntFieldUpdateOperationsInput | number
    lastactivity?: IntFieldUpdateOperationsInput | number
    lastpost?: IntFieldUpdateOperationsInput | number
    dateformat?: StringFieldUpdateOperationsInput | string
    timeformat?: BoolFieldUpdateOperationsInput | boolean
    timeoffset?: StringFieldUpdateOperationsInput | string
    newpm?: BoolFieldUpdateOperationsInput | boolean
    new_notify?: IntFieldUpdateOperationsInput | number
    sign?: StringFieldUpdateOperationsInput | string
    password_crypt?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type chii_membersUncheckedUpdateManyInput = {
    uid?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    groupid?: IntFieldUpdateOperationsInput | number
    regdate?: IntFieldUpdateOperationsInput | number
    lastvisit?: IntFieldUpdateOperationsInput | number
    lastactivity?: IntFieldUpdateOperationsInput | number
    lastpost?: IntFieldUpdateOperationsInput | number
    dateformat?: StringFieldUpdateOperationsInput | string
    timeformat?: BoolFieldUpdateOperationsInput | boolean
    timeoffset?: StringFieldUpdateOperationsInput | string
    newpm?: BoolFieldUpdateOperationsInput | boolean
    new_notify?: IntFieldUpdateOperationsInput | number
    sign?: StringFieldUpdateOperationsInput | string
    password_crypt?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type chii_oauth_access_tokensCreateInput = {
    type?: boolean
    access_token: string
    client_id: string
    user_id?: string | null
    expires?: Date | string
    scope?: string | null
    info: string
  }

  export type chii_oauth_access_tokensUncheckedCreateInput = {
    id?: number
    type?: boolean
    access_token: string
    client_id: string
    user_id?: string | null
    expires?: Date | string
    scope?: string | null
    info: string
  }

  export type chii_oauth_access_tokensUpdateInput = {
    type?: BoolFieldUpdateOperationsInput | boolean
    access_token?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    info?: StringFieldUpdateOperationsInput | string
  }

  export type chii_oauth_access_tokensUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: BoolFieldUpdateOperationsInput | boolean
    access_token?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    info?: StringFieldUpdateOperationsInput | string
  }

  export type chii_oauth_access_tokensCreateManyInput = {
    id?: number
    type?: boolean
    access_token: string
    client_id: string
    user_id?: string | null
    expires?: Date | string
    scope?: string | null
    info: string
  }

  export type chii_oauth_access_tokensUpdateManyMutationInput = {
    type?: BoolFieldUpdateOperationsInput | boolean
    access_token?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    info?: StringFieldUpdateOperationsInput | string
  }

  export type chii_oauth_access_tokensUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: BoolFieldUpdateOperationsInput | boolean
    access_token?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    info?: StringFieldUpdateOperationsInput | string
  }

  export type chii_oauth_clientsCreateInput = {
    app_id: number
    client_id: string
    client_secret?: string | null
    redirect_uri?: string | null
    grant_types?: string | null
    scope?: string | null
    user_id?: string | null
  }

  export type chii_oauth_clientsUncheckedCreateInput = {
    app_id: number
    client_id: string
    client_secret?: string | null
    redirect_uri?: string | null
    grant_types?: string | null
    scope?: string | null
    user_id?: string | null
  }

  export type chii_oauth_clientsUpdateInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    client_id?: StringFieldUpdateOperationsInput | string
    client_secret?: NullableStringFieldUpdateOperationsInput | string | null
    redirect_uri?: NullableStringFieldUpdateOperationsInput | string | null
    grant_types?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type chii_oauth_clientsUncheckedUpdateInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    client_id?: StringFieldUpdateOperationsInput | string
    client_secret?: NullableStringFieldUpdateOperationsInput | string | null
    redirect_uri?: NullableStringFieldUpdateOperationsInput | string | null
    grant_types?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type chii_oauth_clientsCreateManyInput = {
    app_id: number
    client_id: string
    client_secret?: string | null
    redirect_uri?: string | null
    grant_types?: string | null
    scope?: string | null
    user_id?: string | null
  }

  export type chii_oauth_clientsUpdateManyMutationInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    client_id?: StringFieldUpdateOperationsInput | string
    client_secret?: NullableStringFieldUpdateOperationsInput | string | null
    redirect_uri?: NullableStringFieldUpdateOperationsInput | string | null
    grant_types?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type chii_oauth_clientsUncheckedUpdateManyInput = {
    app_id?: IntFieldUpdateOperationsInput | number
    client_id?: StringFieldUpdateOperationsInput | string
    client_secret?: NullableStringFieldUpdateOperationsInput | string | null
    redirect_uri?: NullableStringFieldUpdateOperationsInput | string | null
    grant_types?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type chii_os_web_sessionsCreateInput = {
    key: string
    user_id: number
    value: Buffer
    created_at: bigint | number
    expired_at: bigint | number
  }

  export type chii_os_web_sessionsUncheckedCreateInput = {
    key: string
    user_id: number
    value: Buffer
    created_at: bigint | number
    expired_at: bigint | number
  }

  export type chii_os_web_sessionsUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    value?: BytesFieldUpdateOperationsInput | Buffer
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    expired_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type chii_os_web_sessionsUncheckedUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    value?: BytesFieldUpdateOperationsInput | Buffer
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    expired_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type chii_os_web_sessionsCreateManyInput = {
    key: string
    user_id: number
    value: Buffer
    created_at: bigint | number
    expired_at: bigint | number
  }

  export type chii_os_web_sessionsUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    value?: BytesFieldUpdateOperationsInput | Buffer
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    expired_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type chii_os_web_sessionsUncheckedUpdateManyInput = {
    key?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    value?: BytesFieldUpdateOperationsInput | Buffer
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    expired_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type chii_person_collectsCreateInput = {
    prsn_clt_cat: chii_person_collects_prsn_clt_cat
    prsn_clt_mid: number
    prsn_clt_uid: number
    prsn_clt_dateline: number
  }

  export type chii_person_collectsUncheckedCreateInput = {
    prsn_clt_id?: number
    prsn_clt_cat: chii_person_collects_prsn_clt_cat
    prsn_clt_mid: number
    prsn_clt_uid: number
    prsn_clt_dateline: number
  }

  export type chii_person_collectsUpdateInput = {
    prsn_clt_cat?: Enumchii_person_collects_prsn_clt_catFieldUpdateOperationsInput | chii_person_collects_prsn_clt_cat
    prsn_clt_mid?: IntFieldUpdateOperationsInput | number
    prsn_clt_uid?: IntFieldUpdateOperationsInput | number
    prsn_clt_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_person_collectsUncheckedUpdateInput = {
    prsn_clt_id?: IntFieldUpdateOperationsInput | number
    prsn_clt_cat?: Enumchii_person_collects_prsn_clt_catFieldUpdateOperationsInput | chii_person_collects_prsn_clt_cat
    prsn_clt_mid?: IntFieldUpdateOperationsInput | number
    prsn_clt_uid?: IntFieldUpdateOperationsInput | number
    prsn_clt_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_person_collectsCreateManyInput = {
    prsn_clt_id?: number
    prsn_clt_cat: chii_person_collects_prsn_clt_cat
    prsn_clt_mid: number
    prsn_clt_uid: number
    prsn_clt_dateline: number
  }

  export type chii_person_collectsUpdateManyMutationInput = {
    prsn_clt_cat?: Enumchii_person_collects_prsn_clt_catFieldUpdateOperationsInput | chii_person_collects_prsn_clt_cat
    prsn_clt_mid?: IntFieldUpdateOperationsInput | number
    prsn_clt_uid?: IntFieldUpdateOperationsInput | number
    prsn_clt_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_person_collectsUncheckedUpdateManyInput = {
    prsn_clt_id?: IntFieldUpdateOperationsInput | number
    prsn_clt_cat?: Enumchii_person_collects_prsn_clt_catFieldUpdateOperationsInput | chii_person_collects_prsn_clt_cat
    prsn_clt_mid?: IntFieldUpdateOperationsInput | number
    prsn_clt_uid?: IntFieldUpdateOperationsInput | number
    prsn_clt_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_person_cs_indexCreateInput = {
    prsn_type: chii_person_cs_index_prsn_type
    prsn_id: number
    prsn_position: number
    subject_id: number
    subject_type_id: number
    summary: string
    prsn_appear_eps: string
  }

  export type chii_person_cs_indexUncheckedCreateInput = {
    prsn_type: chii_person_cs_index_prsn_type
    prsn_id: number
    prsn_position: number
    subject_id: number
    subject_type_id: number
    summary: string
    prsn_appear_eps: string
  }

  export type chii_person_cs_indexUpdateInput = {
    prsn_type?: Enumchii_person_cs_index_prsn_typeFieldUpdateOperationsInput | chii_person_cs_index_prsn_type
    prsn_id?: IntFieldUpdateOperationsInput | number
    prsn_position?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    subject_type_id?: IntFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    prsn_appear_eps?: StringFieldUpdateOperationsInput | string
  }

  export type chii_person_cs_indexUncheckedUpdateInput = {
    prsn_type?: Enumchii_person_cs_index_prsn_typeFieldUpdateOperationsInput | chii_person_cs_index_prsn_type
    prsn_id?: IntFieldUpdateOperationsInput | number
    prsn_position?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    subject_type_id?: IntFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    prsn_appear_eps?: StringFieldUpdateOperationsInput | string
  }

  export type chii_person_cs_indexCreateManyInput = {
    prsn_type: chii_person_cs_index_prsn_type
    prsn_id: number
    prsn_position: number
    subject_id: number
    subject_type_id: number
    summary: string
    prsn_appear_eps: string
  }

  export type chii_person_cs_indexUpdateManyMutationInput = {
    prsn_type?: Enumchii_person_cs_index_prsn_typeFieldUpdateOperationsInput | chii_person_cs_index_prsn_type
    prsn_id?: IntFieldUpdateOperationsInput | number
    prsn_position?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    subject_type_id?: IntFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    prsn_appear_eps?: StringFieldUpdateOperationsInput | string
  }

  export type chii_person_cs_indexUncheckedUpdateManyInput = {
    prsn_type?: Enumchii_person_cs_index_prsn_typeFieldUpdateOperationsInput | chii_person_cs_index_prsn_type
    prsn_id?: IntFieldUpdateOperationsInput | number
    prsn_position?: IntFieldUpdateOperationsInput | number
    subject_id?: IntFieldUpdateOperationsInput | number
    subject_type_id?: IntFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    prsn_appear_eps?: StringFieldUpdateOperationsInput | string
  }

  export type chii_person_fieldsCreateInput = {
    prsn_cat: chii_person_fields_prsn_cat
    prsn_id: number
    gender: number
    bloodtype: number
    birth_year: number
    birth_mon: number
    birth_day: number
  }

  export type chii_person_fieldsUncheckedCreateInput = {
    prsn_cat: chii_person_fields_prsn_cat
    prsn_id: number
    gender: number
    bloodtype: number
    birth_year: number
    birth_mon: number
    birth_day: number
  }

  export type chii_person_fieldsUpdateInput = {
    prsn_cat?: Enumchii_person_fields_prsn_catFieldUpdateOperationsInput | chii_person_fields_prsn_cat
    prsn_id?: IntFieldUpdateOperationsInput | number
    gender?: IntFieldUpdateOperationsInput | number
    bloodtype?: IntFieldUpdateOperationsInput | number
    birth_year?: IntFieldUpdateOperationsInput | number
    birth_mon?: IntFieldUpdateOperationsInput | number
    birth_day?: IntFieldUpdateOperationsInput | number
  }

  export type chii_person_fieldsUncheckedUpdateInput = {
    prsn_cat?: Enumchii_person_fields_prsn_catFieldUpdateOperationsInput | chii_person_fields_prsn_cat
    prsn_id?: IntFieldUpdateOperationsInput | number
    gender?: IntFieldUpdateOperationsInput | number
    bloodtype?: IntFieldUpdateOperationsInput | number
    birth_year?: IntFieldUpdateOperationsInput | number
    birth_mon?: IntFieldUpdateOperationsInput | number
    birth_day?: IntFieldUpdateOperationsInput | number
  }

  export type chii_person_fieldsCreateManyInput = {
    prsn_cat: chii_person_fields_prsn_cat
    prsn_id: number
    gender: number
    bloodtype: number
    birth_year: number
    birth_mon: number
    birth_day: number
  }

  export type chii_person_fieldsUpdateManyMutationInput = {
    prsn_cat?: Enumchii_person_fields_prsn_catFieldUpdateOperationsInput | chii_person_fields_prsn_cat
    prsn_id?: IntFieldUpdateOperationsInput | number
    gender?: IntFieldUpdateOperationsInput | number
    bloodtype?: IntFieldUpdateOperationsInput | number
    birth_year?: IntFieldUpdateOperationsInput | number
    birth_mon?: IntFieldUpdateOperationsInput | number
    birth_day?: IntFieldUpdateOperationsInput | number
  }

  export type chii_person_fieldsUncheckedUpdateManyInput = {
    prsn_cat?: Enumchii_person_fields_prsn_catFieldUpdateOperationsInput | chii_person_fields_prsn_cat
    prsn_id?: IntFieldUpdateOperationsInput | number
    gender?: IntFieldUpdateOperationsInput | number
    bloodtype?: IntFieldUpdateOperationsInput | number
    birth_year?: IntFieldUpdateOperationsInput | number
    birth_mon?: IntFieldUpdateOperationsInput | number
    birth_day?: IntFieldUpdateOperationsInput | number
  }

  export type chii_personsCreateInput = {
    prsn_name: string
    prsn_type: number
    prsn_infobox: string
    prsn_producer: boolean
    prsn_mangaka: boolean
    prsn_artist: boolean
    prsn_seiyu: boolean
    prsn_writer?: number
    prsn_illustrator?: number
    prsn_actor: boolean
    prsn_summary: string
    prsn_img: string
    prsn_img_anidb: string
    prsn_comment: number
    prsn_collects: number
    prsn_dateline: number
    prsn_lastpost: number
    prsn_lock: number
    prsn_anidb_id: number
    prsn_ban?: number
    prsn_redirect?: number
    prsn_nsfw: boolean
  }

  export type chii_personsUncheckedCreateInput = {
    prsn_id?: number
    prsn_name: string
    prsn_type: number
    prsn_infobox: string
    prsn_producer: boolean
    prsn_mangaka: boolean
    prsn_artist: boolean
    prsn_seiyu: boolean
    prsn_writer?: number
    prsn_illustrator?: number
    prsn_actor: boolean
    prsn_summary: string
    prsn_img: string
    prsn_img_anidb: string
    prsn_comment: number
    prsn_collects: number
    prsn_dateline: number
    prsn_lastpost: number
    prsn_lock: number
    prsn_anidb_id: number
    prsn_ban?: number
    prsn_redirect?: number
    prsn_nsfw: boolean
  }

  export type chii_personsUpdateInput = {
    prsn_name?: StringFieldUpdateOperationsInput | string
    prsn_type?: IntFieldUpdateOperationsInput | number
    prsn_infobox?: StringFieldUpdateOperationsInput | string
    prsn_producer?: BoolFieldUpdateOperationsInput | boolean
    prsn_mangaka?: BoolFieldUpdateOperationsInput | boolean
    prsn_artist?: BoolFieldUpdateOperationsInput | boolean
    prsn_seiyu?: BoolFieldUpdateOperationsInput | boolean
    prsn_writer?: IntFieldUpdateOperationsInput | number
    prsn_illustrator?: IntFieldUpdateOperationsInput | number
    prsn_actor?: BoolFieldUpdateOperationsInput | boolean
    prsn_summary?: StringFieldUpdateOperationsInput | string
    prsn_img?: StringFieldUpdateOperationsInput | string
    prsn_img_anidb?: StringFieldUpdateOperationsInput | string
    prsn_comment?: IntFieldUpdateOperationsInput | number
    prsn_collects?: IntFieldUpdateOperationsInput | number
    prsn_dateline?: IntFieldUpdateOperationsInput | number
    prsn_lastpost?: IntFieldUpdateOperationsInput | number
    prsn_lock?: IntFieldUpdateOperationsInput | number
    prsn_anidb_id?: IntFieldUpdateOperationsInput | number
    prsn_ban?: IntFieldUpdateOperationsInput | number
    prsn_redirect?: IntFieldUpdateOperationsInput | number
    prsn_nsfw?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_personsUncheckedUpdateInput = {
    prsn_id?: IntFieldUpdateOperationsInput | number
    prsn_name?: StringFieldUpdateOperationsInput | string
    prsn_type?: IntFieldUpdateOperationsInput | number
    prsn_infobox?: StringFieldUpdateOperationsInput | string
    prsn_producer?: BoolFieldUpdateOperationsInput | boolean
    prsn_mangaka?: BoolFieldUpdateOperationsInput | boolean
    prsn_artist?: BoolFieldUpdateOperationsInput | boolean
    prsn_seiyu?: BoolFieldUpdateOperationsInput | boolean
    prsn_writer?: IntFieldUpdateOperationsInput | number
    prsn_illustrator?: IntFieldUpdateOperationsInput | number
    prsn_actor?: BoolFieldUpdateOperationsInput | boolean
    prsn_summary?: StringFieldUpdateOperationsInput | string
    prsn_img?: StringFieldUpdateOperationsInput | string
    prsn_img_anidb?: StringFieldUpdateOperationsInput | string
    prsn_comment?: IntFieldUpdateOperationsInput | number
    prsn_collects?: IntFieldUpdateOperationsInput | number
    prsn_dateline?: IntFieldUpdateOperationsInput | number
    prsn_lastpost?: IntFieldUpdateOperationsInput | number
    prsn_lock?: IntFieldUpdateOperationsInput | number
    prsn_anidb_id?: IntFieldUpdateOperationsInput | number
    prsn_ban?: IntFieldUpdateOperationsInput | number
    prsn_redirect?: IntFieldUpdateOperationsInput | number
    prsn_nsfw?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_personsCreateManyInput = {
    prsn_id?: number
    prsn_name: string
    prsn_type: number
    prsn_infobox: string
    prsn_producer: boolean
    prsn_mangaka: boolean
    prsn_artist: boolean
    prsn_seiyu: boolean
    prsn_writer?: number
    prsn_illustrator?: number
    prsn_actor: boolean
    prsn_summary: string
    prsn_img: string
    prsn_img_anidb: string
    prsn_comment: number
    prsn_collects: number
    prsn_dateline: number
    prsn_lastpost: number
    prsn_lock: number
    prsn_anidb_id: number
    prsn_ban?: number
    prsn_redirect?: number
    prsn_nsfw: boolean
  }

  export type chii_personsUpdateManyMutationInput = {
    prsn_name?: StringFieldUpdateOperationsInput | string
    prsn_type?: IntFieldUpdateOperationsInput | number
    prsn_infobox?: StringFieldUpdateOperationsInput | string
    prsn_producer?: BoolFieldUpdateOperationsInput | boolean
    prsn_mangaka?: BoolFieldUpdateOperationsInput | boolean
    prsn_artist?: BoolFieldUpdateOperationsInput | boolean
    prsn_seiyu?: BoolFieldUpdateOperationsInput | boolean
    prsn_writer?: IntFieldUpdateOperationsInput | number
    prsn_illustrator?: IntFieldUpdateOperationsInput | number
    prsn_actor?: BoolFieldUpdateOperationsInput | boolean
    prsn_summary?: StringFieldUpdateOperationsInput | string
    prsn_img?: StringFieldUpdateOperationsInput | string
    prsn_img_anidb?: StringFieldUpdateOperationsInput | string
    prsn_comment?: IntFieldUpdateOperationsInput | number
    prsn_collects?: IntFieldUpdateOperationsInput | number
    prsn_dateline?: IntFieldUpdateOperationsInput | number
    prsn_lastpost?: IntFieldUpdateOperationsInput | number
    prsn_lock?: IntFieldUpdateOperationsInput | number
    prsn_anidb_id?: IntFieldUpdateOperationsInput | number
    prsn_ban?: IntFieldUpdateOperationsInput | number
    prsn_redirect?: IntFieldUpdateOperationsInput | number
    prsn_nsfw?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_personsUncheckedUpdateManyInput = {
    prsn_id?: IntFieldUpdateOperationsInput | number
    prsn_name?: StringFieldUpdateOperationsInput | string
    prsn_type?: IntFieldUpdateOperationsInput | number
    prsn_infobox?: StringFieldUpdateOperationsInput | string
    prsn_producer?: BoolFieldUpdateOperationsInput | boolean
    prsn_mangaka?: BoolFieldUpdateOperationsInput | boolean
    prsn_artist?: BoolFieldUpdateOperationsInput | boolean
    prsn_seiyu?: BoolFieldUpdateOperationsInput | boolean
    prsn_writer?: IntFieldUpdateOperationsInput | number
    prsn_illustrator?: IntFieldUpdateOperationsInput | number
    prsn_actor?: BoolFieldUpdateOperationsInput | boolean
    prsn_summary?: StringFieldUpdateOperationsInput | string
    prsn_img?: StringFieldUpdateOperationsInput | string
    prsn_img_anidb?: StringFieldUpdateOperationsInput | string
    prsn_comment?: IntFieldUpdateOperationsInput | number
    prsn_collects?: IntFieldUpdateOperationsInput | number
    prsn_dateline?: IntFieldUpdateOperationsInput | number
    prsn_lastpost?: IntFieldUpdateOperationsInput | number
    prsn_lock?: IntFieldUpdateOperationsInput | number
    prsn_anidb_id?: IntFieldUpdateOperationsInput | number
    prsn_ban?: IntFieldUpdateOperationsInput | number
    prsn_redirect?: IntFieldUpdateOperationsInput | number
    prsn_nsfw?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_prsn_commentsCreateInput = {
    prsn_pst_mid: number
    prsn_pst_uid: number
    prsn_pst_related?: number
    prsn_pst_dateline: number
    prsn_pst_content: string
  }

  export type chii_prsn_commentsUncheckedCreateInput = {
    prsn_pst_id?: number
    prsn_pst_mid: number
    prsn_pst_uid: number
    prsn_pst_related?: number
    prsn_pst_dateline: number
    prsn_pst_content: string
  }

  export type chii_prsn_commentsUpdateInput = {
    prsn_pst_mid?: IntFieldUpdateOperationsInput | number
    prsn_pst_uid?: IntFieldUpdateOperationsInput | number
    prsn_pst_related?: IntFieldUpdateOperationsInput | number
    prsn_pst_dateline?: IntFieldUpdateOperationsInput | number
    prsn_pst_content?: StringFieldUpdateOperationsInput | string
  }

  export type chii_prsn_commentsUncheckedUpdateInput = {
    prsn_pst_id?: IntFieldUpdateOperationsInput | number
    prsn_pst_mid?: IntFieldUpdateOperationsInput | number
    prsn_pst_uid?: IntFieldUpdateOperationsInput | number
    prsn_pst_related?: IntFieldUpdateOperationsInput | number
    prsn_pst_dateline?: IntFieldUpdateOperationsInput | number
    prsn_pst_content?: StringFieldUpdateOperationsInput | string
  }

  export type chii_prsn_commentsCreateManyInput = {
    prsn_pst_id?: number
    prsn_pst_mid: number
    prsn_pst_uid: number
    prsn_pst_related?: number
    prsn_pst_dateline: number
    prsn_pst_content: string
  }

  export type chii_prsn_commentsUpdateManyMutationInput = {
    prsn_pst_mid?: IntFieldUpdateOperationsInput | number
    prsn_pst_uid?: IntFieldUpdateOperationsInput | number
    prsn_pst_related?: IntFieldUpdateOperationsInput | number
    prsn_pst_dateline?: IntFieldUpdateOperationsInput | number
    prsn_pst_content?: StringFieldUpdateOperationsInput | string
  }

  export type chii_prsn_commentsUncheckedUpdateManyInput = {
    prsn_pst_id?: IntFieldUpdateOperationsInput | number
    prsn_pst_mid?: IntFieldUpdateOperationsInput | number
    prsn_pst_uid?: IntFieldUpdateOperationsInput | number
    prsn_pst_related?: IntFieldUpdateOperationsInput | number
    prsn_pst_dateline?: IntFieldUpdateOperationsInput | number
    prsn_pst_content?: StringFieldUpdateOperationsInput | string
  }

  export type chii_rev_historyCreateInput = {
    rev_type: number
    rev_mid: number
    rev_text_id: number
    rev_dateline: number
    rev_creator: number
    rev_edit_summary: string
  }

  export type chii_rev_historyUncheckedCreateInput = {
    rev_id?: number
    rev_type: number
    rev_mid: number
    rev_text_id: number
    rev_dateline: number
    rev_creator: number
    rev_edit_summary: string
  }

  export type chii_rev_historyUpdateInput = {
    rev_type?: IntFieldUpdateOperationsInput | number
    rev_mid?: IntFieldUpdateOperationsInput | number
    rev_text_id?: IntFieldUpdateOperationsInput | number
    rev_dateline?: IntFieldUpdateOperationsInput | number
    rev_creator?: IntFieldUpdateOperationsInput | number
    rev_edit_summary?: StringFieldUpdateOperationsInput | string
  }

  export type chii_rev_historyUncheckedUpdateInput = {
    rev_id?: IntFieldUpdateOperationsInput | number
    rev_type?: IntFieldUpdateOperationsInput | number
    rev_mid?: IntFieldUpdateOperationsInput | number
    rev_text_id?: IntFieldUpdateOperationsInput | number
    rev_dateline?: IntFieldUpdateOperationsInput | number
    rev_creator?: IntFieldUpdateOperationsInput | number
    rev_edit_summary?: StringFieldUpdateOperationsInput | string
  }

  export type chii_rev_historyCreateManyInput = {
    rev_id?: number
    rev_type: number
    rev_mid: number
    rev_text_id: number
    rev_dateline: number
    rev_creator: number
    rev_edit_summary: string
  }

  export type chii_rev_historyUpdateManyMutationInput = {
    rev_type?: IntFieldUpdateOperationsInput | number
    rev_mid?: IntFieldUpdateOperationsInput | number
    rev_text_id?: IntFieldUpdateOperationsInput | number
    rev_dateline?: IntFieldUpdateOperationsInput | number
    rev_creator?: IntFieldUpdateOperationsInput | number
    rev_edit_summary?: StringFieldUpdateOperationsInput | string
  }

  export type chii_rev_historyUncheckedUpdateManyInput = {
    rev_id?: IntFieldUpdateOperationsInput | number
    rev_type?: IntFieldUpdateOperationsInput | number
    rev_mid?: IntFieldUpdateOperationsInput | number
    rev_text_id?: IntFieldUpdateOperationsInput | number
    rev_dateline?: IntFieldUpdateOperationsInput | number
    rev_creator?: IntFieldUpdateOperationsInput | number
    rev_edit_summary?: StringFieldUpdateOperationsInput | string
  }

  export type chii_rev_textCreateInput = {
    rev_text: Buffer
  }

  export type chii_rev_textUncheckedCreateInput = {
    rev_text_id?: number
    rev_text: Buffer
  }

  export type chii_rev_textUpdateInput = {
    rev_text?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type chii_rev_textUncheckedUpdateInput = {
    rev_text_id?: IntFieldUpdateOperationsInput | number
    rev_text?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type chii_rev_textCreateManyInput = {
    rev_text_id?: number
    rev_text: Buffer
  }

  export type chii_rev_textUpdateManyMutationInput = {
    rev_text?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type chii_rev_textUncheckedUpdateManyInput = {
    rev_text_id?: IntFieldUpdateOperationsInput | number
    rev_text?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type chii_subject_fieldsCreateInput = {
    field_tid?: number
    field_tags: string
    field_rate_1?: number
    field_rate_2?: number
    field_rate_3?: number
    field_rate_4?: number
    field_rate_5?: number
    field_rate_6?: number
    field_rate_7?: number
    field_rate_8?: number
    field_rate_9?: number
    field_rate_10?: number
    field_airtime: boolean
    field_rank?: number
    field_year: number
    field_mon: number
    field_week_day: boolean
    field_date: Date | string
    field_redirect?: number
  }

  export type chii_subject_fieldsUncheckedCreateInput = {
    field_sid?: number
    field_tid?: number
    field_tags: string
    field_rate_1?: number
    field_rate_2?: number
    field_rate_3?: number
    field_rate_4?: number
    field_rate_5?: number
    field_rate_6?: number
    field_rate_7?: number
    field_rate_8?: number
    field_rate_9?: number
    field_rate_10?: number
    field_airtime: boolean
    field_rank?: number
    field_year: number
    field_mon: number
    field_week_day: boolean
    field_date: Date | string
    field_redirect?: number
  }

  export type chii_subject_fieldsUpdateInput = {
    field_tid?: IntFieldUpdateOperationsInput | number
    field_tags?: StringFieldUpdateOperationsInput | string
    field_rate_1?: IntFieldUpdateOperationsInput | number
    field_rate_2?: IntFieldUpdateOperationsInput | number
    field_rate_3?: IntFieldUpdateOperationsInput | number
    field_rate_4?: IntFieldUpdateOperationsInput | number
    field_rate_5?: IntFieldUpdateOperationsInput | number
    field_rate_6?: IntFieldUpdateOperationsInput | number
    field_rate_7?: IntFieldUpdateOperationsInput | number
    field_rate_8?: IntFieldUpdateOperationsInput | number
    field_rate_9?: IntFieldUpdateOperationsInput | number
    field_rate_10?: IntFieldUpdateOperationsInput | number
    field_airtime?: BoolFieldUpdateOperationsInput | boolean
    field_rank?: IntFieldUpdateOperationsInput | number
    field_year?: IntFieldUpdateOperationsInput | number
    field_mon?: IntFieldUpdateOperationsInput | number
    field_week_day?: BoolFieldUpdateOperationsInput | boolean
    field_date?: DateTimeFieldUpdateOperationsInput | Date | string
    field_redirect?: IntFieldUpdateOperationsInput | number
  }

  export type chii_subject_fieldsUncheckedUpdateInput = {
    field_sid?: IntFieldUpdateOperationsInput | number
    field_tid?: IntFieldUpdateOperationsInput | number
    field_tags?: StringFieldUpdateOperationsInput | string
    field_rate_1?: IntFieldUpdateOperationsInput | number
    field_rate_2?: IntFieldUpdateOperationsInput | number
    field_rate_3?: IntFieldUpdateOperationsInput | number
    field_rate_4?: IntFieldUpdateOperationsInput | number
    field_rate_5?: IntFieldUpdateOperationsInput | number
    field_rate_6?: IntFieldUpdateOperationsInput | number
    field_rate_7?: IntFieldUpdateOperationsInput | number
    field_rate_8?: IntFieldUpdateOperationsInput | number
    field_rate_9?: IntFieldUpdateOperationsInput | number
    field_rate_10?: IntFieldUpdateOperationsInput | number
    field_airtime?: BoolFieldUpdateOperationsInput | boolean
    field_rank?: IntFieldUpdateOperationsInput | number
    field_year?: IntFieldUpdateOperationsInput | number
    field_mon?: IntFieldUpdateOperationsInput | number
    field_week_day?: BoolFieldUpdateOperationsInput | boolean
    field_date?: DateTimeFieldUpdateOperationsInput | Date | string
    field_redirect?: IntFieldUpdateOperationsInput | number
  }

  export type chii_subject_fieldsCreateManyInput = {
    field_sid?: number
    field_tid?: number
    field_tags: string
    field_rate_1?: number
    field_rate_2?: number
    field_rate_3?: number
    field_rate_4?: number
    field_rate_5?: number
    field_rate_6?: number
    field_rate_7?: number
    field_rate_8?: number
    field_rate_9?: number
    field_rate_10?: number
    field_airtime: boolean
    field_rank?: number
    field_year: number
    field_mon: number
    field_week_day: boolean
    field_date: Date | string
    field_redirect?: number
  }

  export type chii_subject_fieldsUpdateManyMutationInput = {
    field_tid?: IntFieldUpdateOperationsInput | number
    field_tags?: StringFieldUpdateOperationsInput | string
    field_rate_1?: IntFieldUpdateOperationsInput | number
    field_rate_2?: IntFieldUpdateOperationsInput | number
    field_rate_3?: IntFieldUpdateOperationsInput | number
    field_rate_4?: IntFieldUpdateOperationsInput | number
    field_rate_5?: IntFieldUpdateOperationsInput | number
    field_rate_6?: IntFieldUpdateOperationsInput | number
    field_rate_7?: IntFieldUpdateOperationsInput | number
    field_rate_8?: IntFieldUpdateOperationsInput | number
    field_rate_9?: IntFieldUpdateOperationsInput | number
    field_rate_10?: IntFieldUpdateOperationsInput | number
    field_airtime?: BoolFieldUpdateOperationsInput | boolean
    field_rank?: IntFieldUpdateOperationsInput | number
    field_year?: IntFieldUpdateOperationsInput | number
    field_mon?: IntFieldUpdateOperationsInput | number
    field_week_day?: BoolFieldUpdateOperationsInput | boolean
    field_date?: DateTimeFieldUpdateOperationsInput | Date | string
    field_redirect?: IntFieldUpdateOperationsInput | number
  }

  export type chii_subject_fieldsUncheckedUpdateManyInput = {
    field_sid?: IntFieldUpdateOperationsInput | number
    field_tid?: IntFieldUpdateOperationsInput | number
    field_tags?: StringFieldUpdateOperationsInput | string
    field_rate_1?: IntFieldUpdateOperationsInput | number
    field_rate_2?: IntFieldUpdateOperationsInput | number
    field_rate_3?: IntFieldUpdateOperationsInput | number
    field_rate_4?: IntFieldUpdateOperationsInput | number
    field_rate_5?: IntFieldUpdateOperationsInput | number
    field_rate_6?: IntFieldUpdateOperationsInput | number
    field_rate_7?: IntFieldUpdateOperationsInput | number
    field_rate_8?: IntFieldUpdateOperationsInput | number
    field_rate_9?: IntFieldUpdateOperationsInput | number
    field_rate_10?: IntFieldUpdateOperationsInput | number
    field_airtime?: BoolFieldUpdateOperationsInput | boolean
    field_rank?: IntFieldUpdateOperationsInput | number
    field_year?: IntFieldUpdateOperationsInput | number
    field_mon?: IntFieldUpdateOperationsInput | number
    field_week_day?: BoolFieldUpdateOperationsInput | boolean
    field_date?: DateTimeFieldUpdateOperationsInput | Date | string
    field_redirect?: IntFieldUpdateOperationsInput | number
  }

  export type chii_subject_interestsCreateInput = {
    interest_uid: number
    interest_subject_id: number
    interest_subject_type?: number
    interest_rate?: number
    interest_type?: boolean
    interest_has_comment: boolean
    interest_comment: string
    interest_tag: string
    interest_ep_status?: number
    interest_vol_status: number
    interest_wish_dateline: number
    interest_doing_dateline: number
    interest_collect_dateline: number
    interest_on_hold_dateline: number
    interest_dropped_dateline: number
    interest_create_ip: string
    interest_lasttouch_ip: string
    interest_lasttouch?: number
    interest_private: boolean
  }

  export type chii_subject_interestsUncheckedCreateInput = {
    interest_id?: number
    interest_uid: number
    interest_subject_id: number
    interest_subject_type?: number
    interest_rate?: number
    interest_type?: boolean
    interest_has_comment: boolean
    interest_comment: string
    interest_tag: string
    interest_ep_status?: number
    interest_vol_status: number
    interest_wish_dateline: number
    interest_doing_dateline: number
    interest_collect_dateline: number
    interest_on_hold_dateline: number
    interest_dropped_dateline: number
    interest_create_ip: string
    interest_lasttouch_ip: string
    interest_lasttouch?: number
    interest_private: boolean
  }

  export type chii_subject_interestsUpdateInput = {
    interest_uid?: IntFieldUpdateOperationsInput | number
    interest_subject_id?: IntFieldUpdateOperationsInput | number
    interest_subject_type?: IntFieldUpdateOperationsInput | number
    interest_rate?: IntFieldUpdateOperationsInput | number
    interest_type?: BoolFieldUpdateOperationsInput | boolean
    interest_has_comment?: BoolFieldUpdateOperationsInput | boolean
    interest_comment?: StringFieldUpdateOperationsInput | string
    interest_tag?: StringFieldUpdateOperationsInput | string
    interest_ep_status?: IntFieldUpdateOperationsInput | number
    interest_vol_status?: IntFieldUpdateOperationsInput | number
    interest_wish_dateline?: IntFieldUpdateOperationsInput | number
    interest_doing_dateline?: IntFieldUpdateOperationsInput | number
    interest_collect_dateline?: IntFieldUpdateOperationsInput | number
    interest_on_hold_dateline?: IntFieldUpdateOperationsInput | number
    interest_dropped_dateline?: IntFieldUpdateOperationsInput | number
    interest_create_ip?: StringFieldUpdateOperationsInput | string
    interest_lasttouch_ip?: StringFieldUpdateOperationsInput | string
    interest_lasttouch?: IntFieldUpdateOperationsInput | number
    interest_private?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_subject_interestsUncheckedUpdateInput = {
    interest_id?: IntFieldUpdateOperationsInput | number
    interest_uid?: IntFieldUpdateOperationsInput | number
    interest_subject_id?: IntFieldUpdateOperationsInput | number
    interest_subject_type?: IntFieldUpdateOperationsInput | number
    interest_rate?: IntFieldUpdateOperationsInput | number
    interest_type?: BoolFieldUpdateOperationsInput | boolean
    interest_has_comment?: BoolFieldUpdateOperationsInput | boolean
    interest_comment?: StringFieldUpdateOperationsInput | string
    interest_tag?: StringFieldUpdateOperationsInput | string
    interest_ep_status?: IntFieldUpdateOperationsInput | number
    interest_vol_status?: IntFieldUpdateOperationsInput | number
    interest_wish_dateline?: IntFieldUpdateOperationsInput | number
    interest_doing_dateline?: IntFieldUpdateOperationsInput | number
    interest_collect_dateline?: IntFieldUpdateOperationsInput | number
    interest_on_hold_dateline?: IntFieldUpdateOperationsInput | number
    interest_dropped_dateline?: IntFieldUpdateOperationsInput | number
    interest_create_ip?: StringFieldUpdateOperationsInput | string
    interest_lasttouch_ip?: StringFieldUpdateOperationsInput | string
    interest_lasttouch?: IntFieldUpdateOperationsInput | number
    interest_private?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_subject_interestsCreateManyInput = {
    interest_id?: number
    interest_uid: number
    interest_subject_id: number
    interest_subject_type?: number
    interest_rate?: number
    interest_type?: boolean
    interest_has_comment: boolean
    interest_comment: string
    interest_tag: string
    interest_ep_status?: number
    interest_vol_status: number
    interest_wish_dateline: number
    interest_doing_dateline: number
    interest_collect_dateline: number
    interest_on_hold_dateline: number
    interest_dropped_dateline: number
    interest_create_ip: string
    interest_lasttouch_ip: string
    interest_lasttouch?: number
    interest_private: boolean
  }

  export type chii_subject_interestsUpdateManyMutationInput = {
    interest_uid?: IntFieldUpdateOperationsInput | number
    interest_subject_id?: IntFieldUpdateOperationsInput | number
    interest_subject_type?: IntFieldUpdateOperationsInput | number
    interest_rate?: IntFieldUpdateOperationsInput | number
    interest_type?: BoolFieldUpdateOperationsInput | boolean
    interest_has_comment?: BoolFieldUpdateOperationsInput | boolean
    interest_comment?: StringFieldUpdateOperationsInput | string
    interest_tag?: StringFieldUpdateOperationsInput | string
    interest_ep_status?: IntFieldUpdateOperationsInput | number
    interest_vol_status?: IntFieldUpdateOperationsInput | number
    interest_wish_dateline?: IntFieldUpdateOperationsInput | number
    interest_doing_dateline?: IntFieldUpdateOperationsInput | number
    interest_collect_dateline?: IntFieldUpdateOperationsInput | number
    interest_on_hold_dateline?: IntFieldUpdateOperationsInput | number
    interest_dropped_dateline?: IntFieldUpdateOperationsInput | number
    interest_create_ip?: StringFieldUpdateOperationsInput | string
    interest_lasttouch_ip?: StringFieldUpdateOperationsInput | string
    interest_lasttouch?: IntFieldUpdateOperationsInput | number
    interest_private?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_subject_interestsUncheckedUpdateManyInput = {
    interest_id?: IntFieldUpdateOperationsInput | number
    interest_uid?: IntFieldUpdateOperationsInput | number
    interest_subject_id?: IntFieldUpdateOperationsInput | number
    interest_subject_type?: IntFieldUpdateOperationsInput | number
    interest_rate?: IntFieldUpdateOperationsInput | number
    interest_type?: BoolFieldUpdateOperationsInput | boolean
    interest_has_comment?: BoolFieldUpdateOperationsInput | boolean
    interest_comment?: StringFieldUpdateOperationsInput | string
    interest_tag?: StringFieldUpdateOperationsInput | string
    interest_ep_status?: IntFieldUpdateOperationsInput | number
    interest_vol_status?: IntFieldUpdateOperationsInput | number
    interest_wish_dateline?: IntFieldUpdateOperationsInput | number
    interest_doing_dateline?: IntFieldUpdateOperationsInput | number
    interest_collect_dateline?: IntFieldUpdateOperationsInput | number
    interest_on_hold_dateline?: IntFieldUpdateOperationsInput | number
    interest_dropped_dateline?: IntFieldUpdateOperationsInput | number
    interest_create_ip?: StringFieldUpdateOperationsInput | string
    interest_lasttouch_ip?: StringFieldUpdateOperationsInput | string
    interest_lasttouch?: IntFieldUpdateOperationsInput | number
    interest_private?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_subject_postsCreateInput = {
    sbj_pst_mid: number
    sbj_pst_uid: number
    sbj_pst_related?: number
    sbj_pst_content: string
    sbj_pst_state: boolean
    sbj_pst_dateline?: number
  }

  export type chii_subject_postsUncheckedCreateInput = {
    sbj_pst_id?: number
    sbj_pst_mid: number
    sbj_pst_uid: number
    sbj_pst_related?: number
    sbj_pst_content: string
    sbj_pst_state: boolean
    sbj_pst_dateline?: number
  }

  export type chii_subject_postsUpdateInput = {
    sbj_pst_mid?: IntFieldUpdateOperationsInput | number
    sbj_pst_uid?: IntFieldUpdateOperationsInput | number
    sbj_pst_related?: IntFieldUpdateOperationsInput | number
    sbj_pst_content?: StringFieldUpdateOperationsInput | string
    sbj_pst_state?: BoolFieldUpdateOperationsInput | boolean
    sbj_pst_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_subject_postsUncheckedUpdateInput = {
    sbj_pst_id?: IntFieldUpdateOperationsInput | number
    sbj_pst_mid?: IntFieldUpdateOperationsInput | number
    sbj_pst_uid?: IntFieldUpdateOperationsInput | number
    sbj_pst_related?: IntFieldUpdateOperationsInput | number
    sbj_pst_content?: StringFieldUpdateOperationsInput | string
    sbj_pst_state?: BoolFieldUpdateOperationsInput | boolean
    sbj_pst_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_subject_postsCreateManyInput = {
    sbj_pst_id?: number
    sbj_pst_mid: number
    sbj_pst_uid: number
    sbj_pst_related?: number
    sbj_pst_content: string
    sbj_pst_state: boolean
    sbj_pst_dateline?: number
  }

  export type chii_subject_postsUpdateManyMutationInput = {
    sbj_pst_mid?: IntFieldUpdateOperationsInput | number
    sbj_pst_uid?: IntFieldUpdateOperationsInput | number
    sbj_pst_related?: IntFieldUpdateOperationsInput | number
    sbj_pst_content?: StringFieldUpdateOperationsInput | string
    sbj_pst_state?: BoolFieldUpdateOperationsInput | boolean
    sbj_pst_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_subject_postsUncheckedUpdateManyInput = {
    sbj_pst_id?: IntFieldUpdateOperationsInput | number
    sbj_pst_mid?: IntFieldUpdateOperationsInput | number
    sbj_pst_uid?: IntFieldUpdateOperationsInput | number
    sbj_pst_related?: IntFieldUpdateOperationsInput | number
    sbj_pst_content?: StringFieldUpdateOperationsInput | string
    sbj_pst_state?: BoolFieldUpdateOperationsInput | boolean
    sbj_pst_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_subject_relationsCreateInput = {
    rlt_subject_id: number
    rlt_subject_type_id: number
    rlt_relation_type: number
    rlt_related_subject_id: number
    rlt_related_subject_type_id: number
    rlt_vice_versa: boolean
    rlt_order: number
  }

  export type chii_subject_relationsUncheckedCreateInput = {
    rlt_subject_id: number
    rlt_subject_type_id: number
    rlt_relation_type: number
    rlt_related_subject_id: number
    rlt_related_subject_type_id: number
    rlt_vice_versa: boolean
    rlt_order: number
  }

  export type chii_subject_relationsUpdateInput = {
    rlt_subject_id?: IntFieldUpdateOperationsInput | number
    rlt_subject_type_id?: IntFieldUpdateOperationsInput | number
    rlt_relation_type?: IntFieldUpdateOperationsInput | number
    rlt_related_subject_id?: IntFieldUpdateOperationsInput | number
    rlt_related_subject_type_id?: IntFieldUpdateOperationsInput | number
    rlt_vice_versa?: BoolFieldUpdateOperationsInput | boolean
    rlt_order?: IntFieldUpdateOperationsInput | number
  }

  export type chii_subject_relationsUncheckedUpdateInput = {
    rlt_subject_id?: IntFieldUpdateOperationsInput | number
    rlt_subject_type_id?: IntFieldUpdateOperationsInput | number
    rlt_relation_type?: IntFieldUpdateOperationsInput | number
    rlt_related_subject_id?: IntFieldUpdateOperationsInput | number
    rlt_related_subject_type_id?: IntFieldUpdateOperationsInput | number
    rlt_vice_versa?: BoolFieldUpdateOperationsInput | boolean
    rlt_order?: IntFieldUpdateOperationsInput | number
  }

  export type chii_subject_relationsCreateManyInput = {
    rlt_subject_id: number
    rlt_subject_type_id: number
    rlt_relation_type: number
    rlt_related_subject_id: number
    rlt_related_subject_type_id: number
    rlt_vice_versa: boolean
    rlt_order: number
  }

  export type chii_subject_relationsUpdateManyMutationInput = {
    rlt_subject_id?: IntFieldUpdateOperationsInput | number
    rlt_subject_type_id?: IntFieldUpdateOperationsInput | number
    rlt_relation_type?: IntFieldUpdateOperationsInput | number
    rlt_related_subject_id?: IntFieldUpdateOperationsInput | number
    rlt_related_subject_type_id?: IntFieldUpdateOperationsInput | number
    rlt_vice_versa?: BoolFieldUpdateOperationsInput | boolean
    rlt_order?: IntFieldUpdateOperationsInput | number
  }

  export type chii_subject_relationsUncheckedUpdateManyInput = {
    rlt_subject_id?: IntFieldUpdateOperationsInput | number
    rlt_subject_type_id?: IntFieldUpdateOperationsInput | number
    rlt_relation_type?: IntFieldUpdateOperationsInput | number
    rlt_related_subject_id?: IntFieldUpdateOperationsInput | number
    rlt_related_subject_type_id?: IntFieldUpdateOperationsInput | number
    rlt_vice_versa?: BoolFieldUpdateOperationsInput | boolean
    rlt_order?: IntFieldUpdateOperationsInput | number
  }

  export type chii_subject_revisionsCreateInput = {
    rev_type?: number
    rev_subject_id: number
    rev_type_id?: number
    rev_creator: number
    rev_dateline?: number
    rev_name: string
    rev_name_cn: string
    rev_field_infobox: string
    rev_field_summary: string
    rev_vote_field: string
    rev_field_eps: number
    rev_edit_summary: string
    rev_platform: number
  }

  export type chii_subject_revisionsUncheckedCreateInput = {
    rev_id?: number
    rev_type?: number
    rev_subject_id: number
    rev_type_id?: number
    rev_creator: number
    rev_dateline?: number
    rev_name: string
    rev_name_cn: string
    rev_field_infobox: string
    rev_field_summary: string
    rev_vote_field: string
    rev_field_eps: number
    rev_edit_summary: string
    rev_platform: number
  }

  export type chii_subject_revisionsUpdateInput = {
    rev_type?: IntFieldUpdateOperationsInput | number
    rev_subject_id?: IntFieldUpdateOperationsInput | number
    rev_type_id?: IntFieldUpdateOperationsInput | number
    rev_creator?: IntFieldUpdateOperationsInput | number
    rev_dateline?: IntFieldUpdateOperationsInput | number
    rev_name?: StringFieldUpdateOperationsInput | string
    rev_name_cn?: StringFieldUpdateOperationsInput | string
    rev_field_infobox?: StringFieldUpdateOperationsInput | string
    rev_field_summary?: StringFieldUpdateOperationsInput | string
    rev_vote_field?: StringFieldUpdateOperationsInput | string
    rev_field_eps?: IntFieldUpdateOperationsInput | number
    rev_edit_summary?: StringFieldUpdateOperationsInput | string
    rev_platform?: IntFieldUpdateOperationsInput | number
  }

  export type chii_subject_revisionsUncheckedUpdateInput = {
    rev_id?: IntFieldUpdateOperationsInput | number
    rev_type?: IntFieldUpdateOperationsInput | number
    rev_subject_id?: IntFieldUpdateOperationsInput | number
    rev_type_id?: IntFieldUpdateOperationsInput | number
    rev_creator?: IntFieldUpdateOperationsInput | number
    rev_dateline?: IntFieldUpdateOperationsInput | number
    rev_name?: StringFieldUpdateOperationsInput | string
    rev_name_cn?: StringFieldUpdateOperationsInput | string
    rev_field_infobox?: StringFieldUpdateOperationsInput | string
    rev_field_summary?: StringFieldUpdateOperationsInput | string
    rev_vote_field?: StringFieldUpdateOperationsInput | string
    rev_field_eps?: IntFieldUpdateOperationsInput | number
    rev_edit_summary?: StringFieldUpdateOperationsInput | string
    rev_platform?: IntFieldUpdateOperationsInput | number
  }

  export type chii_subject_revisionsCreateManyInput = {
    rev_id?: number
    rev_type?: number
    rev_subject_id: number
    rev_type_id?: number
    rev_creator: number
    rev_dateline?: number
    rev_name: string
    rev_name_cn: string
    rev_field_infobox: string
    rev_field_summary: string
    rev_vote_field: string
    rev_field_eps: number
    rev_edit_summary: string
    rev_platform: number
  }

  export type chii_subject_revisionsUpdateManyMutationInput = {
    rev_type?: IntFieldUpdateOperationsInput | number
    rev_subject_id?: IntFieldUpdateOperationsInput | number
    rev_type_id?: IntFieldUpdateOperationsInput | number
    rev_creator?: IntFieldUpdateOperationsInput | number
    rev_dateline?: IntFieldUpdateOperationsInput | number
    rev_name?: StringFieldUpdateOperationsInput | string
    rev_name_cn?: StringFieldUpdateOperationsInput | string
    rev_field_infobox?: StringFieldUpdateOperationsInput | string
    rev_field_summary?: StringFieldUpdateOperationsInput | string
    rev_vote_field?: StringFieldUpdateOperationsInput | string
    rev_field_eps?: IntFieldUpdateOperationsInput | number
    rev_edit_summary?: StringFieldUpdateOperationsInput | string
    rev_platform?: IntFieldUpdateOperationsInput | number
  }

  export type chii_subject_revisionsUncheckedUpdateManyInput = {
    rev_id?: IntFieldUpdateOperationsInput | number
    rev_type?: IntFieldUpdateOperationsInput | number
    rev_subject_id?: IntFieldUpdateOperationsInput | number
    rev_type_id?: IntFieldUpdateOperationsInput | number
    rev_creator?: IntFieldUpdateOperationsInput | number
    rev_dateline?: IntFieldUpdateOperationsInput | number
    rev_name?: StringFieldUpdateOperationsInput | string
    rev_name_cn?: StringFieldUpdateOperationsInput | string
    rev_field_infobox?: StringFieldUpdateOperationsInput | string
    rev_field_summary?: StringFieldUpdateOperationsInput | string
    rev_vote_field?: StringFieldUpdateOperationsInput | string
    rev_field_eps?: IntFieldUpdateOperationsInput | number
    rev_edit_summary?: StringFieldUpdateOperationsInput | string
    rev_platform?: IntFieldUpdateOperationsInput | number
  }

  export type chii_subject_topicsCreateInput = {
    sbj_tpc_subject_id: number
    sbj_tpc_uid: number
    sbj_tpc_title: string
    sbj_tpc_dateline?: number
    sbj_tpc_lastpost?: number
    sbj_tpc_replies?: number
    sbj_tpc_state: boolean
    sbj_tpc_display?: boolean
  }

  export type chii_subject_topicsUncheckedCreateInput = {
    sbj_tpc_id?: number
    sbj_tpc_subject_id: number
    sbj_tpc_uid: number
    sbj_tpc_title: string
    sbj_tpc_dateline?: number
    sbj_tpc_lastpost?: number
    sbj_tpc_replies?: number
    sbj_tpc_state: boolean
    sbj_tpc_display?: boolean
  }

  export type chii_subject_topicsUpdateInput = {
    sbj_tpc_subject_id?: IntFieldUpdateOperationsInput | number
    sbj_tpc_uid?: IntFieldUpdateOperationsInput | number
    sbj_tpc_title?: StringFieldUpdateOperationsInput | string
    sbj_tpc_dateline?: IntFieldUpdateOperationsInput | number
    sbj_tpc_lastpost?: IntFieldUpdateOperationsInput | number
    sbj_tpc_replies?: IntFieldUpdateOperationsInput | number
    sbj_tpc_state?: BoolFieldUpdateOperationsInput | boolean
    sbj_tpc_display?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_subject_topicsUncheckedUpdateInput = {
    sbj_tpc_id?: IntFieldUpdateOperationsInput | number
    sbj_tpc_subject_id?: IntFieldUpdateOperationsInput | number
    sbj_tpc_uid?: IntFieldUpdateOperationsInput | number
    sbj_tpc_title?: StringFieldUpdateOperationsInput | string
    sbj_tpc_dateline?: IntFieldUpdateOperationsInput | number
    sbj_tpc_lastpost?: IntFieldUpdateOperationsInput | number
    sbj_tpc_replies?: IntFieldUpdateOperationsInput | number
    sbj_tpc_state?: BoolFieldUpdateOperationsInput | boolean
    sbj_tpc_display?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_subject_topicsCreateManyInput = {
    sbj_tpc_id?: number
    sbj_tpc_subject_id: number
    sbj_tpc_uid: number
    sbj_tpc_title: string
    sbj_tpc_dateline?: number
    sbj_tpc_lastpost?: number
    sbj_tpc_replies?: number
    sbj_tpc_state: boolean
    sbj_tpc_display?: boolean
  }

  export type chii_subject_topicsUpdateManyMutationInput = {
    sbj_tpc_subject_id?: IntFieldUpdateOperationsInput | number
    sbj_tpc_uid?: IntFieldUpdateOperationsInput | number
    sbj_tpc_title?: StringFieldUpdateOperationsInput | string
    sbj_tpc_dateline?: IntFieldUpdateOperationsInput | number
    sbj_tpc_lastpost?: IntFieldUpdateOperationsInput | number
    sbj_tpc_replies?: IntFieldUpdateOperationsInput | number
    sbj_tpc_state?: BoolFieldUpdateOperationsInput | boolean
    sbj_tpc_display?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_subject_topicsUncheckedUpdateManyInput = {
    sbj_tpc_id?: IntFieldUpdateOperationsInput | number
    sbj_tpc_subject_id?: IntFieldUpdateOperationsInput | number
    sbj_tpc_uid?: IntFieldUpdateOperationsInput | number
    sbj_tpc_title?: StringFieldUpdateOperationsInput | string
    sbj_tpc_dateline?: IntFieldUpdateOperationsInput | number
    sbj_tpc_lastpost?: IntFieldUpdateOperationsInput | number
    sbj_tpc_replies?: IntFieldUpdateOperationsInput | number
    sbj_tpc_state?: BoolFieldUpdateOperationsInput | boolean
    sbj_tpc_display?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_subjectsCreateInput = {
    subject_type_id?: number
    subject_name: string
    subject_name_cn: string
    subject_uid: string
    subject_creator: number
    subject_dateline?: number
    subject_image: string
    subject_platform?: number
    field_infobox: string
    field_summary: string
    field_5: string
    field_volumes?: number
    field_eps?: number
    subject_wish?: number
    subject_collect?: number
    subject_doing?: number
    subject_on_hold?: number
    subject_dropped?: number
    subject_series?: boolean
    subject_series_entry?: number
    subject_idx_cn: string
    subject_airtime: boolean
    subject_nsfw: boolean
    subject_ban?: boolean
  }

  export type chii_subjectsUncheckedCreateInput = {
    subject_id?: number
    subject_type_id?: number
    subject_name: string
    subject_name_cn: string
    subject_uid: string
    subject_creator: number
    subject_dateline?: number
    subject_image: string
    subject_platform?: number
    field_infobox: string
    field_summary: string
    field_5: string
    field_volumes?: number
    field_eps?: number
    subject_wish?: number
    subject_collect?: number
    subject_doing?: number
    subject_on_hold?: number
    subject_dropped?: number
    subject_series?: boolean
    subject_series_entry?: number
    subject_idx_cn: string
    subject_airtime: boolean
    subject_nsfw: boolean
    subject_ban?: boolean
  }

  export type chii_subjectsUpdateInput = {
    subject_type_id?: IntFieldUpdateOperationsInput | number
    subject_name?: StringFieldUpdateOperationsInput | string
    subject_name_cn?: StringFieldUpdateOperationsInput | string
    subject_uid?: StringFieldUpdateOperationsInput | string
    subject_creator?: IntFieldUpdateOperationsInput | number
    subject_dateline?: IntFieldUpdateOperationsInput | number
    subject_image?: StringFieldUpdateOperationsInput | string
    subject_platform?: IntFieldUpdateOperationsInput | number
    field_infobox?: StringFieldUpdateOperationsInput | string
    field_summary?: StringFieldUpdateOperationsInput | string
    field_5?: StringFieldUpdateOperationsInput | string
    field_volumes?: IntFieldUpdateOperationsInput | number
    field_eps?: IntFieldUpdateOperationsInput | number
    subject_wish?: IntFieldUpdateOperationsInput | number
    subject_collect?: IntFieldUpdateOperationsInput | number
    subject_doing?: IntFieldUpdateOperationsInput | number
    subject_on_hold?: IntFieldUpdateOperationsInput | number
    subject_dropped?: IntFieldUpdateOperationsInput | number
    subject_series?: BoolFieldUpdateOperationsInput | boolean
    subject_series_entry?: IntFieldUpdateOperationsInput | number
    subject_idx_cn?: StringFieldUpdateOperationsInput | string
    subject_airtime?: BoolFieldUpdateOperationsInput | boolean
    subject_nsfw?: BoolFieldUpdateOperationsInput | boolean
    subject_ban?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_subjectsUncheckedUpdateInput = {
    subject_id?: IntFieldUpdateOperationsInput | number
    subject_type_id?: IntFieldUpdateOperationsInput | number
    subject_name?: StringFieldUpdateOperationsInput | string
    subject_name_cn?: StringFieldUpdateOperationsInput | string
    subject_uid?: StringFieldUpdateOperationsInput | string
    subject_creator?: IntFieldUpdateOperationsInput | number
    subject_dateline?: IntFieldUpdateOperationsInput | number
    subject_image?: StringFieldUpdateOperationsInput | string
    subject_platform?: IntFieldUpdateOperationsInput | number
    field_infobox?: StringFieldUpdateOperationsInput | string
    field_summary?: StringFieldUpdateOperationsInput | string
    field_5?: StringFieldUpdateOperationsInput | string
    field_volumes?: IntFieldUpdateOperationsInput | number
    field_eps?: IntFieldUpdateOperationsInput | number
    subject_wish?: IntFieldUpdateOperationsInput | number
    subject_collect?: IntFieldUpdateOperationsInput | number
    subject_doing?: IntFieldUpdateOperationsInput | number
    subject_on_hold?: IntFieldUpdateOperationsInput | number
    subject_dropped?: IntFieldUpdateOperationsInput | number
    subject_series?: BoolFieldUpdateOperationsInput | boolean
    subject_series_entry?: IntFieldUpdateOperationsInput | number
    subject_idx_cn?: StringFieldUpdateOperationsInput | string
    subject_airtime?: BoolFieldUpdateOperationsInput | boolean
    subject_nsfw?: BoolFieldUpdateOperationsInput | boolean
    subject_ban?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_subjectsCreateManyInput = {
    subject_id?: number
    subject_type_id?: number
    subject_name: string
    subject_name_cn: string
    subject_uid: string
    subject_creator: number
    subject_dateline?: number
    subject_image: string
    subject_platform?: number
    field_infobox: string
    field_summary: string
    field_5: string
    field_volumes?: number
    field_eps?: number
    subject_wish?: number
    subject_collect?: number
    subject_doing?: number
    subject_on_hold?: number
    subject_dropped?: number
    subject_series?: boolean
    subject_series_entry?: number
    subject_idx_cn: string
    subject_airtime: boolean
    subject_nsfw: boolean
    subject_ban?: boolean
  }

  export type chii_subjectsUpdateManyMutationInput = {
    subject_type_id?: IntFieldUpdateOperationsInput | number
    subject_name?: StringFieldUpdateOperationsInput | string
    subject_name_cn?: StringFieldUpdateOperationsInput | string
    subject_uid?: StringFieldUpdateOperationsInput | string
    subject_creator?: IntFieldUpdateOperationsInput | number
    subject_dateline?: IntFieldUpdateOperationsInput | number
    subject_image?: StringFieldUpdateOperationsInput | string
    subject_platform?: IntFieldUpdateOperationsInput | number
    field_infobox?: StringFieldUpdateOperationsInput | string
    field_summary?: StringFieldUpdateOperationsInput | string
    field_5?: StringFieldUpdateOperationsInput | string
    field_volumes?: IntFieldUpdateOperationsInput | number
    field_eps?: IntFieldUpdateOperationsInput | number
    subject_wish?: IntFieldUpdateOperationsInput | number
    subject_collect?: IntFieldUpdateOperationsInput | number
    subject_doing?: IntFieldUpdateOperationsInput | number
    subject_on_hold?: IntFieldUpdateOperationsInput | number
    subject_dropped?: IntFieldUpdateOperationsInput | number
    subject_series?: BoolFieldUpdateOperationsInput | boolean
    subject_series_entry?: IntFieldUpdateOperationsInput | number
    subject_idx_cn?: StringFieldUpdateOperationsInput | string
    subject_airtime?: BoolFieldUpdateOperationsInput | boolean
    subject_nsfw?: BoolFieldUpdateOperationsInput | boolean
    subject_ban?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_subjectsUncheckedUpdateManyInput = {
    subject_id?: IntFieldUpdateOperationsInput | number
    subject_type_id?: IntFieldUpdateOperationsInput | number
    subject_name?: StringFieldUpdateOperationsInput | string
    subject_name_cn?: StringFieldUpdateOperationsInput | string
    subject_uid?: StringFieldUpdateOperationsInput | string
    subject_creator?: IntFieldUpdateOperationsInput | number
    subject_dateline?: IntFieldUpdateOperationsInput | number
    subject_image?: StringFieldUpdateOperationsInput | string
    subject_platform?: IntFieldUpdateOperationsInput | number
    field_infobox?: StringFieldUpdateOperationsInput | string
    field_summary?: StringFieldUpdateOperationsInput | string
    field_5?: StringFieldUpdateOperationsInput | string
    field_volumes?: IntFieldUpdateOperationsInput | number
    field_eps?: IntFieldUpdateOperationsInput | number
    subject_wish?: IntFieldUpdateOperationsInput | number
    subject_collect?: IntFieldUpdateOperationsInput | number
    subject_doing?: IntFieldUpdateOperationsInput | number
    subject_on_hold?: IntFieldUpdateOperationsInput | number
    subject_dropped?: IntFieldUpdateOperationsInput | number
    subject_series?: BoolFieldUpdateOperationsInput | boolean
    subject_series_entry?: IntFieldUpdateOperationsInput | number
    subject_idx_cn?: StringFieldUpdateOperationsInput | string
    subject_airtime?: BoolFieldUpdateOperationsInput | boolean
    subject_nsfw?: BoolFieldUpdateOperationsInput | boolean
    subject_ban?: BoolFieldUpdateOperationsInput | boolean
  }

  export type chii_timelineCreateInput = {
    tml_uid?: number
    tml_cat: number
    tml_type?: number
    tml_related?: string
    tml_memo: string
    tml_img: string
    tml_batch: number
    tml_source?: number
    tml_replies: number
    tml_dateline?: number
    tml_status?: number
  }

  export type chii_timelineUncheckedCreateInput = {
    tml_id?: number
    tml_uid?: number
    tml_cat: number
    tml_type?: number
    tml_related?: string
    tml_memo: string
    tml_img: string
    tml_batch: number
    tml_source?: number
    tml_replies: number
    tml_dateline?: number
    tml_status?: number
  }

  export type chii_timelineUpdateInput = {
    tml_uid?: IntFieldUpdateOperationsInput | number
    tml_cat?: IntFieldUpdateOperationsInput | number
    tml_type?: IntFieldUpdateOperationsInput | number
    tml_related?: StringFieldUpdateOperationsInput | string
    tml_memo?: StringFieldUpdateOperationsInput | string
    tml_img?: StringFieldUpdateOperationsInput | string
    tml_batch?: IntFieldUpdateOperationsInput | number
    tml_source?: IntFieldUpdateOperationsInput | number
    tml_replies?: IntFieldUpdateOperationsInput | number
    tml_dateline?: IntFieldUpdateOperationsInput | number
    tml_status?: IntFieldUpdateOperationsInput | number
  }

  export type chii_timelineUncheckedUpdateInput = {
    tml_id?: IntFieldUpdateOperationsInput | number
    tml_uid?: IntFieldUpdateOperationsInput | number
    tml_cat?: IntFieldUpdateOperationsInput | number
    tml_type?: IntFieldUpdateOperationsInput | number
    tml_related?: StringFieldUpdateOperationsInput | string
    tml_memo?: StringFieldUpdateOperationsInput | string
    tml_img?: StringFieldUpdateOperationsInput | string
    tml_batch?: IntFieldUpdateOperationsInput | number
    tml_source?: IntFieldUpdateOperationsInput | number
    tml_replies?: IntFieldUpdateOperationsInput | number
    tml_dateline?: IntFieldUpdateOperationsInput | number
    tml_status?: IntFieldUpdateOperationsInput | number
  }

  export type chii_timelineCreateManyInput = {
    tml_id?: number
    tml_uid?: number
    tml_cat: number
    tml_type?: number
    tml_related?: string
    tml_memo: string
    tml_img: string
    tml_batch: number
    tml_source?: number
    tml_replies: number
    tml_dateline?: number
    tml_status?: number
  }

  export type chii_timelineUpdateManyMutationInput = {
    tml_uid?: IntFieldUpdateOperationsInput | number
    tml_cat?: IntFieldUpdateOperationsInput | number
    tml_type?: IntFieldUpdateOperationsInput | number
    tml_related?: StringFieldUpdateOperationsInput | string
    tml_memo?: StringFieldUpdateOperationsInput | string
    tml_img?: StringFieldUpdateOperationsInput | string
    tml_batch?: IntFieldUpdateOperationsInput | number
    tml_source?: IntFieldUpdateOperationsInput | number
    tml_replies?: IntFieldUpdateOperationsInput | number
    tml_dateline?: IntFieldUpdateOperationsInput | number
    tml_status?: IntFieldUpdateOperationsInput | number
  }

  export type chii_timelineUncheckedUpdateManyInput = {
    tml_id?: IntFieldUpdateOperationsInput | number
    tml_uid?: IntFieldUpdateOperationsInput | number
    tml_cat?: IntFieldUpdateOperationsInput | number
    tml_type?: IntFieldUpdateOperationsInput | number
    tml_related?: StringFieldUpdateOperationsInput | string
    tml_memo?: StringFieldUpdateOperationsInput | string
    tml_img?: StringFieldUpdateOperationsInput | string
    tml_batch?: IntFieldUpdateOperationsInput | number
    tml_source?: IntFieldUpdateOperationsInput | number
    tml_replies?: IntFieldUpdateOperationsInput | number
    tml_dateline?: IntFieldUpdateOperationsInput | number
    tml_status?: IntFieldUpdateOperationsInput | number
  }

  export type chii_usergroupCreateInput = {
    usr_grp_name: string
    usr_grp_perm: string
    usr_grp_dateline: number
  }

  export type chii_usergroupUncheckedCreateInput = {
    usr_grp_id?: number
    usr_grp_name: string
    usr_grp_perm: string
    usr_grp_dateline: number
  }

  export type chii_usergroupUpdateInput = {
    usr_grp_name?: StringFieldUpdateOperationsInput | string
    usr_grp_perm?: StringFieldUpdateOperationsInput | string
    usr_grp_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_usergroupUncheckedUpdateInput = {
    usr_grp_id?: IntFieldUpdateOperationsInput | number
    usr_grp_name?: StringFieldUpdateOperationsInput | string
    usr_grp_perm?: StringFieldUpdateOperationsInput | string
    usr_grp_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_usergroupCreateManyInput = {
    usr_grp_id?: number
    usr_grp_name: string
    usr_grp_perm: string
    usr_grp_dateline: number
  }

  export type chii_usergroupUpdateManyMutationInput = {
    usr_grp_name?: StringFieldUpdateOperationsInput | string
    usr_grp_perm?: StringFieldUpdateOperationsInput | string
    usr_grp_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type chii_usergroupUncheckedUpdateManyInput = {
    usr_grp_id?: IntFieldUpdateOperationsInput | number
    usr_grp_name?: StringFieldUpdateOperationsInput | string
    usr_grp_perm?: StringFieldUpdateOperationsInput | string
    usr_grp_dateline?: IntFieldUpdateOperationsInput | number
  }

  export type exampleCreateInput = {
    time?: Date | string
  }

  export type exampleUncheckedCreateInput = {
    id?: number
    time?: Date | string
  }

  export type exampleUpdateInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type exampleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type exampleCreateManyInput = {
    id?: number
    time?: Date | string
  }

  export type exampleUpdateManyMutationInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type exampleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type chii_appsCountOrderByAggregateInput = {
    app_id?: SortOrder
    app_type?: SortOrder
    app_creator?: SortOrder
    app_name?: SortOrder
    app_desc?: SortOrder
    app_url?: SortOrder
    app_collects?: SortOrder
    app_status?: SortOrder
    app_timestamp?: SortOrder
    app_lasttouch?: SortOrder
    app_ban?: SortOrder
  }

  export type chii_appsAvgOrderByAggregateInput = {
    app_id?: SortOrder
    app_creator?: SortOrder
    app_collects?: SortOrder
    app_timestamp?: SortOrder
    app_lasttouch?: SortOrder
  }

  export type chii_appsMaxOrderByAggregateInput = {
    app_id?: SortOrder
    app_type?: SortOrder
    app_creator?: SortOrder
    app_name?: SortOrder
    app_desc?: SortOrder
    app_url?: SortOrder
    app_collects?: SortOrder
    app_status?: SortOrder
    app_timestamp?: SortOrder
    app_lasttouch?: SortOrder
    app_ban?: SortOrder
  }

  export type chii_appsMinOrderByAggregateInput = {
    app_id?: SortOrder
    app_type?: SortOrder
    app_creator?: SortOrder
    app_name?: SortOrder
    app_desc?: SortOrder
    app_url?: SortOrder
    app_collects?: SortOrder
    app_status?: SortOrder
    app_timestamp?: SortOrder
    app_lasttouch?: SortOrder
    app_ban?: SortOrder
  }

  export type chii_appsSumOrderByAggregateInput = {
    app_id?: SortOrder
    app_creator?: SortOrder
    app_collects?: SortOrder
    app_timestamp?: SortOrder
    app_lasttouch?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type chii_charactersCountOrderByAggregateInput = {
    crt_id?: SortOrder
    crt_name?: SortOrder
    crt_role?: SortOrder
    crt_infobox?: SortOrder
    crt_summary?: SortOrder
    crt_img?: SortOrder
    crt_comment?: SortOrder
    crt_collects?: SortOrder
    crt_dateline?: SortOrder
    crt_lastpost?: SortOrder
    crt_lock?: SortOrder
    crt_img_anidb?: SortOrder
    crt_anidb_id?: SortOrder
    crt_ban?: SortOrder
    crt_redirect?: SortOrder
    crt_nsfw?: SortOrder
  }

  export type chii_charactersAvgOrderByAggregateInput = {
    crt_id?: SortOrder
    crt_role?: SortOrder
    crt_comment?: SortOrder
    crt_collects?: SortOrder
    crt_dateline?: SortOrder
    crt_lastpost?: SortOrder
    crt_lock?: SortOrder
    crt_anidb_id?: SortOrder
    crt_ban?: SortOrder
    crt_redirect?: SortOrder
  }

  export type chii_charactersMaxOrderByAggregateInput = {
    crt_id?: SortOrder
    crt_name?: SortOrder
    crt_role?: SortOrder
    crt_infobox?: SortOrder
    crt_summary?: SortOrder
    crt_img?: SortOrder
    crt_comment?: SortOrder
    crt_collects?: SortOrder
    crt_dateline?: SortOrder
    crt_lastpost?: SortOrder
    crt_lock?: SortOrder
    crt_img_anidb?: SortOrder
    crt_anidb_id?: SortOrder
    crt_ban?: SortOrder
    crt_redirect?: SortOrder
    crt_nsfw?: SortOrder
  }

  export type chii_charactersMinOrderByAggregateInput = {
    crt_id?: SortOrder
    crt_name?: SortOrder
    crt_role?: SortOrder
    crt_infobox?: SortOrder
    crt_summary?: SortOrder
    crt_img?: SortOrder
    crt_comment?: SortOrder
    crt_collects?: SortOrder
    crt_dateline?: SortOrder
    crt_lastpost?: SortOrder
    crt_lock?: SortOrder
    crt_img_anidb?: SortOrder
    crt_anidb_id?: SortOrder
    crt_ban?: SortOrder
    crt_redirect?: SortOrder
    crt_nsfw?: SortOrder
  }

  export type chii_charactersSumOrderByAggregateInput = {
    crt_id?: SortOrder
    crt_role?: SortOrder
    crt_comment?: SortOrder
    crt_collects?: SortOrder
    crt_dateline?: SortOrder
    crt_lastpost?: SortOrder
    crt_lock?: SortOrder
    crt_anidb_id?: SortOrder
    crt_ban?: SortOrder
    crt_redirect?: SortOrder
  }

  export type chii_crt_cast_indexCrt_idPrsn_idSubject_idCompoundUniqueInput = {
    crt_id: number
    prsn_id: number
    subject_id: number
  }

  export type chii_crt_cast_indexCountOrderByAggregateInput = {
    crt_id?: SortOrder
    prsn_id?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    summary?: SortOrder
  }

  export type chii_crt_cast_indexAvgOrderByAggregateInput = {
    crt_id?: SortOrder
    prsn_id?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
  }

  export type chii_crt_cast_indexMaxOrderByAggregateInput = {
    crt_id?: SortOrder
    prsn_id?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    summary?: SortOrder
  }

  export type chii_crt_cast_indexMinOrderByAggregateInput = {
    crt_id?: SortOrder
    prsn_id?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    summary?: SortOrder
  }

  export type chii_crt_cast_indexSumOrderByAggregateInput = {
    crt_id?: SortOrder
    prsn_id?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
  }

  export type chii_crt_commentsCountOrderByAggregateInput = {
    crt_pst_id?: SortOrder
    crt_pst_mid?: SortOrder
    crt_pst_uid?: SortOrder
    crt_pst_related?: SortOrder
    crt_pst_dateline?: SortOrder
    crt_pst_content?: SortOrder
  }

  export type chii_crt_commentsAvgOrderByAggregateInput = {
    crt_pst_id?: SortOrder
    crt_pst_mid?: SortOrder
    crt_pst_uid?: SortOrder
    crt_pst_related?: SortOrder
    crt_pst_dateline?: SortOrder
  }

  export type chii_crt_commentsMaxOrderByAggregateInput = {
    crt_pst_id?: SortOrder
    crt_pst_mid?: SortOrder
    crt_pst_uid?: SortOrder
    crt_pst_related?: SortOrder
    crt_pst_dateline?: SortOrder
    crt_pst_content?: SortOrder
  }

  export type chii_crt_commentsMinOrderByAggregateInput = {
    crt_pst_id?: SortOrder
    crt_pst_mid?: SortOrder
    crt_pst_uid?: SortOrder
    crt_pst_related?: SortOrder
    crt_pst_dateline?: SortOrder
    crt_pst_content?: SortOrder
  }

  export type chii_crt_commentsSumOrderByAggregateInput = {
    crt_pst_id?: SortOrder
    crt_pst_mid?: SortOrder
    crt_pst_uid?: SortOrder
    crt_pst_related?: SortOrder
    crt_pst_dateline?: SortOrder
  }

  export type chii_crt_subject_indexCrt_idSubject_idCompoundUniqueInput = {
    crt_id: number
    subject_id: number
  }

  export type chii_crt_subject_indexCountOrderByAggregateInput = {
    crt_id?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    crt_type?: SortOrder
    ctr_appear_eps?: SortOrder
    crt_order?: SortOrder
  }

  export type chii_crt_subject_indexAvgOrderByAggregateInput = {
    crt_id?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    crt_type?: SortOrder
    crt_order?: SortOrder
  }

  export type chii_crt_subject_indexMaxOrderByAggregateInput = {
    crt_id?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    crt_type?: SortOrder
    ctr_appear_eps?: SortOrder
    crt_order?: SortOrder
  }

  export type chii_crt_subject_indexMinOrderByAggregateInput = {
    crt_id?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    crt_type?: SortOrder
    ctr_appear_eps?: SortOrder
    crt_order?: SortOrder
  }

  export type chii_crt_subject_indexSumOrderByAggregateInput = {
    crt_id?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    crt_type?: SortOrder
    crt_order?: SortOrder
  }

  export type chii_ep_commentsCountOrderByAggregateInput = {
    ep_pst_id?: SortOrder
    ep_pst_mid?: SortOrder
    ep_pst_uid?: SortOrder
    ep_pst_related?: SortOrder
    ep_pst_dateline?: SortOrder
    ep_pst_content?: SortOrder
  }

  export type chii_ep_commentsAvgOrderByAggregateInput = {
    ep_pst_id?: SortOrder
    ep_pst_mid?: SortOrder
    ep_pst_uid?: SortOrder
    ep_pst_related?: SortOrder
    ep_pst_dateline?: SortOrder
  }

  export type chii_ep_commentsMaxOrderByAggregateInput = {
    ep_pst_id?: SortOrder
    ep_pst_mid?: SortOrder
    ep_pst_uid?: SortOrder
    ep_pst_related?: SortOrder
    ep_pst_dateline?: SortOrder
    ep_pst_content?: SortOrder
  }

  export type chii_ep_commentsMinOrderByAggregateInput = {
    ep_pst_id?: SortOrder
    ep_pst_mid?: SortOrder
    ep_pst_uid?: SortOrder
    ep_pst_related?: SortOrder
    ep_pst_dateline?: SortOrder
    ep_pst_content?: SortOrder
  }

  export type chii_ep_commentsSumOrderByAggregateInput = {
    ep_pst_id?: SortOrder
    ep_pst_mid?: SortOrder
    ep_pst_uid?: SortOrder
    ep_pst_related?: SortOrder
    ep_pst_dateline?: SortOrder
  }

  export type chii_ep_revisionsCountOrderByAggregateInput = {
    ep_rev_id?: SortOrder
    rev_sid?: SortOrder
    rev_eids?: SortOrder
    rev_ep_infobox?: SortOrder
    rev_creator?: SortOrder
    rev_version?: SortOrder
    rev_dateline?: SortOrder
    rev_edit_summary?: SortOrder
  }

  export type chii_ep_revisionsAvgOrderByAggregateInput = {
    ep_rev_id?: SortOrder
    rev_sid?: SortOrder
    rev_creator?: SortOrder
    rev_dateline?: SortOrder
  }

  export type chii_ep_revisionsMaxOrderByAggregateInput = {
    ep_rev_id?: SortOrder
    rev_sid?: SortOrder
    rev_eids?: SortOrder
    rev_ep_infobox?: SortOrder
    rev_creator?: SortOrder
    rev_version?: SortOrder
    rev_dateline?: SortOrder
    rev_edit_summary?: SortOrder
  }

  export type chii_ep_revisionsMinOrderByAggregateInput = {
    ep_rev_id?: SortOrder
    rev_sid?: SortOrder
    rev_eids?: SortOrder
    rev_ep_infobox?: SortOrder
    rev_creator?: SortOrder
    rev_version?: SortOrder
    rev_dateline?: SortOrder
    rev_edit_summary?: SortOrder
  }

  export type chii_ep_revisionsSumOrderByAggregateInput = {
    ep_rev_id?: SortOrder
    rev_sid?: SortOrder
    rev_creator?: SortOrder
    rev_dateline?: SortOrder
  }

  export type chii_ep_statusEp_stt_uidEp_stt_sidCompoundUniqueInput = {
    ep_stt_uid: number
    ep_stt_sid: number
  }

  export type chii_ep_statusCountOrderByAggregateInput = {
    ep_stt_id?: SortOrder
    ep_stt_uid?: SortOrder
    ep_stt_sid?: SortOrder
    ep_stt_on_prg?: SortOrder
    ep_stt_status?: SortOrder
    ep_stt_lasttouch?: SortOrder
  }

  export type chii_ep_statusAvgOrderByAggregateInput = {
    ep_stt_id?: SortOrder
    ep_stt_uid?: SortOrder
    ep_stt_sid?: SortOrder
    ep_stt_lasttouch?: SortOrder
  }

  export type chii_ep_statusMaxOrderByAggregateInput = {
    ep_stt_id?: SortOrder
    ep_stt_uid?: SortOrder
    ep_stt_sid?: SortOrder
    ep_stt_on_prg?: SortOrder
    ep_stt_status?: SortOrder
    ep_stt_lasttouch?: SortOrder
  }

  export type chii_ep_statusMinOrderByAggregateInput = {
    ep_stt_id?: SortOrder
    ep_stt_uid?: SortOrder
    ep_stt_sid?: SortOrder
    ep_stt_on_prg?: SortOrder
    ep_stt_status?: SortOrder
    ep_stt_lasttouch?: SortOrder
  }

  export type chii_ep_statusSumOrderByAggregateInput = {
    ep_stt_id?: SortOrder
    ep_stt_uid?: SortOrder
    ep_stt_sid?: SortOrder
    ep_stt_lasttouch?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type chii_episodesCountOrderByAggregateInput = {
    ep_id?: SortOrder
    ep_subject_id?: SortOrder
    ep_sort?: SortOrder
    ep_type?: SortOrder
    ep_disc?: SortOrder
    ep_name?: SortOrder
    ep_name_cn?: SortOrder
    ep_rate?: SortOrder
    ep_duration?: SortOrder
    ep_airdate?: SortOrder
    ep_online?: SortOrder
    ep_comment?: SortOrder
    ep_resources?: SortOrder
    ep_desc?: SortOrder
    ep_dateline?: SortOrder
    ep_lastpost?: SortOrder
    ep_lock?: SortOrder
    ep_ban?: SortOrder
  }

  export type chii_episodesAvgOrderByAggregateInput = {
    ep_id?: SortOrder
    ep_subject_id?: SortOrder
    ep_sort?: SortOrder
    ep_type?: SortOrder
    ep_disc?: SortOrder
    ep_rate?: SortOrder
    ep_comment?: SortOrder
    ep_resources?: SortOrder
    ep_dateline?: SortOrder
    ep_lastpost?: SortOrder
    ep_lock?: SortOrder
    ep_ban?: SortOrder
  }

  export type chii_episodesMaxOrderByAggregateInput = {
    ep_id?: SortOrder
    ep_subject_id?: SortOrder
    ep_sort?: SortOrder
    ep_type?: SortOrder
    ep_disc?: SortOrder
    ep_name?: SortOrder
    ep_name_cn?: SortOrder
    ep_rate?: SortOrder
    ep_duration?: SortOrder
    ep_airdate?: SortOrder
    ep_online?: SortOrder
    ep_comment?: SortOrder
    ep_resources?: SortOrder
    ep_desc?: SortOrder
    ep_dateline?: SortOrder
    ep_lastpost?: SortOrder
    ep_lock?: SortOrder
    ep_ban?: SortOrder
  }

  export type chii_episodesMinOrderByAggregateInput = {
    ep_id?: SortOrder
    ep_subject_id?: SortOrder
    ep_sort?: SortOrder
    ep_type?: SortOrder
    ep_disc?: SortOrder
    ep_name?: SortOrder
    ep_name_cn?: SortOrder
    ep_rate?: SortOrder
    ep_duration?: SortOrder
    ep_airdate?: SortOrder
    ep_online?: SortOrder
    ep_comment?: SortOrder
    ep_resources?: SortOrder
    ep_desc?: SortOrder
    ep_dateline?: SortOrder
    ep_lastpost?: SortOrder
    ep_lock?: SortOrder
    ep_ban?: SortOrder
  }

  export type chii_episodesSumOrderByAggregateInput = {
    ep_id?: SortOrder
    ep_subject_id?: SortOrder
    ep_sort?: SortOrder
    ep_type?: SortOrder
    ep_disc?: SortOrder
    ep_rate?: SortOrder
    ep_comment?: SortOrder
    ep_resources?: SortOrder
    ep_dateline?: SortOrder
    ep_lastpost?: SortOrder
    ep_lock?: SortOrder
    ep_ban?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type chii_group_membersGmb_uidGmb_gidCompoundUniqueInput = {
    gmb_uid: number
    gmb_gid: number
  }

  export type chii_group_membersCountOrderByAggregateInput = {
    gmb_uid?: SortOrder
    gmb_gid?: SortOrder
    gmb_moderator?: SortOrder
    gmb_dateline?: SortOrder
  }

  export type chii_group_membersAvgOrderByAggregateInput = {
    gmb_uid?: SortOrder
    gmb_gid?: SortOrder
    gmb_dateline?: SortOrder
  }

  export type chii_group_membersMaxOrderByAggregateInput = {
    gmb_uid?: SortOrder
    gmb_gid?: SortOrder
    gmb_moderator?: SortOrder
    gmb_dateline?: SortOrder
  }

  export type chii_group_membersMinOrderByAggregateInput = {
    gmb_uid?: SortOrder
    gmb_gid?: SortOrder
    gmb_moderator?: SortOrder
    gmb_dateline?: SortOrder
  }

  export type chii_group_membersSumOrderByAggregateInput = {
    gmb_uid?: SortOrder
    gmb_gid?: SortOrder
    gmb_dateline?: SortOrder
  }

  export type chii_group_postsCountOrderByAggregateInput = {
    grp_pst_id?: SortOrder
    grp_pst_mid?: SortOrder
    grp_pst_uid?: SortOrder
    grp_pst_related?: SortOrder
    grp_pst_content?: SortOrder
    grp_pst_state?: SortOrder
    grp_pst_dateline?: SortOrder
  }

  export type chii_group_postsAvgOrderByAggregateInput = {
    grp_pst_id?: SortOrder
    grp_pst_mid?: SortOrder
    grp_pst_uid?: SortOrder
    grp_pst_related?: SortOrder
    grp_pst_dateline?: SortOrder
  }

  export type chii_group_postsMaxOrderByAggregateInput = {
    grp_pst_id?: SortOrder
    grp_pst_mid?: SortOrder
    grp_pst_uid?: SortOrder
    grp_pst_related?: SortOrder
    grp_pst_content?: SortOrder
    grp_pst_state?: SortOrder
    grp_pst_dateline?: SortOrder
  }

  export type chii_group_postsMinOrderByAggregateInput = {
    grp_pst_id?: SortOrder
    grp_pst_mid?: SortOrder
    grp_pst_uid?: SortOrder
    grp_pst_related?: SortOrder
    grp_pst_content?: SortOrder
    grp_pst_state?: SortOrder
    grp_pst_dateline?: SortOrder
  }

  export type chii_group_postsSumOrderByAggregateInput = {
    grp_pst_id?: SortOrder
    grp_pst_mid?: SortOrder
    grp_pst_uid?: SortOrder
    grp_pst_related?: SortOrder
    grp_pst_dateline?: SortOrder
  }

  export type chii_group_topicsCountOrderByAggregateInput = {
    grp_tpc_id?: SortOrder
    grp_tpc_gid?: SortOrder
    grp_tpc_uid?: SortOrder
    grp_tpc_title?: SortOrder
    grp_tpc_dateline?: SortOrder
    grp_tpc_lastpost?: SortOrder
    grp_tpc_replies?: SortOrder
    grp_tpc_state?: SortOrder
    grp_tpc_display?: SortOrder
  }

  export type chii_group_topicsAvgOrderByAggregateInput = {
    grp_tpc_id?: SortOrder
    grp_tpc_gid?: SortOrder
    grp_tpc_uid?: SortOrder
    grp_tpc_dateline?: SortOrder
    grp_tpc_lastpost?: SortOrder
    grp_tpc_replies?: SortOrder
  }

  export type chii_group_topicsMaxOrderByAggregateInput = {
    grp_tpc_id?: SortOrder
    grp_tpc_gid?: SortOrder
    grp_tpc_uid?: SortOrder
    grp_tpc_title?: SortOrder
    grp_tpc_dateline?: SortOrder
    grp_tpc_lastpost?: SortOrder
    grp_tpc_replies?: SortOrder
    grp_tpc_state?: SortOrder
    grp_tpc_display?: SortOrder
  }

  export type chii_group_topicsMinOrderByAggregateInput = {
    grp_tpc_id?: SortOrder
    grp_tpc_gid?: SortOrder
    grp_tpc_uid?: SortOrder
    grp_tpc_title?: SortOrder
    grp_tpc_dateline?: SortOrder
    grp_tpc_lastpost?: SortOrder
    grp_tpc_replies?: SortOrder
    grp_tpc_state?: SortOrder
    grp_tpc_display?: SortOrder
  }

  export type chii_group_topicsSumOrderByAggregateInput = {
    grp_tpc_id?: SortOrder
    grp_tpc_gid?: SortOrder
    grp_tpc_uid?: SortOrder
    grp_tpc_dateline?: SortOrder
    grp_tpc_lastpost?: SortOrder
    grp_tpc_replies?: SortOrder
  }

  export type chii_groupsCountOrderByAggregateInput = {
    grp_id?: SortOrder
    grp_cat?: SortOrder
    grp_name?: SortOrder
    grp_title?: SortOrder
    grp_icon?: SortOrder
    grp_creator?: SortOrder
    grp_topics?: SortOrder
    grp_posts?: SortOrder
    grp_members?: SortOrder
    grp_desc?: SortOrder
    grp_lastpost?: SortOrder
    grp_builddate?: SortOrder
    grp_accessible?: SortOrder
    grp_nsfw?: SortOrder
  }

  export type chii_groupsAvgOrderByAggregateInput = {
    grp_id?: SortOrder
    grp_cat?: SortOrder
    grp_creator?: SortOrder
    grp_topics?: SortOrder
    grp_posts?: SortOrder
    grp_members?: SortOrder
    grp_lastpost?: SortOrder
    grp_builddate?: SortOrder
  }

  export type chii_groupsMaxOrderByAggregateInput = {
    grp_id?: SortOrder
    grp_cat?: SortOrder
    grp_name?: SortOrder
    grp_title?: SortOrder
    grp_icon?: SortOrder
    grp_creator?: SortOrder
    grp_topics?: SortOrder
    grp_posts?: SortOrder
    grp_members?: SortOrder
    grp_desc?: SortOrder
    grp_lastpost?: SortOrder
    grp_builddate?: SortOrder
    grp_accessible?: SortOrder
    grp_nsfw?: SortOrder
  }

  export type chii_groupsMinOrderByAggregateInput = {
    grp_id?: SortOrder
    grp_cat?: SortOrder
    grp_name?: SortOrder
    grp_title?: SortOrder
    grp_icon?: SortOrder
    grp_creator?: SortOrder
    grp_topics?: SortOrder
    grp_posts?: SortOrder
    grp_members?: SortOrder
    grp_desc?: SortOrder
    grp_lastpost?: SortOrder
    grp_builddate?: SortOrder
    grp_accessible?: SortOrder
    grp_nsfw?: SortOrder
  }

  export type chii_groupsSumOrderByAggregateInput = {
    grp_id?: SortOrder
    grp_cat?: SortOrder
    grp_creator?: SortOrder
    grp_topics?: SortOrder
    grp_posts?: SortOrder
    grp_members?: SortOrder
    grp_lastpost?: SortOrder
    grp_builddate?: SortOrder
  }

  export type chii_indexCountOrderByAggregateInput = {
    idx_id?: SortOrder
    idx_type?: SortOrder
    idx_title?: SortOrder
    idx_desc?: SortOrder
    idx_replies?: SortOrder
    idx_subject_total?: SortOrder
    idx_collects?: SortOrder
    idx_stats?: SortOrder
    idx_dateline?: SortOrder
    idx_lasttouch?: SortOrder
    idx_uid?: SortOrder
    idx_ban?: SortOrder
  }

  export type chii_indexAvgOrderByAggregateInput = {
    idx_id?: SortOrder
    idx_type?: SortOrder
    idx_replies?: SortOrder
    idx_subject_total?: SortOrder
    idx_collects?: SortOrder
    idx_dateline?: SortOrder
    idx_lasttouch?: SortOrder
    idx_uid?: SortOrder
  }

  export type chii_indexMaxOrderByAggregateInput = {
    idx_id?: SortOrder
    idx_type?: SortOrder
    idx_title?: SortOrder
    idx_desc?: SortOrder
    idx_replies?: SortOrder
    idx_subject_total?: SortOrder
    idx_collects?: SortOrder
    idx_stats?: SortOrder
    idx_dateline?: SortOrder
    idx_lasttouch?: SortOrder
    idx_uid?: SortOrder
    idx_ban?: SortOrder
  }

  export type chii_indexMinOrderByAggregateInput = {
    idx_id?: SortOrder
    idx_type?: SortOrder
    idx_title?: SortOrder
    idx_desc?: SortOrder
    idx_replies?: SortOrder
    idx_subject_total?: SortOrder
    idx_collects?: SortOrder
    idx_stats?: SortOrder
    idx_dateline?: SortOrder
    idx_lasttouch?: SortOrder
    idx_uid?: SortOrder
    idx_ban?: SortOrder
  }

  export type chii_indexSumOrderByAggregateInput = {
    idx_id?: SortOrder
    idx_type?: SortOrder
    idx_replies?: SortOrder
    idx_subject_total?: SortOrder
    idx_collects?: SortOrder
    idx_dateline?: SortOrder
    idx_lasttouch?: SortOrder
    idx_uid?: SortOrder
  }

  export type chii_index_collectsCountOrderByAggregateInput = {
    idx_clt_id?: SortOrder
    idx_clt_mid?: SortOrder
    idx_clt_uid?: SortOrder
    idx_clt_dateline?: SortOrder
  }

  export type chii_index_collectsAvgOrderByAggregateInput = {
    idx_clt_id?: SortOrder
    idx_clt_mid?: SortOrder
    idx_clt_uid?: SortOrder
    idx_clt_dateline?: SortOrder
  }

  export type chii_index_collectsMaxOrderByAggregateInput = {
    idx_clt_id?: SortOrder
    idx_clt_mid?: SortOrder
    idx_clt_uid?: SortOrder
    idx_clt_dateline?: SortOrder
  }

  export type chii_index_collectsMinOrderByAggregateInput = {
    idx_clt_id?: SortOrder
    idx_clt_mid?: SortOrder
    idx_clt_uid?: SortOrder
    idx_clt_dateline?: SortOrder
  }

  export type chii_index_collectsSumOrderByAggregateInput = {
    idx_clt_id?: SortOrder
    idx_clt_mid?: SortOrder
    idx_clt_uid?: SortOrder
    idx_clt_dateline?: SortOrder
  }

  export type chii_index_commentsCountOrderByAggregateInput = {
    idx_pst_id?: SortOrder
    idx_pst_mid?: SortOrder
    idx_pst_uid?: SortOrder
    idx_pst_related?: SortOrder
    idx_pst_dateline?: SortOrder
    idx_pst_content?: SortOrder
  }

  export type chii_index_commentsAvgOrderByAggregateInput = {
    idx_pst_id?: SortOrder
    idx_pst_mid?: SortOrder
    idx_pst_uid?: SortOrder
    idx_pst_related?: SortOrder
    idx_pst_dateline?: SortOrder
  }

  export type chii_index_commentsMaxOrderByAggregateInput = {
    idx_pst_id?: SortOrder
    idx_pst_mid?: SortOrder
    idx_pst_uid?: SortOrder
    idx_pst_related?: SortOrder
    idx_pst_dateline?: SortOrder
    idx_pst_content?: SortOrder
  }

  export type chii_index_commentsMinOrderByAggregateInput = {
    idx_pst_id?: SortOrder
    idx_pst_mid?: SortOrder
    idx_pst_uid?: SortOrder
    idx_pst_related?: SortOrder
    idx_pst_dateline?: SortOrder
    idx_pst_content?: SortOrder
  }

  export type chii_index_commentsSumOrderByAggregateInput = {
    idx_pst_id?: SortOrder
    idx_pst_mid?: SortOrder
    idx_pst_uid?: SortOrder
    idx_pst_related?: SortOrder
    idx_pst_dateline?: SortOrder
  }

  export type chii_index_relatedCountOrderByAggregateInput = {
    idx_rlt_id?: SortOrder
    idx_rlt_cat?: SortOrder
    idx_rlt_rid?: SortOrder
    idx_rlt_type?: SortOrder
    idx_rlt_sid?: SortOrder
    idx_rlt_order?: SortOrder
    idx_rlt_comment?: SortOrder
    idx_rlt_dateline?: SortOrder
  }

  export type chii_index_relatedAvgOrderByAggregateInput = {
    idx_rlt_id?: SortOrder
    idx_rlt_cat?: SortOrder
    idx_rlt_rid?: SortOrder
    idx_rlt_type?: SortOrder
    idx_rlt_sid?: SortOrder
    idx_rlt_order?: SortOrder
    idx_rlt_dateline?: SortOrder
  }

  export type chii_index_relatedMaxOrderByAggregateInput = {
    idx_rlt_id?: SortOrder
    idx_rlt_cat?: SortOrder
    idx_rlt_rid?: SortOrder
    idx_rlt_type?: SortOrder
    idx_rlt_sid?: SortOrder
    idx_rlt_order?: SortOrder
    idx_rlt_comment?: SortOrder
    idx_rlt_dateline?: SortOrder
  }

  export type chii_index_relatedMinOrderByAggregateInput = {
    idx_rlt_id?: SortOrder
    idx_rlt_cat?: SortOrder
    idx_rlt_rid?: SortOrder
    idx_rlt_type?: SortOrder
    idx_rlt_sid?: SortOrder
    idx_rlt_order?: SortOrder
    idx_rlt_comment?: SortOrder
    idx_rlt_dateline?: SortOrder
  }

  export type chii_index_relatedSumOrderByAggregateInput = {
    idx_rlt_id?: SortOrder
    idx_rlt_cat?: SortOrder
    idx_rlt_rid?: SortOrder
    idx_rlt_type?: SortOrder
    idx_rlt_sid?: SortOrder
    idx_rlt_order?: SortOrder
    idx_rlt_dateline?: SortOrder
  }

  export type chii_memberfieldsCountOrderByAggregateInput = {
    uid?: SortOrder
    site?: SortOrder
    location?: SortOrder
    bio?: SortOrder
    privacy?: SortOrder
    blocklist?: SortOrder
  }

  export type chii_memberfieldsAvgOrderByAggregateInput = {
    uid?: SortOrder
  }

  export type chii_memberfieldsMaxOrderByAggregateInput = {
    uid?: SortOrder
    site?: SortOrder
    location?: SortOrder
    bio?: SortOrder
    privacy?: SortOrder
    blocklist?: SortOrder
  }

  export type chii_memberfieldsMinOrderByAggregateInput = {
    uid?: SortOrder
    site?: SortOrder
    location?: SortOrder
    bio?: SortOrder
    privacy?: SortOrder
    blocklist?: SortOrder
  }

  export type chii_memberfieldsSumOrderByAggregateInput = {
    uid?: SortOrder
  }

  export type chii_membersCountOrderByAggregateInput = {
    uid?: SortOrder
    username?: SortOrder
    nickname?: SortOrder
    avatar?: SortOrder
    groupid?: SortOrder
    regdate?: SortOrder
    lastvisit?: SortOrder
    lastactivity?: SortOrder
    lastpost?: SortOrder
    dateformat?: SortOrder
    timeformat?: SortOrder
    timeoffset?: SortOrder
    newpm?: SortOrder
    new_notify?: SortOrder
    sign?: SortOrder
    password_crypt?: SortOrder
    email?: SortOrder
  }

  export type chii_membersAvgOrderByAggregateInput = {
    uid?: SortOrder
    groupid?: SortOrder
    regdate?: SortOrder
    lastvisit?: SortOrder
    lastactivity?: SortOrder
    lastpost?: SortOrder
    new_notify?: SortOrder
  }

  export type chii_membersMaxOrderByAggregateInput = {
    uid?: SortOrder
    username?: SortOrder
    nickname?: SortOrder
    avatar?: SortOrder
    groupid?: SortOrder
    regdate?: SortOrder
    lastvisit?: SortOrder
    lastactivity?: SortOrder
    lastpost?: SortOrder
    dateformat?: SortOrder
    timeformat?: SortOrder
    timeoffset?: SortOrder
    newpm?: SortOrder
    new_notify?: SortOrder
    sign?: SortOrder
    password_crypt?: SortOrder
    email?: SortOrder
  }

  export type chii_membersMinOrderByAggregateInput = {
    uid?: SortOrder
    username?: SortOrder
    nickname?: SortOrder
    avatar?: SortOrder
    groupid?: SortOrder
    regdate?: SortOrder
    lastvisit?: SortOrder
    lastactivity?: SortOrder
    lastpost?: SortOrder
    dateformat?: SortOrder
    timeformat?: SortOrder
    timeoffset?: SortOrder
    newpm?: SortOrder
    new_notify?: SortOrder
    sign?: SortOrder
    password_crypt?: SortOrder
    email?: SortOrder
  }

  export type chii_membersSumOrderByAggregateInput = {
    uid?: SortOrder
    groupid?: SortOrder
    regdate?: SortOrder
    lastvisit?: SortOrder
    lastactivity?: SortOrder
    lastpost?: SortOrder
    new_notify?: SortOrder
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type chii_oauth_access_tokensCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    access_token?: SortOrder
    client_id?: SortOrder
    user_id?: SortOrder
    expires?: SortOrder
    scope?: SortOrder
    info?: SortOrder
  }

  export type chii_oauth_access_tokensAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type chii_oauth_access_tokensMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    access_token?: SortOrder
    client_id?: SortOrder
    user_id?: SortOrder
    expires?: SortOrder
    scope?: SortOrder
    info?: SortOrder
  }

  export type chii_oauth_access_tokensMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    access_token?: SortOrder
    client_id?: SortOrder
    user_id?: SortOrder
    expires?: SortOrder
    scope?: SortOrder
    info?: SortOrder
  }

  export type chii_oauth_access_tokensSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type chii_oauth_clientsCountOrderByAggregateInput = {
    app_id?: SortOrder
    client_id?: SortOrder
    client_secret?: SortOrder
    redirect_uri?: SortOrder
    grant_types?: SortOrder
    scope?: SortOrder
    user_id?: SortOrder
  }

  export type chii_oauth_clientsAvgOrderByAggregateInput = {
    app_id?: SortOrder
  }

  export type chii_oauth_clientsMaxOrderByAggregateInput = {
    app_id?: SortOrder
    client_id?: SortOrder
    client_secret?: SortOrder
    redirect_uri?: SortOrder
    grant_types?: SortOrder
    scope?: SortOrder
    user_id?: SortOrder
  }

  export type chii_oauth_clientsMinOrderByAggregateInput = {
    app_id?: SortOrder
    client_id?: SortOrder
    client_secret?: SortOrder
    redirect_uri?: SortOrder
    grant_types?: SortOrder
    scope?: SortOrder
    user_id?: SortOrder
  }

  export type chii_oauth_clientsSumOrderByAggregateInput = {
    app_id?: SortOrder
  }

  export type BytesFilter = {
    equals?: Buffer
    in?: Enumerable<Buffer>
    notIn?: Enumerable<Buffer>
    not?: NestedBytesFilter | Buffer
  }

  export type BigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type chii_os_web_sessionsCountOrderByAggregateInput = {
    key?: SortOrder
    user_id?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    expired_at?: SortOrder
  }

  export type chii_os_web_sessionsAvgOrderByAggregateInput = {
    user_id?: SortOrder
    created_at?: SortOrder
    expired_at?: SortOrder
  }

  export type chii_os_web_sessionsMaxOrderByAggregateInput = {
    key?: SortOrder
    user_id?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    expired_at?: SortOrder
  }

  export type chii_os_web_sessionsMinOrderByAggregateInput = {
    key?: SortOrder
    user_id?: SortOrder
    value?: SortOrder
    created_at?: SortOrder
    expired_at?: SortOrder
  }

  export type chii_os_web_sessionsSumOrderByAggregateInput = {
    user_id?: SortOrder
    created_at?: SortOrder
    expired_at?: SortOrder
  }

  export type BytesWithAggregatesFilter = {
    equals?: Buffer
    in?: Enumerable<Buffer>
    notIn?: Enumerable<Buffer>
    not?: NestedBytesWithAggregatesFilter | Buffer
    _count?: NestedIntFilter
    _min?: NestedBytesFilter
    _max?: NestedBytesFilter
  }

  export type BigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type Enumchii_person_collects_prsn_clt_catFilter = {
    equals?: chii_person_collects_prsn_clt_cat
    in?: Enumerable<chii_person_collects_prsn_clt_cat>
    notIn?: Enumerable<chii_person_collects_prsn_clt_cat>
    not?: NestedEnumchii_person_collects_prsn_clt_catFilter | chii_person_collects_prsn_clt_cat
  }

  export type chii_person_collectsCountOrderByAggregateInput = {
    prsn_clt_id?: SortOrder
    prsn_clt_cat?: SortOrder
    prsn_clt_mid?: SortOrder
    prsn_clt_uid?: SortOrder
    prsn_clt_dateline?: SortOrder
  }

  export type chii_person_collectsAvgOrderByAggregateInput = {
    prsn_clt_id?: SortOrder
    prsn_clt_mid?: SortOrder
    prsn_clt_uid?: SortOrder
    prsn_clt_dateline?: SortOrder
  }

  export type chii_person_collectsMaxOrderByAggregateInput = {
    prsn_clt_id?: SortOrder
    prsn_clt_cat?: SortOrder
    prsn_clt_mid?: SortOrder
    prsn_clt_uid?: SortOrder
    prsn_clt_dateline?: SortOrder
  }

  export type chii_person_collectsMinOrderByAggregateInput = {
    prsn_clt_id?: SortOrder
    prsn_clt_cat?: SortOrder
    prsn_clt_mid?: SortOrder
    prsn_clt_uid?: SortOrder
    prsn_clt_dateline?: SortOrder
  }

  export type chii_person_collectsSumOrderByAggregateInput = {
    prsn_clt_id?: SortOrder
    prsn_clt_mid?: SortOrder
    prsn_clt_uid?: SortOrder
    prsn_clt_dateline?: SortOrder
  }

  export type Enumchii_person_collects_prsn_clt_catWithAggregatesFilter = {
    equals?: chii_person_collects_prsn_clt_cat
    in?: Enumerable<chii_person_collects_prsn_clt_cat>
    notIn?: Enumerable<chii_person_collects_prsn_clt_cat>
    not?: NestedEnumchii_person_collects_prsn_clt_catWithAggregatesFilter | chii_person_collects_prsn_clt_cat
    _count?: NestedIntFilter
    _min?: NestedEnumchii_person_collects_prsn_clt_catFilter
    _max?: NestedEnumchii_person_collects_prsn_clt_catFilter
  }

  export type Enumchii_person_cs_index_prsn_typeFilter = {
    equals?: chii_person_cs_index_prsn_type
    in?: Enumerable<chii_person_cs_index_prsn_type>
    notIn?: Enumerable<chii_person_cs_index_prsn_type>
    not?: NestedEnumchii_person_cs_index_prsn_typeFilter | chii_person_cs_index_prsn_type
  }

  export type chii_person_cs_indexPrsn_typePrsn_idSubject_idPrsn_positionCompoundUniqueInput = {
    prsn_type: chii_person_cs_index_prsn_type
    prsn_id: number
    subject_id: number
    prsn_position: number
  }

  export type chii_person_cs_indexCountOrderByAggregateInput = {
    prsn_type?: SortOrder
    prsn_id?: SortOrder
    prsn_position?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    summary?: SortOrder
    prsn_appear_eps?: SortOrder
  }

  export type chii_person_cs_indexAvgOrderByAggregateInput = {
    prsn_id?: SortOrder
    prsn_position?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
  }

  export type chii_person_cs_indexMaxOrderByAggregateInput = {
    prsn_type?: SortOrder
    prsn_id?: SortOrder
    prsn_position?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    summary?: SortOrder
    prsn_appear_eps?: SortOrder
  }

  export type chii_person_cs_indexMinOrderByAggregateInput = {
    prsn_type?: SortOrder
    prsn_id?: SortOrder
    prsn_position?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    summary?: SortOrder
    prsn_appear_eps?: SortOrder
  }

  export type chii_person_cs_indexSumOrderByAggregateInput = {
    prsn_id?: SortOrder
    prsn_position?: SortOrder
    subject_id?: SortOrder
    subject_type_id?: SortOrder
  }

  export type Enumchii_person_cs_index_prsn_typeWithAggregatesFilter = {
    equals?: chii_person_cs_index_prsn_type
    in?: Enumerable<chii_person_cs_index_prsn_type>
    notIn?: Enumerable<chii_person_cs_index_prsn_type>
    not?: NestedEnumchii_person_cs_index_prsn_typeWithAggregatesFilter | chii_person_cs_index_prsn_type
    _count?: NestedIntFilter
    _min?: NestedEnumchii_person_cs_index_prsn_typeFilter
    _max?: NestedEnumchii_person_cs_index_prsn_typeFilter
  }

  export type Enumchii_person_fields_prsn_catFilter = {
    equals?: chii_person_fields_prsn_cat
    in?: Enumerable<chii_person_fields_prsn_cat>
    notIn?: Enumerable<chii_person_fields_prsn_cat>
    not?: NestedEnumchii_person_fields_prsn_catFilter | chii_person_fields_prsn_cat
  }

  export type chii_person_fieldsPrsn_catPrsn_idCompoundUniqueInput = {
    prsn_cat: chii_person_fields_prsn_cat
    prsn_id: number
  }

  export type chii_person_fieldsCountOrderByAggregateInput = {
    prsn_cat?: SortOrder
    prsn_id?: SortOrder
    gender?: SortOrder
    bloodtype?: SortOrder
    birth_year?: SortOrder
    birth_mon?: SortOrder
    birth_day?: SortOrder
  }

  export type chii_person_fieldsAvgOrderByAggregateInput = {
    prsn_id?: SortOrder
    gender?: SortOrder
    bloodtype?: SortOrder
    birth_year?: SortOrder
    birth_mon?: SortOrder
    birth_day?: SortOrder
  }

  export type chii_person_fieldsMaxOrderByAggregateInput = {
    prsn_cat?: SortOrder
    prsn_id?: SortOrder
    gender?: SortOrder
    bloodtype?: SortOrder
    birth_year?: SortOrder
    birth_mon?: SortOrder
    birth_day?: SortOrder
  }

  export type chii_person_fieldsMinOrderByAggregateInput = {
    prsn_cat?: SortOrder
    prsn_id?: SortOrder
    gender?: SortOrder
    bloodtype?: SortOrder
    birth_year?: SortOrder
    birth_mon?: SortOrder
    birth_day?: SortOrder
  }

  export type chii_person_fieldsSumOrderByAggregateInput = {
    prsn_id?: SortOrder
    gender?: SortOrder
    bloodtype?: SortOrder
    birth_year?: SortOrder
    birth_mon?: SortOrder
    birth_day?: SortOrder
  }

  export type Enumchii_person_fields_prsn_catWithAggregatesFilter = {
    equals?: chii_person_fields_prsn_cat
    in?: Enumerable<chii_person_fields_prsn_cat>
    notIn?: Enumerable<chii_person_fields_prsn_cat>
    not?: NestedEnumchii_person_fields_prsn_catWithAggregatesFilter | chii_person_fields_prsn_cat
    _count?: NestedIntFilter
    _min?: NestedEnumchii_person_fields_prsn_catFilter
    _max?: NestedEnumchii_person_fields_prsn_catFilter
  }

  export type chii_personsCountOrderByAggregateInput = {
    prsn_id?: SortOrder
    prsn_name?: SortOrder
    prsn_type?: SortOrder
    prsn_infobox?: SortOrder
    prsn_producer?: SortOrder
    prsn_mangaka?: SortOrder
    prsn_artist?: SortOrder
    prsn_seiyu?: SortOrder
    prsn_writer?: SortOrder
    prsn_illustrator?: SortOrder
    prsn_actor?: SortOrder
    prsn_summary?: SortOrder
    prsn_img?: SortOrder
    prsn_img_anidb?: SortOrder
    prsn_comment?: SortOrder
    prsn_collects?: SortOrder
    prsn_dateline?: SortOrder
    prsn_lastpost?: SortOrder
    prsn_lock?: SortOrder
    prsn_anidb_id?: SortOrder
    prsn_ban?: SortOrder
    prsn_redirect?: SortOrder
    prsn_nsfw?: SortOrder
  }

  export type chii_personsAvgOrderByAggregateInput = {
    prsn_id?: SortOrder
    prsn_type?: SortOrder
    prsn_writer?: SortOrder
    prsn_illustrator?: SortOrder
    prsn_comment?: SortOrder
    prsn_collects?: SortOrder
    prsn_dateline?: SortOrder
    prsn_lastpost?: SortOrder
    prsn_lock?: SortOrder
    prsn_anidb_id?: SortOrder
    prsn_ban?: SortOrder
    prsn_redirect?: SortOrder
  }

  export type chii_personsMaxOrderByAggregateInput = {
    prsn_id?: SortOrder
    prsn_name?: SortOrder
    prsn_type?: SortOrder
    prsn_infobox?: SortOrder
    prsn_producer?: SortOrder
    prsn_mangaka?: SortOrder
    prsn_artist?: SortOrder
    prsn_seiyu?: SortOrder
    prsn_writer?: SortOrder
    prsn_illustrator?: SortOrder
    prsn_actor?: SortOrder
    prsn_summary?: SortOrder
    prsn_img?: SortOrder
    prsn_img_anidb?: SortOrder
    prsn_comment?: SortOrder
    prsn_collects?: SortOrder
    prsn_dateline?: SortOrder
    prsn_lastpost?: SortOrder
    prsn_lock?: SortOrder
    prsn_anidb_id?: SortOrder
    prsn_ban?: SortOrder
    prsn_redirect?: SortOrder
    prsn_nsfw?: SortOrder
  }

  export type chii_personsMinOrderByAggregateInput = {
    prsn_id?: SortOrder
    prsn_name?: SortOrder
    prsn_type?: SortOrder
    prsn_infobox?: SortOrder
    prsn_producer?: SortOrder
    prsn_mangaka?: SortOrder
    prsn_artist?: SortOrder
    prsn_seiyu?: SortOrder
    prsn_writer?: SortOrder
    prsn_illustrator?: SortOrder
    prsn_actor?: SortOrder
    prsn_summary?: SortOrder
    prsn_img?: SortOrder
    prsn_img_anidb?: SortOrder
    prsn_comment?: SortOrder
    prsn_collects?: SortOrder
    prsn_dateline?: SortOrder
    prsn_lastpost?: SortOrder
    prsn_lock?: SortOrder
    prsn_anidb_id?: SortOrder
    prsn_ban?: SortOrder
    prsn_redirect?: SortOrder
    prsn_nsfw?: SortOrder
  }

  export type chii_personsSumOrderByAggregateInput = {
    prsn_id?: SortOrder
    prsn_type?: SortOrder
    prsn_writer?: SortOrder
    prsn_illustrator?: SortOrder
    prsn_comment?: SortOrder
    prsn_collects?: SortOrder
    prsn_dateline?: SortOrder
    prsn_lastpost?: SortOrder
    prsn_lock?: SortOrder
    prsn_anidb_id?: SortOrder
    prsn_ban?: SortOrder
    prsn_redirect?: SortOrder
  }

  export type chii_prsn_commentsCountOrderByAggregateInput = {
    prsn_pst_id?: SortOrder
    prsn_pst_mid?: SortOrder
    prsn_pst_uid?: SortOrder
    prsn_pst_related?: SortOrder
    prsn_pst_dateline?: SortOrder
    prsn_pst_content?: SortOrder
  }

  export type chii_prsn_commentsAvgOrderByAggregateInput = {
    prsn_pst_id?: SortOrder
    prsn_pst_mid?: SortOrder
    prsn_pst_uid?: SortOrder
    prsn_pst_related?: SortOrder
    prsn_pst_dateline?: SortOrder
  }

  export type chii_prsn_commentsMaxOrderByAggregateInput = {
    prsn_pst_id?: SortOrder
    prsn_pst_mid?: SortOrder
    prsn_pst_uid?: SortOrder
    prsn_pst_related?: SortOrder
    prsn_pst_dateline?: SortOrder
    prsn_pst_content?: SortOrder
  }

  export type chii_prsn_commentsMinOrderByAggregateInput = {
    prsn_pst_id?: SortOrder
    prsn_pst_mid?: SortOrder
    prsn_pst_uid?: SortOrder
    prsn_pst_related?: SortOrder
    prsn_pst_dateline?: SortOrder
    prsn_pst_content?: SortOrder
  }

  export type chii_prsn_commentsSumOrderByAggregateInput = {
    prsn_pst_id?: SortOrder
    prsn_pst_mid?: SortOrder
    prsn_pst_uid?: SortOrder
    prsn_pst_related?: SortOrder
    prsn_pst_dateline?: SortOrder
  }

  export type chii_rev_historyCountOrderByAggregateInput = {
    rev_id?: SortOrder
    rev_type?: SortOrder
    rev_mid?: SortOrder
    rev_text_id?: SortOrder
    rev_dateline?: SortOrder
    rev_creator?: SortOrder
    rev_edit_summary?: SortOrder
  }

  export type chii_rev_historyAvgOrderByAggregateInput = {
    rev_id?: SortOrder
    rev_type?: SortOrder
    rev_mid?: SortOrder
    rev_text_id?: SortOrder
    rev_dateline?: SortOrder
    rev_creator?: SortOrder
  }

  export type chii_rev_historyMaxOrderByAggregateInput = {
    rev_id?: SortOrder
    rev_type?: SortOrder
    rev_mid?: SortOrder
    rev_text_id?: SortOrder
    rev_dateline?: SortOrder
    rev_creator?: SortOrder
    rev_edit_summary?: SortOrder
  }

  export type chii_rev_historyMinOrderByAggregateInput = {
    rev_id?: SortOrder
    rev_type?: SortOrder
    rev_mid?: SortOrder
    rev_text_id?: SortOrder
    rev_dateline?: SortOrder
    rev_creator?: SortOrder
    rev_edit_summary?: SortOrder
  }

  export type chii_rev_historySumOrderByAggregateInput = {
    rev_id?: SortOrder
    rev_type?: SortOrder
    rev_mid?: SortOrder
    rev_text_id?: SortOrder
    rev_dateline?: SortOrder
    rev_creator?: SortOrder
  }

  export type chii_rev_textCountOrderByAggregateInput = {
    rev_text_id?: SortOrder
    rev_text?: SortOrder
  }

  export type chii_rev_textAvgOrderByAggregateInput = {
    rev_text_id?: SortOrder
  }

  export type chii_rev_textMaxOrderByAggregateInput = {
    rev_text_id?: SortOrder
    rev_text?: SortOrder
  }

  export type chii_rev_textMinOrderByAggregateInput = {
    rev_text_id?: SortOrder
    rev_text?: SortOrder
  }

  export type chii_rev_textSumOrderByAggregateInput = {
    rev_text_id?: SortOrder
  }

  export type chii_subject_fieldsCountOrderByAggregateInput = {
    field_sid?: SortOrder
    field_tid?: SortOrder
    field_tags?: SortOrder
    field_rate_1?: SortOrder
    field_rate_2?: SortOrder
    field_rate_3?: SortOrder
    field_rate_4?: SortOrder
    field_rate_5?: SortOrder
    field_rate_6?: SortOrder
    field_rate_7?: SortOrder
    field_rate_8?: SortOrder
    field_rate_9?: SortOrder
    field_rate_10?: SortOrder
    field_airtime?: SortOrder
    field_rank?: SortOrder
    field_year?: SortOrder
    field_mon?: SortOrder
    field_week_day?: SortOrder
    field_date?: SortOrder
    field_redirect?: SortOrder
  }

  export type chii_subject_fieldsAvgOrderByAggregateInput = {
    field_sid?: SortOrder
    field_tid?: SortOrder
    field_rate_1?: SortOrder
    field_rate_2?: SortOrder
    field_rate_3?: SortOrder
    field_rate_4?: SortOrder
    field_rate_5?: SortOrder
    field_rate_6?: SortOrder
    field_rate_7?: SortOrder
    field_rate_8?: SortOrder
    field_rate_9?: SortOrder
    field_rate_10?: SortOrder
    field_rank?: SortOrder
    field_year?: SortOrder
    field_mon?: SortOrder
    field_redirect?: SortOrder
  }

  export type chii_subject_fieldsMaxOrderByAggregateInput = {
    field_sid?: SortOrder
    field_tid?: SortOrder
    field_tags?: SortOrder
    field_rate_1?: SortOrder
    field_rate_2?: SortOrder
    field_rate_3?: SortOrder
    field_rate_4?: SortOrder
    field_rate_5?: SortOrder
    field_rate_6?: SortOrder
    field_rate_7?: SortOrder
    field_rate_8?: SortOrder
    field_rate_9?: SortOrder
    field_rate_10?: SortOrder
    field_airtime?: SortOrder
    field_rank?: SortOrder
    field_year?: SortOrder
    field_mon?: SortOrder
    field_week_day?: SortOrder
    field_date?: SortOrder
    field_redirect?: SortOrder
  }

  export type chii_subject_fieldsMinOrderByAggregateInput = {
    field_sid?: SortOrder
    field_tid?: SortOrder
    field_tags?: SortOrder
    field_rate_1?: SortOrder
    field_rate_2?: SortOrder
    field_rate_3?: SortOrder
    field_rate_4?: SortOrder
    field_rate_5?: SortOrder
    field_rate_6?: SortOrder
    field_rate_7?: SortOrder
    field_rate_8?: SortOrder
    field_rate_9?: SortOrder
    field_rate_10?: SortOrder
    field_airtime?: SortOrder
    field_rank?: SortOrder
    field_year?: SortOrder
    field_mon?: SortOrder
    field_week_day?: SortOrder
    field_date?: SortOrder
    field_redirect?: SortOrder
  }

  export type chii_subject_fieldsSumOrderByAggregateInput = {
    field_sid?: SortOrder
    field_tid?: SortOrder
    field_rate_1?: SortOrder
    field_rate_2?: SortOrder
    field_rate_3?: SortOrder
    field_rate_4?: SortOrder
    field_rate_5?: SortOrder
    field_rate_6?: SortOrder
    field_rate_7?: SortOrder
    field_rate_8?: SortOrder
    field_rate_9?: SortOrder
    field_rate_10?: SortOrder
    field_rank?: SortOrder
    field_year?: SortOrder
    field_mon?: SortOrder
    field_redirect?: SortOrder
  }

  export type chii_subject_interestsInterest_uidInterest_subject_idCompoundUniqueInput = {
    interest_uid: number
    interest_subject_id: number
  }

  export type chii_subject_interestsCountOrderByAggregateInput = {
    interest_id?: SortOrder
    interest_uid?: SortOrder
    interest_subject_id?: SortOrder
    interest_subject_type?: SortOrder
    interest_rate?: SortOrder
    interest_type?: SortOrder
    interest_has_comment?: SortOrder
    interest_comment?: SortOrder
    interest_tag?: SortOrder
    interest_ep_status?: SortOrder
    interest_vol_status?: SortOrder
    interest_wish_dateline?: SortOrder
    interest_doing_dateline?: SortOrder
    interest_collect_dateline?: SortOrder
    interest_on_hold_dateline?: SortOrder
    interest_dropped_dateline?: SortOrder
    interest_create_ip?: SortOrder
    interest_lasttouch_ip?: SortOrder
    interest_lasttouch?: SortOrder
    interest_private?: SortOrder
  }

  export type chii_subject_interestsAvgOrderByAggregateInput = {
    interest_id?: SortOrder
    interest_uid?: SortOrder
    interest_subject_id?: SortOrder
    interest_subject_type?: SortOrder
    interest_rate?: SortOrder
    interest_ep_status?: SortOrder
    interest_vol_status?: SortOrder
    interest_wish_dateline?: SortOrder
    interest_doing_dateline?: SortOrder
    interest_collect_dateline?: SortOrder
    interest_on_hold_dateline?: SortOrder
    interest_dropped_dateline?: SortOrder
    interest_lasttouch?: SortOrder
  }

  export type chii_subject_interestsMaxOrderByAggregateInput = {
    interest_id?: SortOrder
    interest_uid?: SortOrder
    interest_subject_id?: SortOrder
    interest_subject_type?: SortOrder
    interest_rate?: SortOrder
    interest_type?: SortOrder
    interest_has_comment?: SortOrder
    interest_comment?: SortOrder
    interest_tag?: SortOrder
    interest_ep_status?: SortOrder
    interest_vol_status?: SortOrder
    interest_wish_dateline?: SortOrder
    interest_doing_dateline?: SortOrder
    interest_collect_dateline?: SortOrder
    interest_on_hold_dateline?: SortOrder
    interest_dropped_dateline?: SortOrder
    interest_create_ip?: SortOrder
    interest_lasttouch_ip?: SortOrder
    interest_lasttouch?: SortOrder
    interest_private?: SortOrder
  }

  export type chii_subject_interestsMinOrderByAggregateInput = {
    interest_id?: SortOrder
    interest_uid?: SortOrder
    interest_subject_id?: SortOrder
    interest_subject_type?: SortOrder
    interest_rate?: SortOrder
    interest_type?: SortOrder
    interest_has_comment?: SortOrder
    interest_comment?: SortOrder
    interest_tag?: SortOrder
    interest_ep_status?: SortOrder
    interest_vol_status?: SortOrder
    interest_wish_dateline?: SortOrder
    interest_doing_dateline?: SortOrder
    interest_collect_dateline?: SortOrder
    interest_on_hold_dateline?: SortOrder
    interest_dropped_dateline?: SortOrder
    interest_create_ip?: SortOrder
    interest_lasttouch_ip?: SortOrder
    interest_lasttouch?: SortOrder
    interest_private?: SortOrder
  }

  export type chii_subject_interestsSumOrderByAggregateInput = {
    interest_id?: SortOrder
    interest_uid?: SortOrder
    interest_subject_id?: SortOrder
    interest_subject_type?: SortOrder
    interest_rate?: SortOrder
    interest_ep_status?: SortOrder
    interest_vol_status?: SortOrder
    interest_wish_dateline?: SortOrder
    interest_doing_dateline?: SortOrder
    interest_collect_dateline?: SortOrder
    interest_on_hold_dateline?: SortOrder
    interest_dropped_dateline?: SortOrder
    interest_lasttouch?: SortOrder
  }

  export type chii_subject_postsCountOrderByAggregateInput = {
    sbj_pst_id?: SortOrder
    sbj_pst_mid?: SortOrder
    sbj_pst_uid?: SortOrder
    sbj_pst_related?: SortOrder
    sbj_pst_content?: SortOrder
    sbj_pst_state?: SortOrder
    sbj_pst_dateline?: SortOrder
  }

  export type chii_subject_postsAvgOrderByAggregateInput = {
    sbj_pst_id?: SortOrder
    sbj_pst_mid?: SortOrder
    sbj_pst_uid?: SortOrder
    sbj_pst_related?: SortOrder
    sbj_pst_dateline?: SortOrder
  }

  export type chii_subject_postsMaxOrderByAggregateInput = {
    sbj_pst_id?: SortOrder
    sbj_pst_mid?: SortOrder
    sbj_pst_uid?: SortOrder
    sbj_pst_related?: SortOrder
    sbj_pst_content?: SortOrder
    sbj_pst_state?: SortOrder
    sbj_pst_dateline?: SortOrder
  }

  export type chii_subject_postsMinOrderByAggregateInput = {
    sbj_pst_id?: SortOrder
    sbj_pst_mid?: SortOrder
    sbj_pst_uid?: SortOrder
    sbj_pst_related?: SortOrder
    sbj_pst_content?: SortOrder
    sbj_pst_state?: SortOrder
    sbj_pst_dateline?: SortOrder
  }

  export type chii_subject_postsSumOrderByAggregateInput = {
    sbj_pst_id?: SortOrder
    sbj_pst_mid?: SortOrder
    sbj_pst_uid?: SortOrder
    sbj_pst_related?: SortOrder
    sbj_pst_dateline?: SortOrder
  }

  export type chii_subject_relationsRlt_subject_idRlt_related_subject_idRlt_vice_versaCompoundUniqueInput = {
    rlt_subject_id: number
    rlt_related_subject_id: number
    rlt_vice_versa: boolean
  }

  export type chii_subject_relationsCountOrderByAggregateInput = {
    rlt_subject_id?: SortOrder
    rlt_subject_type_id?: SortOrder
    rlt_relation_type?: SortOrder
    rlt_related_subject_id?: SortOrder
    rlt_related_subject_type_id?: SortOrder
    rlt_vice_versa?: SortOrder
    rlt_order?: SortOrder
  }

  export type chii_subject_relationsAvgOrderByAggregateInput = {
    rlt_subject_id?: SortOrder
    rlt_subject_type_id?: SortOrder
    rlt_relation_type?: SortOrder
    rlt_related_subject_id?: SortOrder
    rlt_related_subject_type_id?: SortOrder
    rlt_order?: SortOrder
  }

  export type chii_subject_relationsMaxOrderByAggregateInput = {
    rlt_subject_id?: SortOrder
    rlt_subject_type_id?: SortOrder
    rlt_relation_type?: SortOrder
    rlt_related_subject_id?: SortOrder
    rlt_related_subject_type_id?: SortOrder
    rlt_vice_versa?: SortOrder
    rlt_order?: SortOrder
  }

  export type chii_subject_relationsMinOrderByAggregateInput = {
    rlt_subject_id?: SortOrder
    rlt_subject_type_id?: SortOrder
    rlt_relation_type?: SortOrder
    rlt_related_subject_id?: SortOrder
    rlt_related_subject_type_id?: SortOrder
    rlt_vice_versa?: SortOrder
    rlt_order?: SortOrder
  }

  export type chii_subject_relationsSumOrderByAggregateInput = {
    rlt_subject_id?: SortOrder
    rlt_subject_type_id?: SortOrder
    rlt_relation_type?: SortOrder
    rlt_related_subject_id?: SortOrder
    rlt_related_subject_type_id?: SortOrder
    rlt_order?: SortOrder
  }

  export type chii_subject_revisionsCountOrderByAggregateInput = {
    rev_id?: SortOrder
    rev_type?: SortOrder
    rev_subject_id?: SortOrder
    rev_type_id?: SortOrder
    rev_creator?: SortOrder
    rev_dateline?: SortOrder
    rev_name?: SortOrder
    rev_name_cn?: SortOrder
    rev_field_infobox?: SortOrder
    rev_field_summary?: SortOrder
    rev_vote_field?: SortOrder
    rev_field_eps?: SortOrder
    rev_edit_summary?: SortOrder
    rev_platform?: SortOrder
  }

  export type chii_subject_revisionsAvgOrderByAggregateInput = {
    rev_id?: SortOrder
    rev_type?: SortOrder
    rev_subject_id?: SortOrder
    rev_type_id?: SortOrder
    rev_creator?: SortOrder
    rev_dateline?: SortOrder
    rev_field_eps?: SortOrder
    rev_platform?: SortOrder
  }

  export type chii_subject_revisionsMaxOrderByAggregateInput = {
    rev_id?: SortOrder
    rev_type?: SortOrder
    rev_subject_id?: SortOrder
    rev_type_id?: SortOrder
    rev_creator?: SortOrder
    rev_dateline?: SortOrder
    rev_name?: SortOrder
    rev_name_cn?: SortOrder
    rev_field_infobox?: SortOrder
    rev_field_summary?: SortOrder
    rev_vote_field?: SortOrder
    rev_field_eps?: SortOrder
    rev_edit_summary?: SortOrder
    rev_platform?: SortOrder
  }

  export type chii_subject_revisionsMinOrderByAggregateInput = {
    rev_id?: SortOrder
    rev_type?: SortOrder
    rev_subject_id?: SortOrder
    rev_type_id?: SortOrder
    rev_creator?: SortOrder
    rev_dateline?: SortOrder
    rev_name?: SortOrder
    rev_name_cn?: SortOrder
    rev_field_infobox?: SortOrder
    rev_field_summary?: SortOrder
    rev_vote_field?: SortOrder
    rev_field_eps?: SortOrder
    rev_edit_summary?: SortOrder
    rev_platform?: SortOrder
  }

  export type chii_subject_revisionsSumOrderByAggregateInput = {
    rev_id?: SortOrder
    rev_type?: SortOrder
    rev_subject_id?: SortOrder
    rev_type_id?: SortOrder
    rev_creator?: SortOrder
    rev_dateline?: SortOrder
    rev_field_eps?: SortOrder
    rev_platform?: SortOrder
  }

  export type chii_subject_topicsCountOrderByAggregateInput = {
    sbj_tpc_id?: SortOrder
    sbj_tpc_subject_id?: SortOrder
    sbj_tpc_uid?: SortOrder
    sbj_tpc_title?: SortOrder
    sbj_tpc_dateline?: SortOrder
    sbj_tpc_lastpost?: SortOrder
    sbj_tpc_replies?: SortOrder
    sbj_tpc_state?: SortOrder
    sbj_tpc_display?: SortOrder
  }

  export type chii_subject_topicsAvgOrderByAggregateInput = {
    sbj_tpc_id?: SortOrder
    sbj_tpc_subject_id?: SortOrder
    sbj_tpc_uid?: SortOrder
    sbj_tpc_dateline?: SortOrder
    sbj_tpc_lastpost?: SortOrder
    sbj_tpc_replies?: SortOrder
  }

  export type chii_subject_topicsMaxOrderByAggregateInput = {
    sbj_tpc_id?: SortOrder
    sbj_tpc_subject_id?: SortOrder
    sbj_tpc_uid?: SortOrder
    sbj_tpc_title?: SortOrder
    sbj_tpc_dateline?: SortOrder
    sbj_tpc_lastpost?: SortOrder
    sbj_tpc_replies?: SortOrder
    sbj_tpc_state?: SortOrder
    sbj_tpc_display?: SortOrder
  }

  export type chii_subject_topicsMinOrderByAggregateInput = {
    sbj_tpc_id?: SortOrder
    sbj_tpc_subject_id?: SortOrder
    sbj_tpc_uid?: SortOrder
    sbj_tpc_title?: SortOrder
    sbj_tpc_dateline?: SortOrder
    sbj_tpc_lastpost?: SortOrder
    sbj_tpc_replies?: SortOrder
    sbj_tpc_state?: SortOrder
    sbj_tpc_display?: SortOrder
  }

  export type chii_subject_topicsSumOrderByAggregateInput = {
    sbj_tpc_id?: SortOrder
    sbj_tpc_subject_id?: SortOrder
    sbj_tpc_uid?: SortOrder
    sbj_tpc_dateline?: SortOrder
    sbj_tpc_lastpost?: SortOrder
    sbj_tpc_replies?: SortOrder
  }

  export type chii_subjectsCountOrderByAggregateInput = {
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    subject_name?: SortOrder
    subject_name_cn?: SortOrder
    subject_uid?: SortOrder
    subject_creator?: SortOrder
    subject_dateline?: SortOrder
    subject_image?: SortOrder
    subject_platform?: SortOrder
    field_infobox?: SortOrder
    field_summary?: SortOrder
    field_5?: SortOrder
    field_volumes?: SortOrder
    field_eps?: SortOrder
    subject_wish?: SortOrder
    subject_collect?: SortOrder
    subject_doing?: SortOrder
    subject_on_hold?: SortOrder
    subject_dropped?: SortOrder
    subject_series?: SortOrder
    subject_series_entry?: SortOrder
    subject_idx_cn?: SortOrder
    subject_airtime?: SortOrder
    subject_nsfw?: SortOrder
    subject_ban?: SortOrder
  }

  export type chii_subjectsAvgOrderByAggregateInput = {
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    subject_creator?: SortOrder
    subject_dateline?: SortOrder
    subject_platform?: SortOrder
    field_volumes?: SortOrder
    field_eps?: SortOrder
    subject_wish?: SortOrder
    subject_collect?: SortOrder
    subject_doing?: SortOrder
    subject_on_hold?: SortOrder
    subject_dropped?: SortOrder
    subject_series_entry?: SortOrder
  }

  export type chii_subjectsMaxOrderByAggregateInput = {
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    subject_name?: SortOrder
    subject_name_cn?: SortOrder
    subject_uid?: SortOrder
    subject_creator?: SortOrder
    subject_dateline?: SortOrder
    subject_image?: SortOrder
    subject_platform?: SortOrder
    field_infobox?: SortOrder
    field_summary?: SortOrder
    field_5?: SortOrder
    field_volumes?: SortOrder
    field_eps?: SortOrder
    subject_wish?: SortOrder
    subject_collect?: SortOrder
    subject_doing?: SortOrder
    subject_on_hold?: SortOrder
    subject_dropped?: SortOrder
    subject_series?: SortOrder
    subject_series_entry?: SortOrder
    subject_idx_cn?: SortOrder
    subject_airtime?: SortOrder
    subject_nsfw?: SortOrder
    subject_ban?: SortOrder
  }

  export type chii_subjectsMinOrderByAggregateInput = {
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    subject_name?: SortOrder
    subject_name_cn?: SortOrder
    subject_uid?: SortOrder
    subject_creator?: SortOrder
    subject_dateline?: SortOrder
    subject_image?: SortOrder
    subject_platform?: SortOrder
    field_infobox?: SortOrder
    field_summary?: SortOrder
    field_5?: SortOrder
    field_volumes?: SortOrder
    field_eps?: SortOrder
    subject_wish?: SortOrder
    subject_collect?: SortOrder
    subject_doing?: SortOrder
    subject_on_hold?: SortOrder
    subject_dropped?: SortOrder
    subject_series?: SortOrder
    subject_series_entry?: SortOrder
    subject_idx_cn?: SortOrder
    subject_airtime?: SortOrder
    subject_nsfw?: SortOrder
    subject_ban?: SortOrder
  }

  export type chii_subjectsSumOrderByAggregateInput = {
    subject_id?: SortOrder
    subject_type_id?: SortOrder
    subject_creator?: SortOrder
    subject_dateline?: SortOrder
    subject_platform?: SortOrder
    field_volumes?: SortOrder
    field_eps?: SortOrder
    subject_wish?: SortOrder
    subject_collect?: SortOrder
    subject_doing?: SortOrder
    subject_on_hold?: SortOrder
    subject_dropped?: SortOrder
    subject_series_entry?: SortOrder
  }

  export type chii_timelineCountOrderByAggregateInput = {
    tml_id?: SortOrder
    tml_uid?: SortOrder
    tml_cat?: SortOrder
    tml_type?: SortOrder
    tml_related?: SortOrder
    tml_memo?: SortOrder
    tml_img?: SortOrder
    tml_batch?: SortOrder
    tml_source?: SortOrder
    tml_replies?: SortOrder
    tml_dateline?: SortOrder
    tml_status?: SortOrder
  }

  export type chii_timelineAvgOrderByAggregateInput = {
    tml_id?: SortOrder
    tml_uid?: SortOrder
    tml_cat?: SortOrder
    tml_type?: SortOrder
    tml_batch?: SortOrder
    tml_source?: SortOrder
    tml_replies?: SortOrder
    tml_dateline?: SortOrder
    tml_status?: SortOrder
  }

  export type chii_timelineMaxOrderByAggregateInput = {
    tml_id?: SortOrder
    tml_uid?: SortOrder
    tml_cat?: SortOrder
    tml_type?: SortOrder
    tml_related?: SortOrder
    tml_memo?: SortOrder
    tml_img?: SortOrder
    tml_batch?: SortOrder
    tml_source?: SortOrder
    tml_replies?: SortOrder
    tml_dateline?: SortOrder
    tml_status?: SortOrder
  }

  export type chii_timelineMinOrderByAggregateInput = {
    tml_id?: SortOrder
    tml_uid?: SortOrder
    tml_cat?: SortOrder
    tml_type?: SortOrder
    tml_related?: SortOrder
    tml_memo?: SortOrder
    tml_img?: SortOrder
    tml_batch?: SortOrder
    tml_source?: SortOrder
    tml_replies?: SortOrder
    tml_dateline?: SortOrder
    tml_status?: SortOrder
  }

  export type chii_timelineSumOrderByAggregateInput = {
    tml_id?: SortOrder
    tml_uid?: SortOrder
    tml_cat?: SortOrder
    tml_type?: SortOrder
    tml_batch?: SortOrder
    tml_source?: SortOrder
    tml_replies?: SortOrder
    tml_dateline?: SortOrder
    tml_status?: SortOrder
  }

  export type chii_usergroupCountOrderByAggregateInput = {
    usr_grp_id?: SortOrder
    usr_grp_name?: SortOrder
    usr_grp_perm?: SortOrder
    usr_grp_dateline?: SortOrder
  }

  export type chii_usergroupAvgOrderByAggregateInput = {
    usr_grp_id?: SortOrder
    usr_grp_dateline?: SortOrder
  }

  export type chii_usergroupMaxOrderByAggregateInput = {
    usr_grp_id?: SortOrder
    usr_grp_name?: SortOrder
    usr_grp_perm?: SortOrder
    usr_grp_dateline?: SortOrder
  }

  export type chii_usergroupMinOrderByAggregateInput = {
    usr_grp_id?: SortOrder
    usr_grp_name?: SortOrder
    usr_grp_perm?: SortOrder
    usr_grp_dateline?: SortOrder
  }

  export type chii_usergroupSumOrderByAggregateInput = {
    usr_grp_id?: SortOrder
    usr_grp_dateline?: SortOrder
  }

  export type exampleCountOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
  }

  export type exampleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type exampleMaxOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
  }

  export type exampleMinOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
  }

  export type exampleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BytesFieldUpdateOperationsInput = {
    set?: Buffer
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type Enumchii_person_collects_prsn_clt_catFieldUpdateOperationsInput = {
    set?: chii_person_collects_prsn_clt_cat
  }

  export type Enumchii_person_cs_index_prsn_typeFieldUpdateOperationsInput = {
    set?: chii_person_cs_index_prsn_type
  }

  export type Enumchii_person_fields_prsn_catFieldUpdateOperationsInput = {
    set?: chii_person_fields_prsn_cat
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBytesFilter = {
    equals?: Buffer
    in?: Enumerable<Buffer>
    notIn?: Enumerable<Buffer>
    not?: NestedBytesFilter | Buffer
  }

  export type NestedBigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type NestedBytesWithAggregatesFilter = {
    equals?: Buffer
    in?: Enumerable<Buffer>
    notIn?: Enumerable<Buffer>
    not?: NestedBytesWithAggregatesFilter | Buffer
    _count?: NestedIntFilter
    _min?: NestedBytesFilter
    _max?: NestedBytesFilter
  }

  export type NestedBigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type NestedEnumchii_person_collects_prsn_clt_catFilter = {
    equals?: chii_person_collects_prsn_clt_cat
    in?: Enumerable<chii_person_collects_prsn_clt_cat>
    notIn?: Enumerable<chii_person_collects_prsn_clt_cat>
    not?: NestedEnumchii_person_collects_prsn_clt_catFilter | chii_person_collects_prsn_clt_cat
  }

  export type NestedEnumchii_person_collects_prsn_clt_catWithAggregatesFilter = {
    equals?: chii_person_collects_prsn_clt_cat
    in?: Enumerable<chii_person_collects_prsn_clt_cat>
    notIn?: Enumerable<chii_person_collects_prsn_clt_cat>
    not?: NestedEnumchii_person_collects_prsn_clt_catWithAggregatesFilter | chii_person_collects_prsn_clt_cat
    _count?: NestedIntFilter
    _min?: NestedEnumchii_person_collects_prsn_clt_catFilter
    _max?: NestedEnumchii_person_collects_prsn_clt_catFilter
  }

  export type NestedEnumchii_person_cs_index_prsn_typeFilter = {
    equals?: chii_person_cs_index_prsn_type
    in?: Enumerable<chii_person_cs_index_prsn_type>
    notIn?: Enumerable<chii_person_cs_index_prsn_type>
    not?: NestedEnumchii_person_cs_index_prsn_typeFilter | chii_person_cs_index_prsn_type
  }

  export type NestedEnumchii_person_cs_index_prsn_typeWithAggregatesFilter = {
    equals?: chii_person_cs_index_prsn_type
    in?: Enumerable<chii_person_cs_index_prsn_type>
    notIn?: Enumerable<chii_person_cs_index_prsn_type>
    not?: NestedEnumchii_person_cs_index_prsn_typeWithAggregatesFilter | chii_person_cs_index_prsn_type
    _count?: NestedIntFilter
    _min?: NestedEnumchii_person_cs_index_prsn_typeFilter
    _max?: NestedEnumchii_person_cs_index_prsn_typeFilter
  }

  export type NestedEnumchii_person_fields_prsn_catFilter = {
    equals?: chii_person_fields_prsn_cat
    in?: Enumerable<chii_person_fields_prsn_cat>
    notIn?: Enumerable<chii_person_fields_prsn_cat>
    not?: NestedEnumchii_person_fields_prsn_catFilter | chii_person_fields_prsn_cat
  }

  export type NestedEnumchii_person_fields_prsn_catWithAggregatesFilter = {
    equals?: chii_person_fields_prsn_cat
    in?: Enumerable<chii_person_fields_prsn_cat>
    notIn?: Enumerable<chii_person_fields_prsn_cat>
    not?: NestedEnumchii_person_fields_prsn_catWithAggregatesFilter | chii_person_fields_prsn_cat
    _count?: NestedIntFilter
    _min?: NestedEnumchii_person_fields_prsn_catFilter
    _max?: NestedEnumchii_person_fields_prsn_catFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}