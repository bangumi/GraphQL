/* eslint-disable */

/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type { Context } from './context';
import type { IUser } from './types/user';

export interface NexusGenInputs {}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenObjects {
  Avatar: {
    // root type
    large: string; // String!
    medium: string; // String!
    small: string; // String!
  };
  Episode: {
    // root type
    description: string; // String!
    duration: string; // String!
    id: number; // Int!
    name: string; // String!
    name_cn: string; // String!
    sort: number; // Float!
    type: number; // Int!
  };
  Query: {};
  Subject: {
    // root type
    id: number; // Int!
    name: string; // String!
    name_cn: string; // String!
  };
  User: IUser;
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars;

export interface NexusGenFieldTypes {
  Avatar: {
    // field return type
    large: string; // String!
    medium: string; // String!
    small: string; // String!
  };
  Episode: {
    // field return type
    description: string; // String!
    duration: string; // String!
    id: number; // Int!
    name: string; // String!
    name_cn: string; // String!
    sort: number; // Float!
    type: number; // Int!
  };
  Query: {
    // field return type
    me: NexusGenRootTypes['User'] | null; // User
    subject: NexusGenRootTypes['Subject'] | null; // Subject
  };
  Subject: {
    // field return type
    episodes: NexusGenRootTypes['Episode'][] | null; // [Episode!]
    id: number; // Int!
    name: string; // String!
    name_cn: string; // String!
  };
  User: {
    // field return type
    ID: number; // Int!
    avatar: NexusGenRootTypes['Avatar']; // Avatar!
    nickname: string; // String!
    username: string; // String!
  };
}

export interface NexusGenFieldTypeNames {
  Avatar: {
    // field return type name
    large: 'String';
    medium: 'String';
    small: 'String';
  };
  Episode: {
    // field return type name
    description: 'String';
    duration: 'String';
    id: 'Int';
    name: 'String';
    name_cn: 'String';
    sort: 'Float';
    type: 'Int';
  };
  Query: {
    // field return type name
    me: 'User';
    subject: 'Subject';
  };
  Subject: {
    // field return type name
    episodes: 'Episode';
    id: 'Int';
    name: 'String';
    name_cn: 'String';
  };
  User: {
    // field return type name
    ID: 'Int';
    avatar: 'Avatar';
    nickname: 'String';
    username: 'String';
  };
}

export interface QuerySubjectArgs {
  id: number; // Int!
}

export interface SubjectEpisodesArgs {
  limit: number; // Int!
  offset: number; // Int!
  type?: number | null; // Int
}

export interface NexusGenArgTypes {
  Query: {
    subject: QuerySubjectArgs;
  };
  Subject: {
    episodes: SubjectEpisodesArgs;
  };
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}
